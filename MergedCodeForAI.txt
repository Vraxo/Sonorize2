<file path="App.cs">
using System.Diagnostics;
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Media;
using Avalonia.Styling;
using Avalonia.Themes.Fluent;
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.ViewModels;
using Sonorize.Views;
using Sonorize.Extensions;
using Sonorize.UI; // Added for ThemeResourceApplicator

namespace Sonorize;

public class App : Application
{
    public override void Initialize()
    {
        // Delay adding FluentTheme until OnFrameworkInitializationCompleted
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            var settingsService = new SettingsService();
            var appSettings = settingsService.LoadSettings();

            var themeService = new ThemeService(appSettings.PreferredThemeFileName);
            ThemeColors currentCustomTheme = themeService.CurrentTheme;

            var fluentTheme = new FluentTheme();
            Styles.Add(fluentTheme);
            RequestedThemeVariant = ThemeVariant.Dark;
            Debug.WriteLine($"[App] RequestedThemeVariant set to: {RequestedThemeVariant}");

            // Delegate theme color application to the new service
            ThemeResourceApplicator.ApplyCustomColorsToResources(this, currentCustomTheme);

            // Use the bootstrapper to create services and the main ViewModel
            var bootstrapper = new ApplicationServicesBootstrapper();
            var mainWindowViewModel = bootstrapper.Bootstrap(settingsService, currentCustomTheme);

            desktop.MainWindow = new MainWindow(currentCustomTheme)
            {
                DataContext = mainWindowViewModel
            };

            mainWindowViewModel.LoadInitialDataCommand.Execute(null);
        }

        base.OnFrameworkInitializationCompleted();
    }
}
</file>

<file path="Program.cs">
using System;
using Avalonia;
using NAudio.MediaFoundation; // Required for MediaFoundationApi

namespace Sonorize;

class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args)
    {
        // Initialize Media Foundation
        try
        {
            MediaFoundationApi.Startup();
            Console.WriteLine("[Program] MediaFoundationApi.Startup() called successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Program] CRITICAL ERROR: MediaFoundationApi.Startup() failed: {ex.Message}");
            // Optionally, prevent the app from starting or notify the user,
            // as MF features will likely not work.
        }

        try
        {
            BuildAvaloniaApp().StartWithClassicDesktopLifetime(args);
        }
        finally
        {
            // Shutdown Media Foundation
            try
            {
                MediaFoundationApi.Shutdown();
                Console.WriteLine("[Program] MediaFoundationApi.Shutdown() called successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Program] ERROR: MediaFoundationApi.Shutdown() failed: {ex.Message}");
            }
        }
    }

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .LogToTrace();
}
</file>

<file path="Source\Controls\WaveformDisplayControl.cs">
using System;
using System.Collections.Generic;
using System.Linq; // Required for Enumerable.Empty
using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Media;
using Sonorize.Models; // For LoopRegion
using Sonorize.Services; // For WaveformPoint

namespace Sonorize.Controls;

public class WaveformDisplayControl : Control
{
    private readonly WaveformRenderer _renderer = new();

    // Background Property
    public static readonly StyledProperty<IBrush?> BackgroundProperty =
        Border.BackgroundProperty.AddOwner<WaveformDisplayControl>();

    public IBrush? Background
    {
        get => GetValue(BackgroundProperty);
        set => SetValue(BackgroundProperty, value);
    }

    // Corrected to use IEnumerable<WaveformPoint>
    public static readonly StyledProperty<IEnumerable<WaveformPoint>> WaveformPointsProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IEnumerable<WaveformPoint>>(
            nameof(WaveformPoints),
            defaultValue: Enumerable.Empty<WaveformPoint>()); // Default to an empty enumerable

    public IEnumerable<WaveformPoint> WaveformPoints
    {
        get => GetValue(WaveformPointsProperty);
        set => SetValue(WaveformPointsProperty, value);
    }

    public static readonly StyledProperty<TimeSpan> CurrentPositionProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, TimeSpan>(nameof(CurrentPosition));

    public TimeSpan CurrentPosition
    {
        get => GetValue(CurrentPositionProperty);
        set => SetValue(CurrentPositionProperty, value);
    }

    public static readonly StyledProperty<TimeSpan> DurationProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, TimeSpan>(nameof(Duration), TimeSpan.FromSeconds(1));

    public TimeSpan Duration
    {
        get => GetValue(DurationProperty);
        set => SetValue(DurationProperty, value);
    }

    public static readonly StyledProperty<LoopRegion?> ActiveLoopProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, LoopRegion?>(nameof(ActiveLoop));

    public LoopRegion? ActiveLoop
    {
        get => GetValue(ActiveLoopProperty);
        set => SetValue(ActiveLoopProperty, value);
    }

    public static readonly StyledProperty<IBrush> WaveformBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(WaveformBrush), Brushes.DodgerBlue);
    public IBrush WaveformBrush { get => GetValue(WaveformBrushProperty); set => SetValue(WaveformBrushProperty, value); }

    public static readonly StyledProperty<IBrush> PositionMarkerBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(PositionMarkerBrush), Brushes.Red);
    public IBrush PositionMarkerBrush { get => GetValue(PositionMarkerBrushProperty); set => SetValue(PositionMarkerBrushProperty, value); }

    public static readonly StyledProperty<IBrush> LoopRegionBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(LoopRegionBrush), new SolidColorBrush(Colors.Orange, 0.3));
    public IBrush LoopRegionBrush { get => GetValue(LoopRegionBrushProperty); set => SetValue(LoopRegionBrushProperty, value); }


    public event EventHandler<TimeSpan>? SeekRequested;

    static WaveformDisplayControl()
    {
        AffectsRender<WaveformDisplayControl>(BackgroundProperty, WaveformPointsProperty, CurrentPositionProperty, DurationProperty, ActiveLoopProperty, WaveformBrushProperty, PositionMarkerBrushProperty, LoopRegionBrushProperty);
    }

    public WaveformDisplayControl()
    {
        ClipToBounds = true;
    }

    protected override void OnPointerPressed(PointerPressedEventArgs e)
    {
        base.OnPointerPressed(e);
        if (Duration.TotalSeconds > 0 && e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
        {
            var position = e.GetPosition(this);
            var relativeX = position.X / Bounds.Width;
            var seekTime = TimeSpan.FromSeconds(relativeX * Duration.TotalSeconds);
            SeekRequested?.Invoke(this, seekTime);
        }
    }

    public override void Render(DrawingContext context)
    {
        base.Render(context);
        var width = Bounds.Width;
        var height = Bounds.Height;

        if (width <= 0 || height <= 0) return;

        _renderer.DrawBackground(context, Bounds, Background);
        _renderer.DrawWaveform(context, Bounds, WaveformPoints, WaveformBrush);
        _renderer.DrawLoopRegion(context, Bounds, ActiveLoop, Duration, LoopRegionBrush);
        _renderer.DrawPositionMarker(context, Bounds, CurrentPosition, Duration, PositionMarkerBrush);
    }
}
</file>

<file path="Source\Controls\WaveformRenderer.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using Avalonia;
using Avalonia.Media;
using Sonorize.Models; // For LoopRegion
using Sonorize.Services; // For WaveformPoint

namespace Sonorize.Controls
{
    public class WaveformRenderer
    {
        public void DrawBackground(DrawingContext context, Rect bounds, IBrush? backgroundBrush)
        {
            if (backgroundBrush != null)
            {
                context.FillRectangle(backgroundBrush, bounds);
            }
        }

        public void DrawWaveform(DrawingContext context, Rect bounds, IEnumerable<WaveformPoint> waveformPoints, IBrush waveformBrush)
        {
            var width = bounds.Width;
            var height = bounds.Height;
            var waveformPen = new Pen(waveformBrush, 1);

            if (waveformPoints != null && waveformPoints.Any())
            {
                var pointsList = waveformPoints as List<WaveformPoint> ?? waveformPoints.ToList();
                if (pointsList.Count > 1)
                {
                    for (int i = 0; i < pointsList.Count; i++)
                    {
                        var point = pointsList[i];
                        var x = point.X * width;
                        var yPeakValue = point.YPeak * (height / 2);
                        context.DrawLine(waveformPen, new Point(x, height / 2 - yPeakValue), new Point(x, height / 2 + yPeakValue));
                    }
                }
                else if (pointsList.Count == 1)
                {
                    var point = pointsList[0];
                    var x = point.X * width;
                    var yPeakValue = point.YPeak * (height / 2);
                    context.DrawLine(waveformPen, new Point(x, height / 2 - yPeakValue), new Point(x, height / 2 + yPeakValue));
                }
                else
                {
                    context.DrawLine(waveformPen, new Point(0, height / 2), new Point(width, height / 2));
                }
            }
            else
            {
                context.DrawLine(waveformPen, new Point(0, height / 2), new Point(width, height / 2));
            }
        }

        public void DrawLoopRegion(DrawingContext context, Rect bounds, LoopRegion? activeLoop, TimeSpan duration, IBrush loopRegionBrush)
        {
            if (activeLoop != null && duration.TotalSeconds > 0)
            {
                var width = bounds.Width;
                var height = bounds.Height;
                var loopStartRatio = activeLoop.Start.TotalSeconds / duration.TotalSeconds;
                var loopEndRatio = activeLoop.End.TotalSeconds / duration.TotalSeconds;
                var loopStartX = loopStartRatio * width;
                var loopEndX = loopEndRatio * width;
                if (loopEndX > loopStartX)
                {
                    context.FillRectangle(loopRegionBrush, new Rect(loopStartX, 0, loopEndX - loopStartX, height));
                }
            }
        }

        public void DrawPositionMarker(DrawingContext context, Rect bounds, TimeSpan currentPosition, TimeSpan duration, IBrush positionMarkerBrush)
        {
            if (duration.TotalSeconds > 0)
            {
                var width = bounds.Width;
                var height = bounds.Height;
                var positionPen = new Pen(positionMarkerBrush, 1.5);
                var currentX = (currentPosition.TotalSeconds / duration.TotalSeconds) * width;
                currentX = Math.Clamp(currentX, 0, width);
                context.DrawLine(positionPen, new Point(currentX, 0), new Point(currentX, height));
            }
        }
    }
}
</file>

<file path="Source\Converters\BooleanToPlayPauseIconConverter.cs">
using System;
using System.Globalization;
using Avalonia.Data.Converters;

namespace Sonorize.Converters
{
    public class BooleanToPlayPauseIconConverter : IValueConverter
    {
        public static readonly BooleanToPlayPauseIconConverter Instance = new();

        private const string PlayIcon = "▶"; // U+25B6
        private const string PauseIcon = "||"; // U+2016 (Double Vertical Line)

        public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            if (value is bool isPlaying)
            {
                return isPlaying ? PauseIcon : PlayIcon;
            }
            return PlayIcon; // Default to Play icon if value is not a bool
        }

        public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
</file>

<file path="Source\Converters\BooleanToPlayPauseTextConverter.cs">
// Path: Source/Views/MainView.cs
using System;
using Avalonia.Data.Converters;

namespace Sonorize.Converters;

public class BooleanToPlayPauseTextConverter : IValueConverter
{
    public static readonly BooleanToPlayPauseTextConverter Instance = new();

    public object Convert(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
    {
        if (value is bool isPlaying) return isPlaying ? "Pause" : "Play";
        return "Play";
    }
    public object ConvertBack(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
        => throw new NotSupportedException();
}
</file>

<file path="Source\Converters\BooleanToShuffleIconConverter.cs">
using System;
using System.Diagnostics; // Added for Debug
using System.Globalization;
using Avalonia.Data.Converters;

namespace Sonorize.Converters
{
    public class BooleanToShuffleIconConverter : IValueConverter
    {
        public static readonly BooleanToShuffleIconConverter Instance = new();

        private const string ShuffleActiveIcon = "🔀"; // U+1F500 Twisted Arrows Right and Left
        private const string ShuffleInactiveIcon = "↔"; // U+2194 Left Right Arrow

        public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            // Add debug logging here
            Debug.WriteLine($"[Converter] BooleanToShuffleIconConverter Convert called. Value: {value}, TargetType: {targetType}");
            if (value is bool isShuffleEnabled)
            {
                Debug.WriteLine($"[Converter] isShuffleEnabled: {isShuffleEnabled}. Returning: {(isShuffleEnabled ? ShuffleActiveIcon : ShuffleInactiveIcon)}");
                return isShuffleEnabled ? ShuffleActiveIcon : ShuffleInactiveIcon;
            }
            Debug.WriteLine($"[Converter] Value is not bool ({value?.GetType().Name ?? "null"}). Returning: {ShuffleInactiveIcon}");
            return ShuffleInactiveIcon; // Default
        }

        public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
</file>

<file path="Source\Converters\EnumToBooleanConverter.cs">
using System;
using System.Globalization;
using Avalonia.Data.Converters;

namespace Sonorize.Converters;

public class EnumToBooleanConverter : IValueConverter
{
    public static readonly EnumToBooleanConverter Instance = new();

    public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        return value != null && parameter != null && value.Equals(parameter);
    }

    public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        // This converter is typically used one-way for visibility.
        // If two-way binding is needed (e.g., for radio buttons), parameter would be the enum value to return.
        throw new NotSupportedException();
    }
}
</file>

<file path="Source\Converters\NotNullToBooleanConverter.cs">
using System;
using System.Globalization;
using Avalonia.Data.Converters;

namespace Sonorize.Converters;

public class NotNullToBooleanConverter : IValueConverter
{
    public static readonly NotNullToBooleanConverter Instance = new();

    public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        return value != null;
    }

    public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        throw new NotSupportedException();
    }
}
</file>

<file path="Source\Converters\SliderFillWidthConverter.cs">
using System;
using Avalonia;

namespace Sonorize.Converters;

public class SliderFillWidthConverter : Avalonia.Data.Converters.IMultiValueConverter
{
    public object Convert(System.Collections.Generic.IList<object> values, Type targetType, object parameter, System.Globalization.CultureInfo culture)
    {
        if (values.Count == 3 &&
            values[0] is double value &&
            values[1] is double max &&
            values[2] is Rect bounds &&
            max > 0)
        {
            return bounds.Width * (value / max);
        }

        return 0.0;
    }

    public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)
    {
        throw new NotSupportedException();
    }
}
</file>

<file path="Source\Extensions\ColorExtensions.cs">
using Avalonia.Media;

namespace Sonorize.Extensions;

public static class ColorExtensions
{
    public static Color ChangeLightness(this Color color, double factor)
    {
        HslColor hsl = color.ToHsl();
        double newL = System.Math.Clamp(hsl.L + factor, 0.0, 1.0);
        return HslColor.FromAhsl(hsl.A, hsl.H, hsl.S, newL).ToRgb();
    }
}
</file>

<file path="Source\Extensions\ColorManipulationExtensions.cs">
using Avalonia.Media;

namespace Sonorize.Extensions;

public static class ColorManipulationExtensions
{
    public static Color WithAlpha(this Color color, byte alpha)
    {
        return new(alpha, color.R, color.G, color.B);
    }
}
</file>

<file path="Source\Models\AppSettings.cs">
using System.Collections.Generic;
using Sonorize.ViewModels;

namespace Sonorize.Models;

public class AppSettings
{
    public List<string> MusicDirectories { get; set; } = [];
    public string? PreferredThemeFileName { get; set; }

    public string LibraryViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();
    public string ArtistViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();
    public string AlbumViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();

    // Last.fm Settings
    public bool LastfmScrobblingEnabled { get; set; } = false;
    public string? LastfmUsername { get; set; }
    public string? LastfmPassword { get; set; } // Used for initial authentication to get a session key.
    public string? LastfmSessionKey { get; set; } // Stores the authenticated session key.

    public int ScrobbleThresholdPercentage { get; set; } = 50; // Default to 50%
    public int ScrobbleThresholdAbsoluteSeconds { get; set; } = 240; // Default to 240 seconds (4 minutes)
}
</file>

<file path="Source\Models\LoopRegion.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Sonorize.Models;

public class LoopRegion : INotifyPropertyChanged
{
    public string Name
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }

    public TimeSpan Start
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }

    public TimeSpan End { get; set; }

    public string DisplayText => $"({Start:mm\\:ss} - {End:mm\\:ss})";

    public event PropertyChangedEventHandler? PropertyChanged;

    public LoopRegion(TimeSpan start, TimeSpan end, string name = "Loop")
    {
        Name = name;
        Start = start;
        End = end;
    }

    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value))
        {
            return false;
        }

        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }

    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new(propertyName));
    }
}
</file>

<file path="Source\Models\LoopStorageData.cs">
using System;

namespace Sonorize.Models;

public record LoopStorageData(TimeSpan Start, TimeSpan End, bool IsActive);
</file>

<file path="Source\Models\Song.cs">
using System;
using System.Diagnostics;
using Avalonia.Media.Imaging;
using Sonorize.ViewModels;

namespace Sonorize.Models;

public class Song : ViewModelBase
{
    public string DurationString => $"{Duration:mm\\:ss}";

    public string FilePath
    {
        get;
        set => SetProperty(ref field, value);
    } = string.Empty;
    
    public string Title
    {
        get;
        set => SetProperty(ref field, value);
    } = "Unknown Title";
    
    public string Artist
    {
        get;
        set => SetProperty(ref field, value);
    } = "Unknown Artist";
    
    public string Album 
    { 
        get; 
        set => SetProperty(ref field, value); 
    } = "Unknown Album";

    public TimeSpan Duration
    {
        get;
        set => SetProperty(ref field, value);
    }

    public Bitmap? Thumbnail
    {
        get;
        set => SetProperty(ref field, value);
    }

    public LoopRegion? SavedLoop
    {
        get;
        set => SetProperty(ref field, value);
    }

    public bool IsLoopActive
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            Debug.WriteLine($"[SongModel] {Title} - IsLoopActive set to: {value}");
        }
    }
}
</file>

<file path="Source\Models\ThemeColors.cs">
using System.Text.Json.Serialization;
using Avalonia.Media;

namespace Sonorize.Models;

public class ThemeColors
{
    // --- Main UI Colors ---
    public string BackgroundColor { get; set; } = "#FF1E1E1E";
    public string SlightlyLighterBackground { get; set; } = "#FF2D2D30";
    public string ControlBackgroundColor { get; set; } = "#FF3C3C3C";
    public string TextColor { get; set; } = "#FFF1F1F1";
    public string SecondaryTextColor { get; set; } = "#FFAAAAAA";
    public string AccentColor { get; set; } = "#FF007ACC";
    public string AccentForeground { get; set; } = "#FFFFFFFF";

    // --- ListBox Specific Colors ---
    public string ListBoxBackground { get; set; } = "#FF2D2D30"; // Default: Same as SlightlyLighterBackground

    // --- Brush Properties ---
    [JsonIgnore] public IBrush B_BackgroundColor => SolidColorBrush.Parse(BackgroundColor);
    [JsonIgnore] public IBrush B_SlightlyLighterBackground => SolidColorBrush.Parse(SlightlyLighterBackground);
    [JsonIgnore] public IBrush B_ControlBackgroundColor => SolidColorBrush.Parse(ControlBackgroundColor);
    [JsonIgnore] public IBrush B_TextColor => SolidColorBrush.Parse(TextColor);
    [JsonIgnore] public IBrush B_SecondaryTextColor => SolidColorBrush.Parse(SecondaryTextColor);
    [JsonIgnore] public IBrush B_AccentColor => SolidColorBrush.Parse(AccentColor);
    [JsonIgnore] public IBrush B_AccentForeground => SolidColorBrush.Parse(AccentForeground);
    [JsonIgnore] public IBrush B_ListBoxBackground => SolidColorBrush.Parse(ListBoxBackground);

    public static ThemeColors CreateAmoledSpotifyTheme()
    {
        return new()
        {
            BackgroundColor = "#FF000000",
            SlightlyLighterBackground = "#FF121212",
            ControlBackgroundColor = "#FF181818",
            TextColor = "#FFFFFFFF",
            SecondaryTextColor = "#FFB3B3B3",
            AccentColor = "#FF1DB954",      // Spotify Green
            AccentForeground = "#FF000000",  // Black text on green buttons
            ListBoxBackground = "#FF000000"   // <<< CRUCIAL FOR AMOLED LIST ITEMS (unselected)
        };
    }
}
</file>

<file path="Source\Services\LastfmAuthenticatorService.cs">
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using IF.Lastfm.Core.Api;
using IF.Lastfm.Core.Objects; // For LastUserSession
using Sonorize.Models;

namespace Sonorize.Services;

public class LastfmAuthenticatorService
{
    private readonly SettingsService _settingsService;

    // Last.fm API Credentials
    private const string LastfmApiKey = "d623e7a246a80c3bd60819e86c7b5ee1"; // Keep your actual key
    private const string LastfmApiSecret = "9414a77c9b7f8c361d96d4575ccd97f0"; // Keep your actual secret

    public LastfmAuthenticatorService(SettingsService settingsService)
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        Debug.WriteLine("[LastfmAuthenticatorService] Initialized.");
    }

    public async Task<LastfmClient?> GetAuthenticatedClientAsync()
    {
        if (string.IsNullOrEmpty(LastfmApiKey) || LastfmApiKey == "YOUR_LASTFM_API_KEY" ||
            string.IsNullOrEmpty(LastfmApiSecret) || LastfmApiSecret == "YOUR_LASTFM_API_SECRET")
        {
            Debug.WriteLine("[LastfmAuthenticatorService] CRITICAL: Last.fm API Key or Secret is not configured. Aborting.");
            return null;
        }

        AppSettings currentSettings = _settingsService.LoadSettings(); // Always load fresh settings

        // Attempt to use existing session key from settings
        if (!string.IsNullOrEmpty(currentSettings.LastfmSessionKey))
        {
            Debug.WriteLine("[LastfmAuthenticatorService] Using existing session key from settings.");
            var auth = new LastAuth(LastfmApiKey, LastfmApiSecret);
            auth.LoadSession(new LastUserSession { Token = currentSettings.LastfmSessionKey });
            return new LastfmClient(auth);
        }

        // No session key, attempt username/password authentication
        if (!string.IsNullOrEmpty(currentSettings.LastfmUsername) &&
            !string.IsNullOrEmpty(currentSettings.LastfmPassword))
        {
            Debug.WriteLine($"[LastfmAuthenticatorService] No session key; attempting login for '{currentSettings.LastfmUsername}'…");
            var auth = new LastAuth(LastfmApiKey, LastfmApiSecret);

            try
            {
                var response = await auth.GetSessionTokenAsync(
                    currentSettings.LastfmUsername,
                    currentSettings.LastfmPassword
                );

                if (response.Success && auth.Authenticated && auth.UserSession != null)
                {
                    var session = auth.UserSession;
                    currentSettings.LastfmSessionKey = session.Token;
                    // Clear the password after successful session key retrieval for security
                    currentSettings.LastfmPassword = null;
                    _settingsService.SaveSettings(currentSettings);

                    Debug.WriteLine($"[LastfmAuthenticatorService] Successfully obtained and saved session key for '{currentSettings.LastfmUsername}'. Password cleared from settings.");

                    // Return a new client instance authenticated with the new session
                    return new LastfmClient(auth); // auth object now contains the session
                }
                else
                {
                    //string errorMessage = response.Exception?.Message ?? response.Status.ToString();
                    //Debug.WriteLine($"[LastfmAuthenticatorService] Authentication failed. Success={response.Success}, Authenticated={auth.Authenticated}, Error='{errorMessage}'");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LastfmAuthenticatorService] Exception during Last.fm login: {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine("[LastfmAuthenticatorService] Cannot login: username/password not set in settings, and no existing session key.");
        }

        Debug.WriteLine("[LastfmAuthenticatorService] GetAuthenticatedClientAsync: Could not obtain an authenticated Last.fm client.");
        return null;
    }

    public bool AreCredentialsEffectivelyConfigured(AppSettings settings)
    {
        // Credentials are configured if we have a session key, 
        // OR if we have username/password to attempt to get one.
        return !string.IsNullOrEmpty(settings.LastfmSessionKey) ||
               (!string.IsNullOrEmpty(settings.LastfmUsername) && !string.IsNullOrEmpty(settings.LastfmPassword));
    }
}
</file>

<file path="Source\Services\LibraryPlaybackLinkService.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using Avalonia.Threading;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class LibraryPlaybackLinkService : IDisposable
{
    private readonly LibraryViewModel _libraryViewModel;
    private readonly PlaybackService _playbackService;
    private readonly PlaybackViewModel _playbackViewModel; // To observe HasCurrentSong easily

    public LibraryPlaybackLinkService(
        LibraryViewModel libraryViewModel,
        PlaybackService playbackService,
        PlaybackViewModel playbackViewModel)
    {
        _libraryViewModel = libraryViewModel ?? throw new ArgumentNullException(nameof(libraryViewModel));
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        _playbackViewModel = playbackViewModel ?? throw new ArgumentNullException(nameof(playbackViewModel));

        SubscribeToEvents();
        Debug.WriteLine("[LibraryPlaybackLinkService] Initialized and subscribed to events.");
    }

    private void SubscribeToEvents()
    {
        _libraryViewModel.PropertyChanged += OnLibraryViewModelPropertyChanged;
        _playbackViewModel.PropertyChanged += OnPlaybackViewModelPropertyChanged;
    }

    private void UnsubscribeFromEvents()
    {
        _libraryViewModel.PropertyChanged -= OnLibraryViewModelPropertyChanged;
        _playbackViewModel.PropertyChanged -= OnPlaybackViewModelPropertyChanged;
    }

    private void OnLibraryViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(LibraryViewModel.SelectedSong))
        {
            return;
        }

        Dispatcher.UIThread.InvokeAsync(() =>
        {
            Debug.WriteLine($"[LibraryPlaybackLinkService] Library.SelectedSong changed to: {_libraryViewModel.SelectedSong?.Title ?? "null"}. Instance: {_libraryViewModel.SelectedSong?.GetHashCode() ?? 0}");

            if (_libraryViewModel.SelectedSong != null && _playbackService.CurrentSong != _libraryViewModel.SelectedSong)
            {
                Debug.WriteLine($"[LibraryPlaybackLinkService] Library.SelectedSong changed to a *different* song ({_libraryViewModel.SelectedSong.Title}) than PlaybackService.CurrentSong ({_playbackService.CurrentSong?.Title ?? "null"}). Calling PlaybackService.Play().");
                _playbackService.Play(_libraryViewModel.SelectedSong);
            }
            else if (_libraryViewModel.SelectedSong != null && _playbackService.CurrentSong == _libraryViewModel.SelectedSong)
            {
                Debug.WriteLine($"[LibraryPlaybackLinkService] Library.SelectedSong changed but is the SAME song instance as PlaybackService.CurrentSong ({_libraryViewModel.SelectedSong.Title}). No Play call needed here.");
            }
            else if (_libraryViewModel.SelectedSong == null)
            {
                Debug.WriteLine("[LibraryPlaybackLinkService] Library.SelectedSong is null. No Play call needed here.");
            }
        });
    }

    private void OnPlaybackViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(PlaybackViewModel.HasCurrentSong)) // Or CurrentSong
        {
            return;
        }

        Dispatcher.UIThread.InvokeAsync(() =>
        {
            if (_playbackViewModel.HasCurrentSong || _libraryViewModel.SelectedSong == null)
            {
                return;
            }

            Debug.WriteLine("[LibraryPlaybackLinkService] Playback has no current song. Clearing Library selection.");
            _libraryViewModel.SelectedSong = null;
        });
    }

    public void Dispose()
    {
        UnsubscribeFromEvents();
        Debug.WriteLine("[LibraryPlaybackLinkService] Disposed and unsubscribed from events.");
        GC.SuppressFinalize(this);
    }

    ~LibraryPlaybackLinkService()
    {
        Dispose();
    }
}
</file>

<file path="Source\Services\LoopDataService.cs">
// Path: Source/Services/LoopDataService.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using Sonorize.Models;

namespace Sonorize.Services;

public class LoopDataService
{
    private readonly string _loopDataFilePath;
    private Dictionary<string, LoopStorageData> _loopDataStore = new();
    private readonly object _lock = new object();

    public LoopDataService()
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        Directory.CreateDirectory(sonorizeAppDataPath);
        _loopDataFilePath = Path.Combine(sonorizeAppDataPath, "loopdata.json");
        LoadLoopData();
        Debug.WriteLine($"[LoopDataService] Initialized. Data loaded from: {_loopDataFilePath}");
    }

    private void LoadLoopData()
    {
        lock (_lock)
        {
            try
            {
                if (File.Exists(_loopDataFilePath))
                {
                    var json = File.ReadAllText(_loopDataFilePath);
                    // Handle potential old format without IsActive gracefully
                    var tempStore = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);
                    _loopDataStore = new Dictionary<string, LoopStorageData>();
                    if (tempStore != null)
                    {
                        foreach (var kvp in tempStore)
                        {
                            try
                            {
                                // Try to deserialize to the new record type
                                _loopDataStore[kvp.Key] = kvp.Value.Deserialize<LoopStorageData>()!;
                            }
                            catch (JsonException) // If it fails, it might be the old format
                            {
                                try
                                {
                                    // Old format: record LoopStorageData(TimeSpan Start, TimeSpan End);
                                    var oldLoop = kvp.Value.Deserialize<OldLoopStorageDataTemp>();
                                    if (oldLoop != null)
                                    {
                                        _loopDataStore[kvp.Key] = new LoopStorageData(oldLoop.Start, oldLoop.End, false); // Default IsActive to false for old data
                                        Debug.WriteLine($"[LoopDataService] Migrated old loop format for {Path.GetFileName(kvp.Key)}");
                                    }
                                }
                                catch (Exception exMigrate)
                                {
                                    Debug.WriteLine($"[LoopDataService] Failed to migrate or deserialize loop for {Path.GetFileName(kvp.Key)}: {exMigrate.Message}");
                                }
                            }
                        }
                    }
                    Debug.WriteLine($"[LoopDataService] Successfully loaded/migrated {_loopDataStore.Count} loop entries.");
                }
                else
                {
                    _loopDataStore = new Dictionary<string, LoopStorageData>();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LoopDataService] Error loading loop data: {ex.Message}. Initializing with empty store.");
                _loopDataStore = new Dictionary<string, LoopStorageData>();
            }
        }
    }
    // Temporary record for migration from old format
    private record OldLoopStorageDataTemp(TimeSpan Start, TimeSpan End);


    private void SaveLoopData()
    {
        lock (_lock)
        {
            try
            {
                var options = new JsonSerializerOptions { WriteIndented = true };
                var json = JsonSerializer.Serialize(_loopDataStore, options);
                File.WriteAllText(_loopDataFilePath, json);
                Debug.WriteLine($"[LoopDataService] Successfully saved {_loopDataStore.Count} loop entries to {_loopDataFilePath}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LoopDataService] Error saving loop data: {ex.Message}");
            }
        }
    }

    public LoopStorageData? GetLoop(string filePath)
    {
        if (string.IsNullOrEmpty(filePath)) return null;
        lock (_lock)
        {
            _loopDataStore.TryGetValue(filePath, out var loopData);
            return loopData;
        }
    }

    // Modified to accept isActive
    public void SetLoop(string filePath, TimeSpan start, TimeSpan end, bool isActive)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        var loopData = new LoopStorageData(start, end, isActive);
        lock (_lock)
        {
            _loopDataStore[filePath] = loopData;
        }
        Debug.WriteLine($"[LoopDataService] SetLoop for \"{Path.GetFileName(filePath)}\": Start={start}, End={end}, IsActive={isActive}. Triggering save.");
        SaveLoopData();
    }

    public void UpdateLoopActiveState(string filePath, bool isActive)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        lock (_lock)
        {
            if (_loopDataStore.TryGetValue(filePath, out var existingLoop))
            {
                _loopDataStore[filePath] = existingLoop with { IsActive = isActive }; // Using record 'with' expression
                Debug.WriteLine($"[LoopDataService] UpdateLoopActiveState for \"{Path.GetFileName(filePath)}\" to IsActive={isActive}. Triggering save.");
                SaveLoopData();
            }
            else
            {
                Debug.WriteLine($"[LoopDataService] UpdateLoopActiveState: No loop definition found for \"{Path.GetFileName(filePath)}\" to update active state.");
            }
        }
    }

    public void ClearLoop(string filePath)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        bool removed = false;
        lock (_lock)
        {
            if (_loopDataStore.ContainsKey(filePath))
            {
                removed = _loopDataStore.Remove(filePath);
            }
        }
        if (removed)
        {
            Debug.WriteLine($"[LoopDataService] ClearLoop for \"{Path.GetFileName(filePath)}\". Triggering save.");
            SaveLoopData();
        }
    }
}
</file>

<file path="Source\Services\MusicLibraryService.cs">
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Avalonia;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Threading;
using Sonorize.Models;
using TagLib;

namespace Sonorize.Services;

public class MusicLibraryService
{
    private readonly LoopDataService _loopDataService;
    private readonly ThumbnailService _thumbnailService;
    private readonly SongFactory _songFactory; // Added SongFactory dependency
    private const int UI_UPDATE_BATCH_SIZE = 50;

    public event Action<Song>? SongThumbnailUpdated;


    public MusicLibraryService(LoopDataService loopDataService, ThumbnailService thumbnailService, SongFactory songFactory) // Modified constructor
    {
        _loopDataService = loopDataService ?? throw new ArgumentNullException(nameof(loopDataService));
        _thumbnailService = thumbnailService ?? throw new ArgumentNullException(nameof(thumbnailService));
        _songFactory = songFactory ?? throw new ArgumentNullException(nameof(songFactory)); // Store dependency
        Debug.WriteLine("[MusicLibService] Constructor called.");
    }

    // Delegated to ThumbnailService
    public Bitmap? GetDefaultThumbnail() => _thumbnailService.GetDefaultThumbnail();


    public async Task LoadMusicFromDirectoriesAsync(
        IEnumerable<string> directories,
        Action<Song> songAddedCallback,
        Action<string> statusUpdateCallback)
    {
        Debug.WriteLine("[MusicLibService] LoadMusicFromDirectoriesAsync");
        var supportedExtensions = new[] { ".mp3", ".wav", ".flac", ".m4a", ".ogg" };
        Bitmap? defaultIcon = GetDefaultThumbnail();
        int filesProcessed = 0;

        foreach (var dir in directories)
        {
            if (!Directory.Exists(dir))
            {
                Debug.WriteLine($"[LibScan] Directory not found: {dir}");
                await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Directory not found: {dir}"));
                continue;
            }

            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Scanning: {Path.GetFileName(dir)}..."));

            List<string> filesInDir;
            try
            {
                filesInDir = Directory.EnumerateFiles(dir, "*.*", SearchOption.AllDirectories)
                    .Where(f => supportedExtensions.Any(ext => f.EndsWith(ext, StringComparison.OrdinalIgnoreCase)))
                    .ToList();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LibScan] Error enumerating files: {dir} - {ex.Message}");
                await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Error scanning {Path.GetFileName(dir)}"));
                continue;
            }

            foreach (var file in filesInDir)
            {
                // Use SongFactory to create and populate the song object
                Song song = _songFactory.CreateSongFromFile(file, defaultIcon);

                await Dispatcher.UIThread.InvokeAsync(() => songAddedCallback(song));

                // Request thumbnail processing via ThumbnailService
                _thumbnailService.QueueThumbnailRequest(song, HandleThumbnailReady);

                filesProcessed++;
                if (filesProcessed % (UI_UPDATE_BATCH_SIZE * 2) == 0) // Increased batch size for status updates
                {
                    await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Loaded {filesProcessed} songs..."));
                }
            }
        }
        // Final status update after metadata scan, thumbnail loading is now managed by ThumbnailService
        await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Metadata scan complete. {filesProcessed} songs found. Thumbnails loading in background..."));
    }

    // Callback for when ThumbnailService has processed a thumbnail
    private void HandleThumbnailReady(Song song, Bitmap? loadedThumbnail)
    {
        // This callback is invoked on the UI thread by ThumbnailService
        if (loadedThumbnail != null)
        {
            song.Thumbnail = loadedThumbnail; // Update the song's thumbnail if a new one was loaded
        }
        // Even if loadedThumbnail is null (meaning no specific art found, or error),
        // the song.Thumbnail already holds the default icon.
        // We still invoke SongThumbnailUpdated to notify that processing for this song's thumbnail is complete.
        SongThumbnailUpdated?.Invoke(song);
    }
}
</file>

<file path="Source\Services\NextTrackSelectorService.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class NextTrackSelectorService(Random shuffleRandom)
{
    private readonly Random _shuffleRandom = shuffleRandom ?? throw new ArgumentNullException(nameof(shuffleRandom));

    public Song? GetNextSong(Song? currentSong, List<Song> currentList, RepeatMode repeatMode, bool shuffleEnabled)
    {
        if (currentSong is null || currentList.Count == 0)
        {
            Debug.WriteLine("[NextTrackSelector] No current song or list is empty. No next song.");
            return null;
        }

        if (repeatMode == RepeatMode.RepeatOne)
        {
            Debug.WriteLine($"[NextTrackSelector] Repeat Mode is RepeatOne. Next song is current: {currentSong.Title}");
            return currentSong;
        }

        if (repeatMode == RepeatMode.None)
        {
            Debug.WriteLine("[NextTrackSelector] Repeat Mode is None. No next song.");
            return null;
        }

        return shuffleEnabled
            ? GetNextSongShuffle(currentSong, currentList, repeatMode)
            : GetNextSongSequential(currentSong, currentList, repeatMode);
    }

    private Song? GetNextSongShuffle(Song currentSong, List<Song> currentList, RepeatMode repeatMode)
    {
        Debug.WriteLine("[NextTrackSelector] Shuffle is Enabled.");

        Song? nextSong = null;

        if (currentList.Count == 0)
        {
            Debug.WriteLine("[NextTrackSelector] Shuffle enabled, but list is empty.");
            return null;
        }

        List<Song> potentialNextSongs = currentList.Where(s => s != currentSong).ToList();

        if (potentialNextSongs.Count != 0)
        {
            int nextIndex = _shuffleRandom.Next(potentialNextSongs.Count);
            nextSong = potentialNextSongs[nextIndex];

            Debug.WriteLine($"[NextTrackSelector] Shuffle pick: {nextSong?.Title ?? "null"}");
        }
        else if (currentList.Count == 1)
        {
            if (repeatMode == RepeatMode.RepeatAll)
            {
                Debug.WriteLine($"[NextTrackSelector] Shuffle enabled, one song in list, RepeatAll active. Replaying: {currentSong.Title}");
                nextSong = currentSong;
            }
            else
            {
                Debug.WriteLine($"[NextTrackSelector] Shuffle enabled, only one song ({currentSong.Title}) in list, not RepeatAll. No next song.");
                nextSong = null;
            }
        }
        else
        {
            Debug.WriteLine("[NextTrackSelector] Shuffle enabled, logical error: no potential next songs from a multi-item list. No next song.");
            nextSong = null;
        }

        return nextSong;
    }

    private static Song? GetNextSongSequential(Song currentSong, List<Song> currentList, RepeatMode repeatMode)
    {
        Debug.WriteLine("[NextTrackSelector] Shuffle is Disabled (Sequential).");
        int currentIndex = currentList.IndexOf(currentSong);

        if (currentIndex == -1)
        {
            Debug.WriteLine("[NextTrackSelector] Sequential: Current song not found in list. No next song.");
            return null;
        }

        Song? nextSong;

        if (currentIndex < currentList.Count - 1)
        {
            nextSong = currentList[currentIndex + 1];
            Debug.WriteLine($"[NextTrackSelector] Sequential next: {nextSong?.Title ?? "null"}");
        }
        else
        {
            Debug.WriteLine("[NextTrackSelector] End of sequential list reached.");

            if (repeatMode == RepeatMode.RepeatAll && currentList.Count != 0)
            {
                nextSong = currentList.First(); // Wrap around
                Debug.WriteLine($"[NextTrackSelector] RepeatAll active, wrapping around to first: {nextSong.Title}");
            }
            else
            {
                Debug.WriteLine($"[NextTrackSelector] RepeatMode is {repeatMode} (not RepeatAll), end of list reached. No next song.");
                nextSong = null;
            }
        }

        return nextSong;
    }
}
</file>

<file path="Source\Services\ScrobblingService.cs">
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using IF.Lastfm.Core.Api;
using IF.Lastfm.Core.Objects; // Added for service classes like Track, Auth
using Sonorize.Models;

namespace Sonorize.Services;

public class ScrobblingService
{
    private readonly SettingsService _settingsService;
    private readonly LastfmAuthenticatorService _authenticatorService;
    private AppSettings _currentSettings;

    private const int MinTrackLengthForScrobbleSeconds = 30;

    public bool IsScrobblingEnabled => _currentSettings.LastfmScrobblingEnabled;

    public bool AreCredentialsEffectivelyConfigured => _authenticatorService.AreCredentialsEffectivelyConfigured(_currentSettings);

    public ScrobblingService(SettingsService settingsService, LastfmAuthenticatorService authenticatorService)
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        _authenticatorService = authenticatorService ?? throw new ArgumentNullException(nameof(authenticatorService));
        RefreshSettings(); // Initial load of settings
        Debug.WriteLine($"[ScrobblingService] Initialized. Scrobbling Enabled: {IsScrobblingEnabled}, Credentials Configured: {AreCredentialsEffectivelyConfigured}");
    }

    public void RefreshSettings()
    {
        _currentSettings = _settingsService.LoadSettings();
        // Session key is now managed by LastfmAuthenticatorService, no need to cache it here.
        Debug.WriteLine($"[ScrobblingService] Settings refreshed. Scrobbling Enabled: {IsScrobblingEnabled}, Credentials Configured: {AreCredentialsEffectivelyConfigured}, Thresholds: {_currentSettings.ScrobbleThresholdPercentage}% / {_currentSettings.ScrobbleThresholdAbsoluteSeconds}s");
    }

    private async Task<LastfmClient?> GetAuthenticatedClientAsync()
    {
        // Refresh settings before attempting to get a client to ensure AppSettings used by authenticator are current
        // This might be redundant if RefreshSettings() is called frequently elsewhere, but safe.
        // No, _authenticatorService.GetAuthenticatedClientAsync() loads its own fresh copy of settings.
        // So, RefreshSettings() here is mainly for _currentSettings used by IsScrobblingEnabled and ShouldScrobble.
        RefreshSettings();
        return await _authenticatorService.GetAuthenticatedClientAsync();
    }

    public bool ShouldScrobble(Song song, TimeSpan playedDuration)
    {
        RefreshSettings(); // Ensure _currentSettings is up-to-date for threshold values

        if (song == null || song.Duration.TotalSeconds <= MinTrackLengthForScrobbleSeconds)
        {
            Debug.WriteLine($"[ScrobblingService] ShouldScrobble: Song '{song?.Title ?? "null"}' is null or too short ({song?.Duration.TotalSeconds ?? 0}s). Min required: {MinTrackLengthForScrobbleSeconds}s. Returning false.");
            return false;
        }

        double percentagePlayed = (playedDuration.TotalSeconds / song.Duration.TotalSeconds) * 100.0;
        double requiredPlaybackFromPercentage = song.Duration.TotalSeconds * (_currentSettings.ScrobbleThresholdPercentage / 100.0);
        double requiredPlaybackAbsolute = _currentSettings.ScrobbleThresholdAbsoluteSeconds;
        double effectiveRequiredSeconds = Math.Min(requiredPlaybackFromPercentage, requiredPlaybackAbsolute);
        bool conditionMet = playedDuration.TotalSeconds >= effectiveRequiredSeconds;

        Debug.WriteLine($"[ScrobblingService] ShouldScrobble for '{song.Title}': " +
                        $"Played: {playedDuration.TotalSeconds:F1}s ({percentagePlayed:F1}%), " +
                        $"Song Duration: {song.Duration.TotalSeconds:F1}s. " +
                        $"Configured Thresholds: {_currentSettings.ScrobbleThresholdPercentage}% (gives {requiredPlaybackFromPercentage:F1}s) OR {_currentSettings.ScrobbleThresholdAbsoluteSeconds}s. " +
                        $"Effective Threshold: {effectiveRequiredSeconds:F1}s. Met: {conditionMet}");
        return conditionMet;
    }


    public async Task UpdateNowPlayingAsync(Song song)
    {
        // RefreshSettings() is called by GetAuthenticatedClientAsync() if needed,
        // but also good to call here to check IsScrobblingEnabled with latest settings.
        RefreshSettings();
        if (!IsScrobblingEnabled || song == null)
        {
            Debug.WriteLine($"[ScrobblingService] UpdateNowPlayingAsync skipped. Enabled: {IsScrobblingEnabled}, Song: {song?.Title ?? "null"}");
            return;
        }

        var client = await GetAuthenticatedClientAsync();
        if (client == null)
        {
            Debug.WriteLine("[ScrobblingService] UpdateNowPlayingAsync: No authenticated client. Skipping.");
            return;
        }

        try
        {
            Debug.WriteLine($"[ScrobblingService] Sending UpdateNowPlaying for: {song.Title} by {song.Artist}");
            var trackInfo = new LastTrack { Name = song.Title, ArtistName = song.Artist, AlbumName = song.Album };
            if (song.Duration.TotalSeconds > 0)
            {
                trackInfo.Duration = song.Duration;
            }

            var scrobble = new Scrobble(song.Artist, song.Album, song.Title, DateTimeOffset.Now);
            var response = await client.Track.UpdateNowPlayingAsync(scrobble);

            if (response.Success)
            {
                Debug.WriteLine($"[ScrobblingService] UpdateNowPlaying successful for: {song.Title}");
            }
            else
            {
                Debug.WriteLine($"[ScrobblingService] UpdateNowPlaying FAILED for: {song.Title}. Error: {response.Status} - {response.Error}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ScrobblingService] CRITICAL EXCEPTION during UpdateNowPlaying for {song.Title}: {ex.Message}");
        }
    }

    public async Task ScrobbleAsync(Song song, DateTime timePlayed)
    {
        RefreshSettings();
        if (!IsScrobblingEnabled || song == null)
        {
            Debug.WriteLine($"[ScrobblingService] ScrobbleAsync skipped. Enabled: {IsScrobblingEnabled}, Song: {song?.Title ?? "null"}");
            return;
        }

        var client = await GetAuthenticatedClientAsync();
        if (client == null)
        {
            Debug.WriteLine("[ScrobblingService] ScrobbleAsync: No authenticated client. Skipping.");
            return;
        }

        try
        {
            Debug.WriteLine($"[ScrobblingService] Sending Scrobble for: {song.Title} by {song.Artist}, TimePlayed: {timePlayed}");

            var scrobble = new Scrobble(song.Artist, song.Album, song.Title, timePlayed);
            var response = await client.Track.ScrobbleAsync(scrobble);

            if (response.Success)
            {
                Debug.WriteLine($"[ScrobblingService] Scrobble successful for: {song.Title}");
            }
            else
            {
                Debug.WriteLine($"[ScrobblingService] Scrobble FAILED for: {song.Title}. Error: {response.Status} - {response.Error}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ScrobblingService] CRITICAL EXCEPTION during Scrobble for {song.Title}: {ex.Message}");
        }
    }
}
</file>

<file path="Source\Services\SongFactory.cs">
using System;
using System.Diagnostics;
using System.IO;
using Avalonia.Media.Imaging;
using Sonorize.Models;
using TagLib; // Required for TagLib.File, CorruptFileException, UnsupportedFormatException

namespace Sonorize.Services;

public class SongFactory
{
    private readonly LoopDataService _loopDataService;

    public SongFactory(LoopDataService loopDataService)
    {
        _loopDataService = loopDataService ?? throw new ArgumentNullException(nameof(loopDataService));
        Debug.WriteLine("[SongFactory] Initialized.");
    }

    public Song CreateSongFromFile(string filePath, Bitmap? defaultThumbnail)
    {
        if (string.IsNullOrEmpty(filePath))
        {
            Debug.WriteLine("[SongFactory] FilePath is null or empty. Returning a default Song object.");
            return new Song { FilePath = string.Empty, Thumbnail = defaultThumbnail };
        }

        var song = new Song
        {
            FilePath = filePath,
            Title = Path.GetFileNameWithoutExtension(filePath), // Default title
            Artist = "Unknown Artist",                         // Default artist
            Album = "Unknown Album",                           // Default album
            Duration = TimeSpan.Zero,                          // Default duration
            Thumbnail = defaultThumbnail                       // Initial default thumbnail
        };

        try
        {
            using var tagFile = TagLib.File.Create(filePath);
            if (!string.IsNullOrWhiteSpace(tagFile.Tag.Title)) song.Title = tagFile.Tag.Title;

            if (tagFile.Tag.Performers.Length > 0 && !string.IsNullOrWhiteSpace(tagFile.Tag.Performers[0]))
                song.Artist = tagFile.Tag.Performers[0];
            else if (tagFile.Tag.AlbumArtists.Length > 0 && !string.IsNullOrWhiteSpace(tagFile.Tag.AlbumArtists[0]))
                song.Artist = tagFile.Tag.AlbumArtists[0];

            if (!string.IsNullOrWhiteSpace(tagFile.Tag.Album)) song.Album = tagFile.Tag.Album;
            if (tagFile.Properties.Duration > TimeSpan.Zero) song.Duration = tagFile.Properties.Duration;
        }
        catch (CorruptFileException cfe)
        {
            Debug.WriteLine($"[SongFactory] Corrupt file when reading tags for \"{Path.GetFileName(filePath)}\": {cfe.Message}. Song will use defaults.");
        }
        catch (UnsupportedFormatException ufe)
        {
            Debug.WriteLine($"[SongFactory] Unsupported format when reading tags for \"{Path.GetFileName(filePath)}\": {ufe.Message}. Song will use defaults.");
        }
        catch (Exception ex)
        {
            // Catching generic Exception for any other TagLib# related issues
            Debug.WriteLine($"[SongFactory] Error reading tags for \"{Path.GetFileName(filePath)}\": {ex.Message}. Song will use defaults.");
        }

        var storedLoopData = _loopDataService.GetLoop(song.FilePath);
        if (storedLoopData != null)
        {
            song.SavedLoop = new LoopRegion(storedLoopData.Start, storedLoopData.End);
            song.IsLoopActive = storedLoopData.IsActive;
        }

        return song;
    }
}
</file>

<file path="Source\Services\ThemeService.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text.Json;
using Sonorize.Models;

namespace Sonorize.Services;

public class ThemeService
{
    private readonly string _themesDirectory;
    public ThemeColors CurrentTheme { get; private set; }

    public const string DefaultThemeFileName = "DefaultTheme.json"; // Made public const
    private const string AmoledSpotifyThemeFileName = "AmoledSpotify.json";


    public ThemeService(string? preferredThemeNameFromSettings)
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        _themesDirectory = Path.Combine(sonorizeAppDataPath, "Themes");
        Directory.CreateDirectory(_themesDirectory);

        EnsureDefaultThemesExist();

        string themeToLoad = DefaultThemeFileName; // Default to this one first

        if (!string.IsNullOrEmpty(preferredThemeNameFromSettings))
        {
            // Check if preferred theme exists
            if (File.Exists(Path.Combine(_themesDirectory, preferredThemeNameFromSettings)))
            {
                themeToLoad = preferredThemeNameFromSettings;
            }
            else
            {
                Debug.WriteLine($"[ThemeService] Preferred theme '{preferredThemeNameFromSettings}' not found. Falling back to default.");
            }
        }

        CurrentTheme = LoadThemeFromFile(themeToLoad);
        if (CurrentTheme == null) // If chosen (or default) theme failed, use hardcoded
        {
            Debug.WriteLine($"[ThemeService] Theme '{themeToLoad}' failed to load. Using hardcoded fallback (standard dark).");
            CurrentTheme = new ThemeColors(); // Hardcoded fallback (standard dark)
        }
        Debug.WriteLine($"[ThemeService] Current theme loaded: {themeToLoad} (BG: {CurrentTheme.BackgroundColor}, Accent: {CurrentTheme.AccentColor})");
    }

    private void EnsureDefaultThemesExist()
    {
        string defaultThemePath = Path.Combine(_themesDirectory, DefaultThemeFileName);
        if (!File.Exists(defaultThemePath))
        {
            SaveThemeToFile(new ThemeColors(), DefaultThemeFileName);
        }

        string amoledSpotifyThemePath = Path.Combine(_themesDirectory, AmoledSpotifyThemeFileName);
        if (!File.Exists(amoledSpotifyThemePath))
        {
            SaveThemeToFile(ThemeColors.CreateAmoledSpotifyTheme(), AmoledSpotifyThemeFileName);
        }
    }

    public ThemeColors? LoadThemeFromFile(string themeFileName)
    {
        // ... (LoadThemeFromFile remains the same as previous correct version) ...
        string filePath = Path.Combine(_themesDirectory, themeFileName);
        Debug.WriteLine($"[ThemeService] Attempting to load theme from: {filePath}");
        if (File.Exists(filePath))
        {
            try
            {
                var json = File.ReadAllText(filePath);
                var theme = JsonSerializer.Deserialize<ThemeColors>(json);
                if (theme != null)
                {
                    Debug.WriteLine($"[ThemeService] Theme '{themeFileName}' loaded successfully.");
                    return theme;
                }
                Debug.WriteLine($"[ThemeService] Failed to deserialize theme '{themeFileName}'. Json content was: {json.Substring(0, Math.Min(json.Length, 200))}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ThemeService] Error loading theme '{themeFileName}': {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine($"[ThemeService] Theme file not found: {filePath}");
        }
        return null;
    }

    public void SaveThemeToFile(ThemeColors theme, string themeFileName)
    {
        // ... (SaveThemeToFile remains the same as previous correct version) ...
        string filePath = Path.Combine(_themesDirectory, themeFileName);
        try
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var json = JsonSerializer.Serialize(theme, options);
            File.WriteAllText(filePath, json);
            Debug.WriteLine($"[ThemeService] Theme '{themeFileName}' saved to: {filePath}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ThemeService] Error saving theme '{themeFileName}': {ex.Message}");
        }
    }

    public List<string> GetAvailableThemeFiles()
    {
        if (!Directory.Exists(_themesDirectory))
        {
            return new List<string>();
        }
        return Directory.GetFiles(_themesDirectory, "*.json")
                        .Select(Path.GetFileName)
                        .Where(f => f != null) // Path.GetFileName can return null
                        .ToList()!; // Non-null asserted as we filter nulls
    }
}
</file>

<file path="Source\Services\ThumbnailService.cs">
using System;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Avalonia;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Threading;
using Sonorize.Models;
using TagLib; // Required for IPicture, CorruptFileException, UnsupportedFormatException

namespace Sonorize.Services;

public class ThumbnailService : IDisposable
{
    private Bitmap? _defaultThumbnail;
    private readonly ConcurrentQueue<ThumbnailRequest> _thumbnailQueue = new();
    private readonly SemaphoreSlim _thumbnailWorkers = new(4); // Limit concurrent thumbnail loads
    private Task? _processingTask;
    private CancellationTokenSource _cts = new();
    private readonly object _lock = new();


    private record ThumbnailRequest(Song SongToUpdate, Action<Song, Bitmap?> Callback);

    public ThumbnailService()
    {
        Debug.WriteLine("[ThumbnailService] Initialized.");
        // _defaultThumbnail will be created on first access via GetDefaultThumbnail()
    }

    public Bitmap? GetDefaultThumbnail()
    {
        _defaultThumbnail ??= CreateDefaultMusicalNoteIcon();
        return _defaultThumbnail;
    }

    public void QueueThumbnailRequest(Song song, Action<Song, Bitmap?> onThumbnailReadyCallback)
    {
        if (song == null) throw new ArgumentNullException(nameof(song));
        if (onThumbnailReadyCallback == null) throw new ArgumentNullException(nameof(onThumbnailReadyCallback));

        _thumbnailQueue.Enqueue(new ThumbnailRequest(song, onThumbnailReadyCallback));
        EnsureProcessingRunning();
    }

    private void EnsureProcessingRunning()
    {
        lock (_lock)
        {
            if (_processingTask == null || _processingTask.IsCompleted)
            {
                _cts = new CancellationTokenSource(); // Reset CTS if task was completed/faulted
                _processingTask = Task.Run(ProcessQueueAsync, _cts.Token);
                Debug.WriteLine("[ThumbnailService] Thumbnail processing task started.");
            }
        }
    }

    private async Task ProcessQueueAsync()
    {
        Debug.WriteLine("[ThumbnailService] ProcessQueueAsync loop started.");
        try
        {
            while (!_cts.Token.IsCancellationRequested)
            {
                if (_thumbnailQueue.TryDequeue(out var request))
                {
                    await _thumbnailWorkers.WaitAsync(_cts.Token); // Wait for a free worker slot

                    // Fire-and-forget the actual loading for this request to not block the dequeuing loop
                    _ = Task.Run(async () =>
                    {
                        Bitmap? loadedThumbnail = null;
                        try
                        {
                            if (!_cts.Token.IsCancellationRequested)
                            {
                                loadedThumbnail = await LoadAlbumArtAsync(request.SongToUpdate.FilePath);
                                // Callback needs to be on UI thread as it might update UI-bound properties
                                await Dispatcher.UIThread.InvokeAsync(() =>
                                {
                                    request.Callback(request.SongToUpdate, loadedThumbnail);
                                }, DispatcherPriority.Background, _cts.Token);
                            }
                        }
                        catch (OperationCanceledException)
                        {
                            Debug.WriteLine($"[ThumbnailService] Thumbnail loading cancelled for {request.SongToUpdate.Title}.");
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine($"[ThumbnailService] Error loading thumbnail for {request.SongToUpdate.Title}: {ex.Message}");
                            // Invoke callback with null to signal completion, even on error
                            try
                            {
                                await Dispatcher.UIThread.InvokeAsync(() =>
                                {
                                    request.Callback(request.SongToUpdate, null);
                                }, DispatcherPriority.Background); // Don't use cancelled token for cleanup callback
                            }
                            catch (Exception callbackEx)
                            {
                                Debug.WriteLine($"[ThumbnailService] Error invoking callback after error for {request.SongToUpdate.Title}: {callbackEx.Message}");
                            }
                        }
                        finally
                        {
                            _thumbnailWorkers.Release();
                        }
                    }, _cts.Token);
                }
                else
                {
                    // Queue is empty, wait a bit before checking again or break if cancellation is requested
                    await Task.Delay(100, _cts.Token);
                }
            }
        }
        catch (OperationCanceledException)
        {
            Debug.WriteLine("[ThumbnailService] ProcessQueueAsync task cancelled.");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ThumbnailService] Unhandled exception in ProcessQueueAsync: {ex}");
        }
        finally
        {
            Debug.WriteLine("[ThumbnailService] ProcessQueueAsync loop finished.");
            lock (_lock) // Ensure task is nulled out safely
            {
                _processingTask = null;
            }
        }
    }


    private async Task<Bitmap?> LoadAlbumArtAsync(string filePath)
    {
        try
        {
            return await Task.Run(() =>
            {
                using var tagFile = TagLib.File.Create(filePath);
                if (tagFile.Tag.Pictures.Length > 0)
                {
                    IPicture pic = tagFile.Tag.Pictures[0];
                    using var ms = new MemoryStream(pic.Data.Data);
                    if (ms.Length > 0)
                    {
                        // Load the original bitmap
                        using var originalBitmap = new Bitmap(ms);
                        // Define the target size for the thumbnail
                        var targetSize = new PixelSize(128, 128); // Example size, adjust as needed
                        // Create a scaled version of the bitmap
                        return originalBitmap.CreateScaledBitmap(targetSize, BitmapInterpolationMode.HighQuality);
                    }
                }
                return null; // No pictures found or picture data is empty
            });
        }
        catch (CorruptFileException) { Debug.WriteLine($"[ThumbnailService] Corrupt file: {Path.GetFileName(filePath)}"); }
        catch (UnsupportedFormatException) { Debug.WriteLine($"[ThumbnailService] Unsupported format: {Path.GetFileName(filePath)}"); }
        catch (Exception ex) { Debug.WriteLine($"[ThumbnailService] Error loading album art for {Path.GetFileName(filePath)}: {ex.Message}"); }
        return null; // Return null on any error
    }

    private Bitmap? CreateDefaultMusicalNoteIcon()
    {
        Debug.WriteLine("[ThumbnailService] CreateDefaultMusicalNoteIcon called.");
        try
        {
            var pixelSize = new PixelSize(96, 96); // Standard size for the default icon
            var dpi = new Vector(96, 96); // Standard DPI

            using var renderTarget = new RenderTargetBitmap(pixelSize, dpi);
            using (DrawingContext context = renderTarget.CreateDrawingContext())
            {
                // Define background and foreground brushes
                var backgroundBrush = new SolidColorBrush(Colors.DimGray); // A neutral background
                var foregroundBrush = Brushes.WhiteSmoke; // A contrasting foreground for the icon
                var bounds = new Rect(new Size(pixelSize.Width, pixelSize.Height));

                // Fill background
                context.FillRectangle(backgroundBrush, bounds);

                // Create formatted text for the musical note icon
                var formattedText = new FormattedText(
                    "♫", // Musical note character
                    CultureInfo.CurrentCulture,
                    FlowDirection.LeftToRight,
                    Typeface.Default, // Use default typeface
                    pixelSize.Width / 2, // Make font size relative to icon size
                    foregroundBrush);

                // Calculate text origin to center it
                var textOrigin = new Point(
                    (bounds.Width - formattedText.Width) / 2,
                    (bounds.Height - formattedText.Height) / 2);

                // Draw the text
                context.DrawText(formattedText, textOrigin);
            }

            // Save to a memory stream and create Bitmap
            using var memoryStream = new MemoryStream();
            renderTarget.Save(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin); // Reset stream position

            // Return bitmap if stream is not empty
            return memoryStream.Length > 0 ? new Bitmap(memoryStream) : null;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ThumbnailService] CRITICAL EXCEPTION creating default icon: {ex}");
            return null; // Return null on error
        }
    }

    public void Dispose()
    {
        Debug.WriteLine("[ThumbnailService] Dispose called.");
        lock (_lock)
        {
            if (!_cts.IsCancellationRequested)
            {
                _cts.Cancel();
            }
        }

        // Wait for the processing task to complete, with a timeout
        _processingTask?.Wait(TimeSpan.FromSeconds(5));

        _cts.Dispose();
        _thumbnailWorkers.Dispose();
        _defaultThumbnail?.Dispose(); // Dispose the bitmap if it was created
        Debug.WriteLine("[ThumbnailService] Dispose finished.");
    }
}
</file>

<file path="Source\Services\WaveFormService.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO; // Required for Path.GetFileName
using System.Linq;
using System.Threading.Tasks;
using NAudio.Wave;

namespace Sonorize.Services;

// Represents a simplified data point for the waveform
public record WaveformPoint(double X, double YPeak);

public class WaveformService
{
    // Cache for waveform data to avoid reprocessing
    private readonly Dictionary<string, List<WaveformPoint>> _waveformCache = new();

    public async Task<List<WaveformPoint>> GetWaveformAsync(string filePath, int targetPoints)
    {
        if (string.IsNullOrEmpty(filePath) || targetPoints <= 0)
        {
            Debug.WriteLine($"[WaveformService] Invalid input: filePath is null/empty or targetPoints <= 0. File: '{filePath}', Points: {targetPoints}");
            return [];
        }

        // For debugging, temporarily disable cache to ensure fresh generation
        // if (_waveformCache.ContainsKey(filePath)) _waveformCache.Remove(filePath);

        if (_waveformCache.TryGetValue(filePath, out var cachedData))
        {
            Debug.WriteLine($"[WaveformService] Returning cached waveform for \"{Path.GetFileName(filePath)}\". Points: {cachedData.Count}");
            return cachedData;
        }

        Debug.WriteLine($"[WaveformService] Generating waveform for \"{Path.GetFileName(filePath)}\". Target points: {targetPoints}.");
        List<WaveformPoint> points = [];

        try
        {
            await Task.Run(() =>
            {
                using var reader = new AudioFileReader(filePath);
                Debug.WriteLine($"[WaveformServiceReader] File: \"{Path.GetFileName(filePath)}\", TotalTime: {reader.TotalTime}, Channels: {reader.WaveFormat.Channels}, SampleRate: {reader.WaveFormat.SampleRate}, BitsPerSample: {reader.WaveFormat.BitsPerSample}, Encoding: {reader.WaveFormat.Encoding}, BlockAlign: {reader.WaveFormat.BlockAlign}, Length (bytes): {reader.Length}");

                if (reader.WaveFormat.BlockAlign == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] File \"{Path.GetFileName(filePath)}\" has BlockAlign = 0. Cannot calculate total sample frames.");
                    return;
                }

                long totalSampleFrames = reader.Length / reader.WaveFormat.BlockAlign;

                if (totalSampleFrames == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] File \"{Path.GetFileName(filePath)}\" has 0 sample frames (Length: {reader.Length}, BlockAlign: {reader.WaveFormat.BlockAlign}). Cannot generate waveform.");
                    return;
                }

                var samplesPerFrameToProcessPerPoint = (int)Math.Max(1, totalSampleFrames / targetPoints);
                var bufferSizeInSamples = samplesPerFrameToProcessPerPoint * reader.WaveFormat.Channels;

                if (bufferSizeInSamples == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] Calculated bufferSizeInSamples is 0 for \"{Path.GetFileName(filePath)}\". TotalSampleFrames: {totalSampleFrames}, TargetPoints: {targetPoints}, Channels: {reader.WaveFormat.Channels}, SamplesPerFrameToProcessPerPoint: {samplesPerFrameToProcessPerPoint}. Cannot generate.");
                    return;
                }

                var buffer = new float[bufferSizeInSamples];
                int samplesReadFromAudioFile;
                double currentX = 0;
                double xIncrement = 1.0 / targetPoints;
                int pointsGeneratedCount = 0;

                Debug.WriteLine($"[WaveformServiceReader] Processing \"{Path.GetFileName(filePath)}\": TotalSampleFrames: {totalSampleFrames}, TargetPoints: {targetPoints}, SamplesPerFrameToProcessPerPoint: {samplesPerFrameToProcessPerPoint}, BufferSizeInFloats: {bufferSizeInSamples}");

                for (int i = 0; i < targetPoints; i++)
                {
                    float maxPeakInChunk = 0f;

                    samplesReadFromAudioFile = reader.Read(buffer, 0, buffer.Length);

                    if (samplesReadFromAudioFile == 0)
                    {
                        Debug.WriteLine($"[WaveformServiceReader] Read 0 samples at waveform point index {i} (target: {targetPoints}) for \"{Path.GetFileName(filePath)}\". End of audio stream reached.");
                        break;
                    }

                    for (int n = 0; n < samplesReadFromAudioFile; n++)
                    {
                        maxPeakInChunk = Math.Max(maxPeakInChunk, Math.Abs(buffer[n]));
                    }

                    points.Add(new WaveformPoint(currentX, maxPeakInChunk));
                    pointsGeneratedCount++;

                    if (i < 5 || (i > 0 && i % (targetPoints / 10) == 0) || i == targetPoints - 1)
                    {
                        Debug.WriteLine($"[WaveformServiceReader] Point {i}: X={currentX:F3}, Calculated YPeak={maxPeakInChunk:F4}, SamplesInThisChunk={samplesReadFromAudioFile}");
                    }

                    currentX += xIncrement;
                    if (currentX > 1.0) currentX = 1.0;
                }
                Debug.WriteLine($"[WaveformServiceReader] Loop finished for \"{Path.GetFileName(filePath)}\". Total waveform points generated: {pointsGeneratedCount}. (Target was {targetPoints})");
            });

            if (points.Any())
            {
                _waveformCache[filePath] = points;
                Debug.WriteLine($"[WaveformService] Waveform generated and cached for \"{Path.GetFileName(filePath)}\", {points.Count} points. First point YPeak: {points[0].YPeak:F4}. Approx mid point YPeak: {points[points.Count / 2].YPeak:F4}. Last point YPeak: {points.Last().YPeak:F4}");
            }
            else
            {
                Debug.WriteLine($"[WaveformService] No points generated for \"{Path.GetFileName(filePath)}\". It might be too short, silent, or an issue with reading audio data.");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[WaveformService] CRITICAL Error generating waveform for \"{Path.GetFileName(filePath)}\": {ex.ToString()}");
            return [];
        }
        return points;
    }

    public void ClearCache()
    {
        _waveformCache.Clear();
        Debug.WriteLine("[WaveformService] Cache cleared.");
    }
}
</file>

<file path="Source\UI\ThemeResourceApplicator.cs">
using System.Diagnostics;
using Avalonia;
using Avalonia.Media;
using Sonorize.Models;
using Sonorize.Extensions; // For ChangeLightness and WithAlpha

namespace Sonorize.UI;

public static class ThemeResourceApplicator
{
    public static void ApplyCustomColorsToResources(Application app, ThemeColors themeColors)
    {
        System.ArgumentNullException.ThrowIfNull(app);
        System.ArgumentNullException.ThrowIfNull(themeColors);

        if (themeColors.B_AccentColor is ISolidColorBrush accentSolidBrush &&
            themeColors.B_AccentForeground is ISolidColorBrush accentForegroundSolidBrush)
        {
            Color accentColor = accentSolidBrush.Color;
            Color accentForegroundColor = accentForegroundSolidBrush.Color;
            Debug.WriteLine($"[ThemeResourceApplicator] Overriding FluentTheme accent resources. Accent: {accentColor}, AccentFG: {accentForegroundColor}");

            app.Resources["SystemAccentColor"] = accentColor;
            app.Resources["SystemAccentColorLight1"] = accentColor.ChangeLightness(0.15);
            app.Resources["SystemAccentColorLight2"] = accentColor.ChangeLightness(0.30);
            app.Resources["SystemAccentColorLight3"] = accentColor.ChangeLightness(0.45);
            app.Resources["SystemAccentColorDark1"] = accentColor.ChangeLightness(-0.15);
            app.Resources["SystemAccentColorDark2"] = accentColor.ChangeLightness(-0.30);
            app.Resources["SystemAccentColorDark3"] = accentColor.ChangeLightness(-0.45);
            app.Resources["AccentFillColorDefaultBrush"] = new SolidColorBrush(accentColor);
            app.Resources["AccentFillColorSecondaryBrush"] = new SolidColorBrush(accentColor.ChangeLightness(0.15).WithAlpha(204));
            app.Resources["AccentFillColorTertiaryBrush"] = new SolidColorBrush(accentColor.ChangeLightness(0.30).WithAlpha(153));
            app.Resources["AccentFillColorDisabledBrush"] = new SolidColorBrush(accentColor.WithAlpha(51));
            app.Resources["AccentFillColorSelectedTextBackgroundBrush"] = new SolidColorBrush(accentColor);
            app.Resources["TextOnAccentFillColorPrimaryBrush"] = new SolidColorBrush(accentForegroundColor);
            app.Resources["TextOnAccentFillColorSecondaryBrush"] = new SolidColorBrush(accentForegroundColor.WithAlpha(178));
            app.Resources["TextOnAccentFillColorDisabledBrush"] = new SolidColorBrush(accentForegroundColor.WithAlpha(127));
            app.Resources["AccentControlBackgroundBrush"] = new SolidColorBrush(accentColor);
        }
        else
        {
            Debug.WriteLine("[ThemeResourceApplicator] Warning: Custom theme AccentColor or AccentForeground is not a SolidColorBrush. Cannot fully override Fluent accent system.");
        }
    }
}
</file>

<file path="Source\Utils\AlbumArtistTupleComparer.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Sonorize.Utils;

public class AlbumArtistTupleComparer : IEqualityComparer<(string Album, string Artist)>
{
    public bool Equals((string Album, string Artist) x, (string Album, string Artist) y)
    {
        return string.Equals(x.Album, y.Album, StringComparison.OrdinalIgnoreCase) &&
               string.Equals(x.Artist, y.Artist, StringComparison.OrdinalIgnoreCase);
    }

    public int GetHashCode([DisallowNull] (string Album, string Artist) obj)
    {
        int albumHashCode = obj.Album?.ToLowerInvariant().GetHashCode() ?? 0;
        int artistHashCode = obj.Artist?.ToLowerInvariant().GetHashCode() ?? 0;
        return HashCode.Combine(albumHashCode, artistHashCode);
    }

    public static readonly AlbumArtistTupleComparer Instance = new();
}
</file>

<file path="Source\ViewModels\AdvancedPanelViewModel.cs">
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;
using Sonorize.Services; // Required for PlaybackService if directly interacting, or PlaybackViewModel

namespace Sonorize.ViewModels;

public class AdvancedPanelViewModel : ViewModelBase
{
    private readonly PlaybackViewModel _playbackViewModel;
    private readonly LibraryViewModel _libraryViewModel;

    private bool _isVisible;
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (SetProperty(ref _isVisible, value))
            {
                OnVisibilityChanged();
            }
        }
    }

    public ICommand ToggleVisibilityCommand { get; }

    public AdvancedPanelViewModel(PlaybackViewModel playbackViewModel, LibraryViewModel libraryViewModel)
    {
        _playbackViewModel = playbackViewModel ?? throw new System.ArgumentNullException(nameof(playbackViewModel));
        _libraryViewModel = libraryViewModel ?? throw new System.ArgumentNullException(nameof(libraryViewModel));

        ToggleVisibilityCommand = new RelayCommand(
            _ => IsVisible = !IsVisible,
            CanToggleVisibility
        );

        _playbackViewModel.PropertyChanged += OnDependentViewModelPropertyChanged;
        _libraryViewModel.PropertyChanged += OnDependentViewModelPropertyChanged;
        // Listen to IsWaveformLoading on the new WaveformDisplayViewModel
        _playbackViewModel.WaveformDisplay.PropertyChanged += WaveformDisplay_PropertyChanged;
    }

    private void WaveformDisplay_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(WaveformDisplayViewModel.IsWaveformLoading))
        {
            // If any command in AdvancedPanelViewModel depends on IsWaveformLoading, update it here.
            // For now, ToggleVisibilityCommand might not directly, but if it did:
            (ToggleVisibilityCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }
    }

    private bool CanToggleVisibility(object? parameter)
    {
        // Visibility can be toggled if a song is playing and library is not loading.
        // Waveform loading state might also influence this if we want to prevent toggling during load.
        return _playbackViewModel.HasCurrentSong &&
               !_libraryViewModel.IsLoadingLibrary &&
               !_playbackViewModel.WaveformDisplay.IsWaveformLoading; // Prevent toggling if waveform is loading
    }

    private void OnVisibilityChanged()
    {
        (ToggleVisibilityCommand as RelayCommand)?.RaiseCanExecuteChanged();

        // Inform the WaveformDisplayViewModel about the panel's visibility
        _playbackViewModel.WaveformDisplay.SetPanelVisibility(IsVisible);
    }

    private void OnDependentViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(PlaybackViewModel.HasCurrentSong) ||
            e.PropertyName == nameof(LibraryViewModel.IsLoadingLibrary))
        {
            (ToggleVisibilityCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }
    }

    public void Dispose()
    {
        _playbackViewModel.PropertyChanged -= OnDependentViewModelPropertyChanged;
        _libraryViewModel.PropertyChanged -= OnDependentViewModelPropertyChanged;
        if (_playbackViewModel?.WaveformDisplay != null)
        {
            _playbackViewModel.WaveformDisplay.PropertyChanged -= WaveformDisplay_PropertyChanged;
        }
    }
}
</file>

<file path="Source\ViewModels\AlbumViewModel.cs">
using System.Collections.Generic; // For List
using Avalonia.Media.Imaging;
// Removed System.Collections.ObjectModel as List is sufficient here and ViewModelBase handles INPC

namespace Sonorize.ViewModels;

public class AlbumViewModel : ViewModelBase
{
    public string? Title { get; set; }
    public string? Artist { get; set; }
    public List<Bitmap?> SongThumbnailsForGrid
    {
        get;
        // Setter might be used by LibraryVM during initialization
        set => SetProperty(ref field, value);
    } = new List<Bitmap?>(new Bitmap?[4]);

    public Bitmap? RepresentativeThumbnail
    {
        get;
        set => SetProperty(ref field, value);
    }

    public string DisplayText => $"{Title} - {Artist}";
}
</file>

<file path="Source\ViewModels\ApplicationWorkflowManager.cs">
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Avalonia.Controls; // For Window
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.ViewModels.Status; // For StatusBarTextProvider

namespace Sonorize.ViewModels;

public class ApplicationWorkflowManager : IDisposable
{
    private readonly SettingsService _settingsService;
    private readonly ScrobblingService _scrobblingService;
    private readonly ThemeColors _currentTheme;
    private readonly LibraryViewModel _libraryViewModel;
    private readonly PlaybackViewModel _playbackViewModel;
    private readonly PlaybackService _playbackService;

    private readonly NextTrackSelectorService _nextTrackSelectorService;
    private readonly StatusBarTextProvider _statusBarTextProvider;
    private readonly SettingsChangeProcessorService _settingsChangeProcessorService;
    private readonly PlaybackFlowManagerService _playbackFlowManagerService;
    private readonly ApplicationInteractionService _applicationInteractionService;
    private readonly LibraryPlaybackLinkService _libraryPlaybackLinkService;

    private readonly Random _shuffleRandom = new();

    public ApplicationWorkflowManager(
        SettingsService settingsService,
        ScrobblingService scrobblingService,
        ThemeColors currentTheme,
        LibraryViewModel libraryViewModel,
        PlaybackViewModel playbackViewModel,
        PlaybackService playbackService,
        LoopDataService loopDataService) // LoopDataService needed by LoopEditor, indirectly for status
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        _scrobblingService = scrobblingService ?? throw new ArgumentNullException(nameof(scrobblingService));
        _currentTheme = currentTheme ?? throw new ArgumentNullException(nameof(currentTheme));
        _libraryViewModel = libraryViewModel ?? throw new ArgumentNullException(nameof(libraryViewModel));
        _playbackViewModel = playbackViewModel ?? throw new ArgumentNullException(nameof(playbackViewModel));
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));

        // Create internal services
        _nextTrackSelectorService = new NextTrackSelectorService(_shuffleRandom);

        // Assuming LoopEditorViewModel is accessible or its relevant state for status bar is handled differently
        // For StatusBarTextProvider, we might need LoopEditorViewModel or a subset of its state.
        // For simplicity here, if LoopEditor is a direct child of MainWindowViewModel, it could be passed too.
        // Or StatusBarTextProvider could be simplified if LoopEditor state isn't strictly needed or handled via PlaybackViewModel.
        // Let's assume MainWindowViewModel will pass its LoopEditorViewModel instance to GetCurrentStatusText.
        // For now, StatusBarTextProvider is created here.
        // If LoopEditorViewModel is critical, it should be passed in constructor.
        // Let's pass LoopEditorViewModel's required data if possible, or the VM itself.
        // For now, creating it with what's available.
        // LoopEditorViewModel is created in MainWindowViewModel, so we can't easily pass it here without a circular setup.
        // Solution: MainWindowViewModel passes its instance of LoopEditorViewModel to GetCurrentStatusText.
        _statusBarTextProvider = new StatusBarTextProvider(_playbackViewModel, null!, _libraryViewModel); // Placeholder for LoopEditorViewModel

        _settingsChangeProcessorService = new SettingsChangeProcessorService(_libraryViewModel, _scrobblingService);
        _playbackFlowManagerService = new PlaybackFlowManagerService(_libraryViewModel, _playbackViewModel, _playbackService, _nextTrackSelectorService);

        _applicationInteractionService = new ApplicationInteractionService(
            _settingsService,
            _settingsChangeProcessorService,
            _currentTheme);

        _libraryPlaybackLinkService = new LibraryPlaybackLinkService(_libraryViewModel, _playbackService, _playbackViewModel);
    }

    public async Task<(List<string> statusMessages, bool settingsChanged)> HandleOpenSettingsDialogAsync(Window owner)
    {
        return await _applicationInteractionService.HandleOpenSettingsDialogAsync(owner);
    }

    public async Task<(bool directoryAddedAndLibraryRefreshNeeded, string statusMessage)> HandleAddMusicDirectoryAsync(Window owner)
    {
        return await _applicationInteractionService.HandleAddMusicDirectoryAsync(owner);
    }

    public void HandlePlaybackEndedNaturally()
    {
        _playbackFlowManagerService.HandlePlaybackEndedNaturally();
    }

    public string GetCurrentStatusText(LoopEditorViewModel loopEditorViewModel) // Accept LoopEditorViewModel here
    {
        // Temporarily create a new StatusBarTextProvider if we can't store LoopEditorViewModel
        // This is not ideal. Better to have StatusBarTextProvider take LoopEditorViewModel in its constructor.
        // For this refactor, we'll assume the existing StatusBarTextProvider in MainWindowViewModel is used,
        // and this method would reconstruct the string or MainWindowViewModel calls its own provider.
        // To make this class fully responsible, it needs LoopEditorViewModel.
        // Let's refine _statusBarTextProvider initialization or GetCurrentStatusText method.
        // A simple way is for this method to reconstruct the provider instance or update it.
        var localStatusBarTextProvider = new StatusBarTextProvider(_playbackViewModel, loopEditorViewModel, _libraryViewModel);
        return localStatusBarTextProvider.GetCurrentStatusText();
    }

    public void Dispose()
    {
        _libraryPlaybackLinkService?.Dispose();
    }
}
</file>

<file path="Source\ViewModels\ArtistViewModel.cs">
using Avalonia.Media.Imaging;

namespace Sonorize.ViewModels;

public class ArtistViewModel : ViewModelBase // Inherit from ViewModelBase
{
    public string? Name { get; set; } // Name can remain simple if not changed after creation

    private Bitmap? _thumbnail;
    public Bitmap? Thumbnail
    {
        get => _thumbnail;
        set => SetProperty(ref _thumbnail, value); // Use SetProperty for INotifyPropertyChanged
    }
    // You could add more properties later, like SongCount or AlbumCount
}
</file>

<file path="Source\ViewModels\LastfmSettingsViewModel.cs">
using Sonorize.Models; // Required for AppSettings

namespace Sonorize.ViewModels;

public class LastfmSettingsViewModel : ViewModelBase
{
    public bool LastfmScrobblingEnabled
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }
    
    public string? LastfmUsername
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }
    
    public string? LastfmPassword
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }
    
    public int ScrobbleThresholdPercentage
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }
    
    public int ScrobbleThresholdAbsoluteSeconds
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    }

    public LastfmSettingsViewModel() { }

    public void LoadFromSettings(AppSettings settings)
    {
        LastfmScrobblingEnabled = settings.LastfmScrobblingEnabled;
        LastfmUsername = settings.LastfmUsername;
        LastfmPassword = settings.LastfmPassword;
        ScrobbleThresholdPercentage = settings.ScrobbleThresholdPercentage;
        ScrobbleThresholdAbsoluteSeconds = settings.ScrobbleThresholdAbsoluteSeconds;
    }

    public void UpdateAppSettings(AppSettings settings)
    {
        settings.LastfmScrobblingEnabled = LastfmScrobblingEnabled;
        settings.LastfmUsername = LastfmUsername;
        
        if (LastfmPassword is not null)
        {
            settings.LastfmPassword = LastfmPassword;
        }
        
        settings.ScrobbleThresholdPercentage = ScrobbleThresholdPercentage;
        settings.ScrobbleThresholdAbsoluteSeconds = ScrobbleThresholdAbsoluteSeconds;
    }
}
</file>

<file path="Source\ViewModels\LibraryViewModel.cs">
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.ViewModels.LibraryManagement;
using System.ComponentModel; // Required for PropertyChangedEventArgs

namespace Sonorize.ViewModels;

public class LibraryViewModel : ViewModelBase
{
    private readonly SettingsService _settingsService; // Kept for LibraryStatusTextGenerator
    private readonly MusicLibraryService _musicLibraryService;
    private readonly LoopDataService _loopDataService;
    private readonly MainWindowViewModel _parentViewModel;
    private readonly ArtistAlbumCollectionManager _artistAlbumManager;
    private readonly SongFilteringService _songFilteringService;
    private readonly LibraryStatusTextGenerator _statusTextGenerator;
    private readonly LibraryDataOrchestrator _libraryDataOrchestrator;
    private readonly TrackNavigationManager _trackNavigationManager;
    private readonly LibraryDisplayModeService _displayModeService; // New dependency

    private readonly ObservableCollection<Song> _allSongs = [];

    public ObservableCollection<Song> FilteredSongs { get; } = [];
    public ObservableCollection<ArtistViewModel> Artists { get; } = [];
    public ObservableCollection<AlbumViewModel> Albums { get; } = [];

    // Display mode command is now proxied from LibraryDisplayModeService
    public ICommand SetDisplayModeCommand => _displayModeService.SetDisplayModeCommand;
    public ICommand PreviousTrackCommand => _trackNavigationManager.PreviousTrackCommand;
    public ICommand NextTrackCommand => _trackNavigationManager.NextTrackCommand;
    public ICommand EditSongMetadataCommand { get; }


    public string SearchQuery
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }
            ApplyFilter();
        }
    } = string.Empty;

    public Song? SelectedSong
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            Debug.WriteLine($"[LibraryVM] SelectedSong changed to: {value?.Title ?? "null"}");
            _trackNavigationManager.UpdateSelectedSong(value);
        }
    }

    public ArtistViewModel? SelectedArtist
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            if (value != null)
            {
                OnArtistSelected(value);
            }
            else
            {
                ApplyFilter();
            }
        }
    }

    public AlbumViewModel? SelectedAlbum
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            if (value != null)
            {
                OnAlbumSelected(value);
            }
            else
            {
                ApplyFilter();
            }
        }
    }

    public bool IsLoadingLibrary
    {
        get;

        private set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            RaiseLibraryCommandsCanExecuteChanged();
        }
    } = false;

    public string LibraryStatusText
    {
        get => _libraryStatusText;
        private set => SetProperty(ref _libraryStatusText, value);
    }
    private string _libraryStatusText = "";


    // Display mode properties are now proxies to LibraryDisplayModeService
    public SongDisplayMode LibraryViewMode => _displayModeService.LibraryViewMode;
    public SongDisplayMode ArtistViewMode => _displayModeService.ArtistViewMode;
    public SongDisplayMode AlbumViewMode => _displayModeService.AlbumViewMode;

    public LibraryViewModel(
        MainWindowViewModel parentViewModel,
        SettingsService settingsService,
        MusicLibraryService musicLibraryService,
        LoopDataService loopDataService,
        LibraryDisplayModeService displayModeService) // Added LibraryDisplayModeService
    {
        _parentViewModel = parentViewModel ?? throw new ArgumentNullException(nameof(parentViewModel));
        _settingsService = settingsService; // Still needed for status text generator
        _musicLibraryService = musicLibraryService;
        _loopDataService = loopDataService;
        _displayModeService = displayModeService ?? throw new ArgumentNullException(nameof(displayModeService));

        // Subscribe to PropertyChanged on _displayModeService to update proxied properties
        _displayModeService.PropertyChanged += DisplayModeService_PropertyChanged;

        FilteredSongs = new ObservableCollection<Song>();
        _trackNavigationManager = new TrackNavigationManager(FilteredSongs);

        _artistAlbumManager = new ArtistAlbumCollectionManager(Artists, Albums, _musicLibraryService);
        _songFilteringService = new SongFilteringService();
        _statusTextGenerator = new LibraryStatusTextGenerator();
        _libraryDataOrchestrator = new LibraryDataOrchestrator(_musicLibraryService, _artistAlbumManager, _settingsService);

        _musicLibraryService.SongThumbnailUpdated += MusicLibraryService_SongThumbnailUpdated;

        EditSongMetadataCommand = new RelayCommand(ExecuteEditSongMetadata, CanExecuteEditSongMetadata);

        UpdateStatusBarText();
    }

    private void DisplayModeService_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        // Raise PropertyChanged for our proxy properties when the service's properties change
        switch (e.PropertyName)
        {
            case nameof(LibraryDisplayModeService.LibraryViewMode):
                OnPropertyChanged(nameof(LibraryViewMode));
                break;
            case nameof(LibraryDisplayModeService.ArtistViewMode):
                OnPropertyChanged(nameof(ArtistViewMode));
                break;
            case nameof(LibraryDisplayModeService.AlbumViewMode):
                OnPropertyChanged(nameof(AlbumViewMode));
                break;
        }
    }


    private async void MusicLibraryService_SongThumbnailUpdated(Song updatedSong)
    {
        await Dispatcher.UIThread.InvokeAsync(() =>
        {
            _artistAlbumManager.UpdateCollectionsForSongThumbnail(updatedSong, _allSongs);
            OnPropertyChanged(nameof(Artists));
            OnPropertyChanged(nameof(Albums));
        });
    }

    public async Task LoadLibraryAsync()
    {
        if (IsLoadingLibrary)
        {
            return;
        }

        IsLoadingLibrary = true;
        SearchQuery = string.Empty;
        SelectedArtist = null;
        SelectedAlbum = null;
        SelectedSong = null;

        await Dispatcher.UIThread.InvokeAsync(() =>
        {
            _allSongs.Clear();
            FilteredSongs.Clear();
            Artists.Clear();
            Albums.Clear();
            LibraryStatusText = "Preparing to load music...";
        });

        Action<Song> songAddedCallback = song => _allSongs.Add(song);
        Action<string> statusUpdateCallback = status => LibraryStatusText = status;

        await _libraryDataOrchestrator.LoadAndProcessLibraryDataAsync(statusUpdateCallback, songAddedCallback);

        await Dispatcher.UIThread.InvokeAsync(() =>
        {
            OnPropertyChanged(nameof(Artists));
            OnPropertyChanged(nameof(Albums));
            ApplyFilter();
        });

        IsLoadingLibrary = false;
        UpdateStatusBarText();
    }

    private void OnArtistSelected(ArtistViewModel artist)
    {
        if (artist?.Name is null)
        {
            return;
        }

        Debug.WriteLine($"[LibraryVM] Artist selected: {artist.Name}");

        SelectedAlbum = null;
        OnPropertyChanged(nameof(SelectedAlbum));
        SearchQuery = artist.Name;

        _parentViewModel.ActiveTabIndex = 0;
    }

    private void OnAlbumSelected(AlbumViewModel album)
    {
        if (album?.Title == null || album.Artist == null)
        {
            return;
        }

        Debug.WriteLine($"[LibraryVM] Album selected: {album.Title} by {album.Artist}");

        SelectedArtist = null;
        OnPropertyChanged(nameof(SelectedArtist));
        SearchQuery = album.Title;

        _parentViewModel.ActiveTabIndex = 0;
    }

    private void ApplyFilter()
    {
        var currentSelectedSongBeforeFilter = SelectedSong;

        FilteredSongs.Clear();
        var filtered = _songFilteringService.ApplyFilter(_allSongs, SearchQuery, SelectedArtist, SelectedAlbum);
        foreach (var song in filtered)
        {
            FilteredSongs.Add(song);
        }

        if (currentSelectedSongBeforeFilter != null && FilteredSongs.Contains(currentSelectedSongBeforeFilter))
        {
            SelectedSong = currentSelectedSongBeforeFilter;
        }
        else if (currentSelectedSongBeforeFilter != null)
        {
            Debug.WriteLine($"[LibraryVM] Selected song '{currentSelectedSongBeforeFilter.Title}' is no longer in the filtered list. Clearing selection.");
            SelectedSong = null;
        }
        else
        {
            if (SelectedSong != null) SelectedSong = null;
            else _trackNavigationManager.UpdateSelectedSong(null);
        }
        UpdateStatusBarText();
    }

    public void UpdateStatusBarText()
    {
        if (!IsLoadingLibrary)
        {
            LibraryStatusText = _statusTextGenerator.GenerateStatusText(
                IsLoadingLibrary,
                _allSongs.Count,
                FilteredSongs.Count,
                SelectedArtist,
                SelectedAlbum,
                SearchQuery,
                _settingsService
            );
        }
    }

    private void ExecuteEditSongMetadata(object? parameter)
    {
        if (parameter is Song song)
        {
            Debug.WriteLine($"[LibraryVM] Edit metadata requested for: {song.Title}");
            // Future: Open metadata editing dialog here
        }
    }

    private bool CanExecuteEditSongMetadata(object? parameter)
    {
        return parameter is Song;
    }


    public void RaiseLibraryCommandsCanExecuteChanged()
    {
        // SetDisplayModeCommand CanExecute is handled by LibraryDisplayModeService
        // Navigation commands are handled by TrackNavigationManager
        (EditSongMetadataCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    public void Dispose()
    {
        if (_musicLibraryService != null)
        {
            _musicLibraryService.SongThumbnailUpdated -= MusicLibraryService_SongThumbnailUpdated;
        }
        if (_displayModeService != null)
        {
            _displayModeService.PropertyChanged -= DisplayModeService_PropertyChanged;
            // If LibraryDisplayModeService becomes IDisposable, dispose it here.
        }
    }
}
</file>

<file path="Source\ViewModels\PlaybackEffectsViewModel.cs">
using System;
using System.Diagnostics;
using Sonorize.Services; // Required for PlaybackService

namespace Sonorize.ViewModels;

public class PlaybackEffectsViewModel : ViewModelBase
{
    private readonly PlaybackService _playbackService;

    public double PlaybackSpeed
    {
        get;
        set
        {
            value = Math.Clamp(value, 0.5, 2.0);
            if (SetProperty(ref field, value))
            {
                _playbackService.PlaybackRate = (float)value;
                OnPropertyChanged(nameof(PlaybackSpeedDisplay));
                Debug.WriteLine($"[PlaybackEffectsVM] PlaybackSpeed set to: {value}");
            }
        }
    } = 1.0;

    public string PlaybackSpeedDisplay => $"{PlaybackSpeed:F2}x";

    public double PlaybackPitch
    {
        get;
        set
        {
            // Round to nearest 0.5
            double roundedValue = Math.Round(value * 2, MidpointRounding.AwayFromZero) / 2.0;
            roundedValue = Math.Clamp(roundedValue, -4.0, 4.0); // Clamp after rounding

            if (SetProperty(ref field, roundedValue))
            {
                _playbackService.PitchSemitones = (float)roundedValue;
                OnPropertyChanged(nameof(PlaybackPitchDisplay));
                Debug.WriteLine($"[PlaybackEffectsVM] PlaybackPitch set to: {roundedValue}");
            }
        }
    } = 0.0;
    
    public string PlaybackPitchDisplay => $"{PlaybackPitch:+0.0;-0.0;0} st";

    public PlaybackEffectsViewModel(PlaybackService playbackService)
    {
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        // Initialize with current service values if necessary, or assume service defaults are fine.
        // For now, assume ViewModel defaults (1.0 speed, 0.0 pitch) are fine and will set service on first change.
        // Or, sync from service:
        // _playbackSpeed = _playbackService.PlaybackRate;
        // _playbackPitch = _playbackService.PitchSemitones;
    }

    // If PlaybackService can change these values externally and this VM needs to reflect that,
    // then PlaybackEffectsViewModel would need to subscribe to PlaybackService.PropertyChanged.
    // For now, assuming changes are driven from this VM.
}
</file>

<file path="Source\ViewModels\PlaybackModeViewModel.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows.Input; // Required for ICommand

namespace Sonorize.ViewModels;

public class PlaybackModeViewModel : ViewModelBase
{
    private readonly PlaybackViewModel _parentPlaybackViewModel;

    public bool ShuffleEnabled
    {
        get;
        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            Debug.WriteLine($"[PlaybackModeVM] ShuffleEnabled set to: {value}");
            // Parent PlaybackViewModel might need to know if preferences are saved here
            // or if this directly influences something in PlaybackService.
            // For now, it's a UI state.
            RaiseCommandCanExecuteChanged();
        }
    } = false;

    public RepeatMode RepeatMode
    {
        get;
        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            Debug.WriteLine($"[PlaybackModeVM] RepeatMode set to: {value}");
            OnPropertyChanged(nameof(IsRepeatOne));
            OnPropertyChanged(nameof(IsRepeatAll));
            OnPropertyChanged(nameof(IsRepeatActive)); // Notify composite state change
            RaiseCommandCanExecuteChanged();
        }
    } = RepeatMode.PlayOnce;

    // Helper properties for UI bindings
    public bool IsRepeatOne { get => RepeatMode == RepeatMode.RepeatOne; set { if (value) RepeatMode = RepeatMode.RepeatOne; else if (RepeatMode == RepeatMode.RepeatOne) RepeatMode = RepeatMode.PlayOnce; } }
    public bool IsRepeatAll { get => RepeatMode == RepeatMode.RepeatAll; set { if (value) RepeatMode = RepeatMode.RepeatAll; else if (RepeatMode == RepeatMode.RepeatAll) RepeatMode = RepeatMode.PlayOnce; } }
    public bool IsRepeatActive => RepeatMode != RepeatMode.None;

    public ICommand ToggleShuffleCommand { get; }
    public ICommand CycleRepeatModeCommand { get; }

    public PlaybackModeViewModel(PlaybackViewModel parentPlaybackViewModel)
    {
        _parentPlaybackViewModel = parentPlaybackViewModel ?? throw new ArgumentNullException(nameof(parentPlaybackViewModel));
        _parentPlaybackViewModel.PropertyChanged += ParentPlaybackViewModel_PropertyChanged;

        ToggleShuffleCommand = new RelayCommand(
            _ => ShuffleEnabled = !ShuffleEnabled,
            _ => _parentPlaybackViewModel.HasCurrentSong
        );

        CycleRepeatModeCommand = new RelayCommand(
            _ => CycleRepeatModeInternal(),
            _ => _parentPlaybackViewModel.HasCurrentSong
        );
    }

    private void ParentPlaybackViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(PlaybackViewModel.HasCurrentSong))
        {
            return;
        }

        RaiseCommandCanExecuteChanged();
    }

    private void CycleRepeatModeInternal()
    {
        RepeatMode = RepeatMode switch
        {
            RepeatMode.None => RepeatMode.PlayOnce,
            RepeatMode.PlayOnce => RepeatMode.RepeatOne,
            RepeatMode.RepeatOne => RepeatMode.RepeatAll,
            RepeatMode.RepeatAll => RepeatMode.None,
            _ => RepeatMode.None // Should not happen
        };
    }

    public void RaiseCommandCanExecuteChanged()
    {
        (ToggleShuffleCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (CycleRepeatModeCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    public void Dispose()
    {
        if (_parentPlaybackViewModel == null)
        {
            return;
        }

        _parentPlaybackViewModel.PropertyChanged -= ParentPlaybackViewModel_PropertyChanged;
    }
}
</file>

<file path="Source\ViewModels\PlaybackViewModel.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows.Input;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services; // This using directive makes PlaybackStateStatus from the Service available

namespace Sonorize.ViewModels;

public enum RepeatMode { None, PlayOnce, RepeatOne, RepeatAll }

public class PlaybackViewModel : ViewModelBase
{
    public PlaybackService PlaybackService { get; } // Keep reference to the service

    public WaveformDisplayViewModel WaveformDisplay { get; }
    public PlaybackModeViewModel ModeControls { get; }
    public PlaybackEffectsViewModel EffectsControls { get; } // New child VM

    public Song? CurrentSong => PlaybackService.CurrentSong;

    public bool HasCurrentSong => PlaybackService.CurrentSong != null;

    public TimeSpan CurrentPosition => PlaybackService.CurrentPosition;

    public double CurrentPositionSeconds
    {
        get => PlaybackService.CurrentPositionSeconds;
        set
        {
            if (PlaybackService.CurrentSong == null || Math.Abs(PlaybackService.CurrentPositionSeconds - value) <= 0.01)
            {
                return;
            }
            PlaybackService.Seek(TimeSpan.FromSeconds(value));
        }
    }

    public TimeSpan CurrentSongDuration => PlaybackService.CurrentSongDuration;

    public double CurrentSongDurationSeconds => PlaybackService.CurrentSongDurationSeconds;

    public PlaybackStateStatus CurrentPlaybackStatus => PlaybackService.CurrentPlaybackStatus;

    public bool IsPlaying => PlaybackService.IsPlaying;

    // PlaybackSpeed and PlaybackPitch are now managed by PlaybackEffectsViewModel
    // public double PlaybackSpeed { get; set { value = Math.Clamp(value, 0.5, 2.0); if (SetProperty(ref field, value)) { PlaybackService.PlaybackRate = (float)value; OnPropertyChanged(nameof(PlaybackSpeedDisplay)); } } } = 1.0;
    // public string PlaybackSpeedDisplay => $"{PlaybackSpeed:F2}x";
    // public double PlaybackPitch { /* ... */ } = 0.0;
    // public string PlaybackPitchDisplay => $"{PlaybackPitch:+0.0;-0.0;0} st";

    public string CurrentTimeDisplay
    {
        get
        {
            if (PlaybackService.CurrentSong != null)
            {
                return $"{PlaybackService.CurrentPosition:mm\\:ss}";
            }

            return "--:--";
        }
    }

    public string TotalTimeDisplay
    {
        get
        {
            if (PlaybackService.CurrentSong != null && PlaybackService.CurrentSongDuration.TotalSeconds > 0)
            {
                return $"{PlaybackService.CurrentSongDuration:mm\\:ss}";
            }

            return "--:--";
        }
    }

    public ICommand PlayPauseResumeCommand { get; }
    public ICommand SeekCommand { get; }

    public PlaybackViewModel(PlaybackService playbackService, WaveformService waveformService)
    {
        PlaybackService = playbackService;
        WaveformDisplay = new WaveformDisplayViewModel(playbackService, waveformService);
        ModeControls = new PlaybackModeViewModel(this);
        EffectsControls = new PlaybackEffectsViewModel(playbackService); // Instantiate new VM

        // PlaybackSpeed = 1.0; // Now managed by EffectsControls
        // PlaybackPitch = 0.0; // Now managed by EffectsControls

        PlayPauseResumeCommand = new RelayCommand(
            _ => TogglePlayPauseResume(),
            _ => PlaybackService.CurrentSong != null && !WaveformDisplay.IsWaveformLoading);

        SeekCommand = new RelayCommand(
            positionSecondsObj =>
            {
                if (positionSecondsObj is double seconds && PlaybackService.CurrentSongDuration.TotalSeconds > 0)
                {
                    PlaybackService.Seek(TimeSpan.FromSeconds(seconds));
                }
            },
             _ => PlaybackService.CurrentSong != null && PlaybackService.CurrentSongDuration.TotalSeconds > 0 && !WaveformDisplay.IsWaveformLoading);

        PlaybackService.PropertyChanged += PlaybackService_PropertyChanged;
        PropertyChanged += PlaybackViewModel_PropertyChanged; // For HasCurrentSong affecting ModeControls
        WaveformDisplay.PropertyChanged += WaveformDisplay_PropertyChanged;
        // EffectsControls does not currently raise events that PlaybackViewModel needs to listen to directly.
        // If it did, we would subscribe here: EffectsControls.PropertyChanged += EffectsControls_PropertyChanged;
    }

    private void WaveformDisplay_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(WaveformDisplayViewModel.IsWaveformLoading))
        {
            return;
        }

        RaisePlaybackCommandCanExecuteChanged();
    }

    private void TogglePlayPauseResume()
    {
        Debug.WriteLine($"[PlaybackVM] TogglePlayPauseResume called. Current state: {PlaybackService.CurrentPlaybackStatus}");
        if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Playing)
        {
            PlaybackService.Pause();
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Paused)
        {
            PlaybackService.Resume();
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Stopped && PlaybackService.CurrentSong != null)
        {
            PlaybackService.Resume();
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Stopped && PlaybackService.CurrentSong == null)
        {
            Debug.WriteLine("[PlaybackVM] TogglePlayPauseResume called in Stopped state with no song. Doing nothing.");
        }
    }

    private void PlaybackService_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            switch (e.PropertyName)
            {
                case nameof(PlaybackService.CurrentSong):
                    OnPropertyChanged(nameof(CurrentSong));
                    OnPropertyChanged(nameof(HasCurrentSong)); // This will be picked up by PlaybackModeViewModel
                    OnPropertyChanged(nameof(CurrentTimeDisplay));
                    OnPropertyChanged(nameof(TotalTimeDisplay));
                    RaisePlaybackCommandCanExecuteChanged();
                    break;
                case nameof(PlaybackService.CurrentPosition):
                    OnPropertyChanged(nameof(CurrentPosition));
                    OnPropertyChanged(nameof(CurrentPositionSeconds));
                    OnPropertyChanged(nameof(CurrentTimeDisplay));
                    break;
                case nameof(PlaybackService.CurrentSongDuration):
                    OnPropertyChanged(nameof(CurrentSongDuration));
                    OnPropertyChanged(nameof(CurrentSongDurationSeconds));
                    OnPropertyChanged(nameof(TotalTimeDisplay));
                    RaisePlaybackCommandCanExecuteChanged();
                    break;
                case nameof(PlaybackService.CurrentPlaybackStatus):
                    OnPropertyChanged(nameof(CurrentPlaybackStatus));
                    OnPropertyChanged(nameof(IsPlaying));
                    RaisePlaybackCommandCanExecuteChanged();
                    break;
                    // If PlaybackRate or PitchSemitones from PlaybackService were to update EffectsControls:
                    // case nameof(PlaybackService.PlaybackRate):
                    //    EffectsControls.PlaybackSpeed = PlaybackService.PlaybackRate; // Or some sync logic
                    //    break;
                    // case nameof(PlaybackService.PitchSemitones):
                    //    EffectsControls.PlaybackPitch = PlaybackService.PitchSemitones;
                    //    break;
            }
        });
    }

    private void PlaybackViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(HasCurrentSong): // ModeControls depends on this
                ModeControls.RaiseCommandCanExecuteChanged();
                RaisePlaybackCommandCanExecuteChanged(); // Other commands might also depend on HasCurrentSong
                break;
        }
    }

    public void RaisePlaybackCommandCanExecuteChanged()
    {
        (PlayPauseResumeCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (SeekCommand as RelayCommand)?.RaiseCanExecuteChanged();
        ModeControls.RaiseCommandCanExecuteChanged(); // Delegate to the extracted VM
        // EffectsControls currently has no commands.
    }

    public void Dispose()
    {
        if (PlaybackService != null)
        {
            PlaybackService.PropertyChanged -= PlaybackService_PropertyChanged;
        }
        if (WaveformDisplay != null)
        {
            WaveformDisplay.PropertyChanged -= WaveformDisplay_PropertyChanged;
            // If WaveformDisplay implements IDisposable, call it
        }
        ModeControls?.Dispose(); // Dispose the extracted VM
        // EffectsControls does not currently implement IDisposable or hold resources.
    }
}
</file>

<file path="Source\ViewModels\RelayCommand.cs">
using System;
using System.Windows.Input;

namespace Sonorize.ViewModels;

public class RelayCommand : ICommand
{
    private readonly Action<object?> _execute;
    private readonly Predicate<object?>? _canExecute;
    private EventHandler? _canExecuteChanged;

    public event EventHandler? CanExecuteChanged
    {
        add
        {
            // Note: Avalonia doesn't have a global CommandManager.RequerySuggested like WPF.
            // For simplicity, this basic RelayCommand requires manual raising of CanExecuteChanged
            // or relies on UI controls that re-evaluate CanExecute on interactions.
            // For more robust scenarios, integrate with a mechanism that allows VMs to signal changes.
            _canExecuteChanged += value;
        }
        remove
        {
            _canExecuteChanged -= value;
        }
    }

    public void RaiseCanExecuteChanged()
    {
        _canExecuteChanged?.Invoke(this, EventArgs.Empty);
    }

    public RelayCommand(Action<object?> execute, Predicate<object?>? canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public RelayCommand(Action execute, Func<bool>? canExecute = null)
        : this(o => execute(), canExecute == null ? (Predicate<object?>?)null : o => canExecute())
    {
    }


    public bool CanExecute(object? parameter) => _canExecute == null || _canExecute(parameter);
    public void Execute(object? parameter) => _execute(parameter);
}
</file>

<file path="Source\ViewModels\SongDisplayMode.cs">
namespace Sonorize.ViewModels;

public enum SongDisplayMode
{
    Detailed,
    Compact,
    Grid
}
</file>

<file path="Source\ViewModels\StatusBarTextProvider.cs">
using Sonorize.Services; // For PlaybackStateStatus

namespace Sonorize.ViewModels.Status;

public class StatusBarTextProvider
{
    private readonly PlaybackViewModel _playbackViewModel;
    private readonly LoopEditorViewModel _loopEditorViewModel;
    private readonly LibraryViewModel _libraryViewModel;

    public StatusBarTextProvider(
        PlaybackViewModel playbackViewModel,
        LoopEditorViewModel loopEditorViewModel,
        LibraryViewModel libraryViewModel)
    {
        _playbackViewModel = playbackViewModel;
        _loopEditorViewModel = loopEditorViewModel;
        _libraryViewModel = libraryViewModel;
    }

    public string GetCurrentStatusText()
    {
        string status;
        if (_playbackViewModel.HasCurrentSong)
        {
            string stateStr = _playbackViewModel.CurrentPlaybackStatus switch
            {
                PlaybackStateStatus.Playing => "Playing",
                PlaybackStateStatus.Paused => "Paused",
                PlaybackStateStatus.Stopped => "Stopped",
                _ => "Idle"
            };
            status = $"{stateStr}: {_playbackViewModel.CurrentSong?.Title ?? "Unknown Song"}";

            // Playback.CurrentSong is the same instance as LoopEditor's internal current song reference
            if (_loopEditorViewModel.IsCurrentLoopActiveUiBinding && _playbackViewModel.CurrentSong?.SavedLoop != null)
            {
                status += $" (Loop Active)";
            }

            string modeStatus = "";
            if (_playbackViewModel.ModeControls.ShuffleEnabled) // Corrected access
            {
                modeStatus += " | Shuffle";
            }
            modeStatus += _playbackViewModel.ModeControls.RepeatMode switch // Corrected access
            {
                RepeatMode.None => " | Do Nothing",
                RepeatMode.PlayOnce => " | Play Once",
                RepeatMode.RepeatOne => " | Repeat Song",
                RepeatMode.RepeatAll => " | Repeat All",
                _ => ""
            };

            if (!string.IsNullOrEmpty(modeStatus))
            {
                status += modeStatus;
            }
        }
        else
        {
            status = _libraryViewModel.LibraryStatusText;
        }
        return status;
    }
}
</file>

<file path="Source\ViewModels\ViewModelBase.cs">
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Sonorize.ViewModels;

public class ViewModelBase : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value))
        {
            return false;
        }

        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }

    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
</file>

<file path="Source\ViewModels\WaveformDisplayViewModel.cs">
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels;

public class WaveformDisplayViewModel : ViewModelBase
{
    private readonly PlaybackService _playbackService;
    private readonly WaveformService _waveformService;
    private Song? _currentSongForWaveform;
    private bool _isPanelVisible;

    public ObservableCollection<WaveformPoint> WaveformRenderData { get; } = new();
    
    public bool IsWaveformLoading
    {
        get;
        private set => SetProperty(ref field, value);
    }

    public WaveformDisplayViewModel(PlaybackService playbackService, WaveformService waveformService)
    {
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        _waveformService = waveformService ?? throw new ArgumentNullException(nameof(waveformService));

        _playbackService.PropertyChanged += PlaybackService_PropertyChanged;
        UpdateCurrentSongForWaveform(_playbackService.CurrentSong);
    }

    private async void PlaybackService_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(PlaybackService.CurrentSong))
        {
            await Dispatcher.UIThread.InvokeAsync(() =>
            {
                UpdateCurrentSongForWaveform(_playbackService.CurrentSong);
            });
        }
    }

    private void UpdateCurrentSongForWaveform(Song? newSong)
    {
        if (_currentSongForWaveform == newSong)
        {
            // If the song is the same, and panel is visible, ensure waveform is loaded if not already
            if (_isPanelVisible && newSong != null && !WaveformRenderData.Any() && !IsWaveformLoading)
            {
                Debug.WriteLine($"[WaveformDisplayVM] Panel visible for same song '{newSong.Title}', but no waveform. Triggering load.");
                _ = LoadWaveformInternalAsync(newSong);
            }
            return;
        }

        _currentSongForWaveform = newSong;
        WaveformRenderData.Clear(); // Clear data for the old song
        OnPropertyChanged(nameof(WaveformRenderData));

        if (_currentSongForWaveform != null && _isPanelVisible)
        {
            Debug.WriteLine($"[WaveformDisplayVM] Current song changed to '{_currentSongForWaveform.Title}' and panel is visible. Triggering load.");
            _ = LoadWaveformInternalAsync(_currentSongForWaveform);
        }
        else if (_currentSongForWaveform == null)
        {
            IsWaveformLoading = false; // Ensure loading stops if song becomes null
            Debug.WriteLine("[WaveformDisplayVM] Current song is null. Cleared waveform and loading state.");
        }
        else
        {
            Debug.WriteLine($"[WaveformDisplayVM] Current song changed to '{_currentSongForWaveform.Title}', but panel not visible. Load deferred.");
        }
    }

    public void SetPanelVisibility(bool isVisible)
    {
        _isPanelVisible = isVisible;
        Debug.WriteLine($"[WaveformDisplayVM] Panel visibility set to: {isVisible}");
        if (_isPanelVisible && _currentSongForWaveform != null && !WaveformRenderData.Any() && !IsWaveformLoading)
        {
            Debug.WriteLine($"[WaveformDisplayVM] Panel now visible for song '{_currentSongForWaveform.Title}'. Triggering waveform load.");
            _ = LoadWaveformInternalAsync(_currentSongForWaveform);
        }
        else if (!_isPanelVisible)
        {
            // Optionally, clear waveform data or cancel loading when panel is hidden
            // WaveformRenderData.Clear();
            // OnPropertyChanged(nameof(WaveformRenderData));
            // IsWaveformLoading = false; // If a load was in progress, it will complete but not update UI if song changes.
            // For now, just stop triggering new loads.
            Debug.WriteLine($"[WaveformDisplayVM] Panel hidden. Waveform loading deferred if song changes or panel re-opens.");
        }
    }

    private async Task LoadWaveformInternalAsync(Song songToLoad)
    {
        if (string.IsNullOrEmpty(songToLoad.FilePath))
        {
            Debug.WriteLine($"[WaveformDisplayVM] LoadWaveformInternalAsync skipped: Invalid path for song '{songToLoad.Title}'.");
            return;
        }

        // Defensive check: If already loading for this exact song instance, don't restart.
        // This might happen if SetPanelVisibility and CurrentSong change rapidly.
        if (IsWaveformLoading && _currentSongForWaveform == songToLoad)
        {
            Debug.WriteLine($"[WaveformDisplayVM] Already loading waveform for '{songToLoad.Title}'. Skipping redundant load request.");
            return;
        }

        IsWaveformLoading = true;
        WaveformRenderData.Clear(); // Clear previous data before loading new
        OnPropertyChanged(nameof(WaveformRenderData));

        try
        {
            Debug.WriteLine($"[WaveformDisplayVM] Requesting waveform from service for: {songToLoad.Title}");
            // Target points for the waveform control
            int targetPoints = 1000;
            var points = await _waveformService.GetWaveformAsync(songToLoad.FilePath, targetPoints);

            // Critical check: Ensure the song context hasn't changed *during* the async load
            // and that the panel is still meant to be visible.
            if (_currentSongForWaveform == songToLoad && _isPanelVisible)
            {
                await Dispatcher.UIThread.InvokeAsync(() =>
                {
                    WaveformRenderData.Clear(); // Ensure it's empty before adding new points
                    foreach (var p in points)
                    {
                        WaveformRenderData.Add(p);
                    }
                    OnPropertyChanged(nameof(WaveformRenderData));
                    Debug.WriteLine($"[WaveformDisplayVM] Waveform loaded and UI updated for: {songToLoad.Title}, {points.Count} points.");
                });
            }
            else
            {
                Debug.WriteLine($"[WaveformDisplayVM] Waveform for '{songToLoad.Title}' loaded, but context changed (current song: '{_currentSongForWaveform?.Title}', panel visible: {_isPanelVisible}). Discarding result.");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[WaveformDisplayVM] CRITICAL Error loading waveform for '{songToLoad.Title}': {ex.Message}");
            await Dispatcher.UIThread.InvokeAsync(() =>
            {
                WaveformRenderData.Clear(); // Clear on error
                OnPropertyChanged(nameof(WaveformRenderData));
            });
        }
        finally
        {
            // Ensure IsWaveformLoading is set to false only if this load operation was for the *still current* song
            // or if no song is current anymore.
            if (_currentSongForWaveform == songToLoad || _currentSongForWaveform == null)
            {
                IsWaveformLoading = false;
            }
            else
            {
                Debug.WriteLine($"[WaveformDisplayVM] Waveform load finished for '{songToLoad.Title}', but current song is '{_currentSongForWaveform?.Title}'. IsWaveformLoading might be true due to a new load.");
            }
        }
    }
}
</file>

<file path="Source\Views\BrushExtensions.cs">
// Path: Source/Views/MainView.cs
using System;
using Avalonia.Media;

namespace Sonorize.Views;

public static class BrushExtensions
{
    public static IBrush Multiply(this IBrush brush, double factor)
    {
        if (brush is ISolidColorBrush solidBrush)
        {
            var c = solidBrush.Color;
            return new SolidColorBrush(Color.FromArgb(c.A, (byte)Math.Clamp(c.R * factor, 0, 255), (byte)Math.Clamp(c.G * factor, 0, 255), (byte)Math.Clamp(c.B * factor, 0, 255)));
        }
        return brush;
    }
}
</file>

<file path="Source\Views\MainWindow.cs">
using System; // For EventArgs
using System.ComponentModel; // For PropertyChangedEventArgs
using System.Diagnostics; // For Debug
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Threading; // Required for Dispatcher
// Removed: using Avalonia.Media.Imaging; 
// Removed: using Avalonia.Styling;
// Removed: using Sonorize.Controls;
// Removed: using Sonorize.Converters;
using Sonorize.Models;
// Removed: using Sonorize.Services;
using Sonorize.ViewModels;
using Sonorize.Views.MainWindowControls;

namespace Sonorize.Views;
public class MainWindow : Window
{
    private readonly ThemeColors _theme;
    private ListBox _songListBox;
    private ListBox _artistsListBox;
    private ListBox _albumsListBox;
    private LibraryViewModel? _currentLibraryVM;
    private readonly SharedViewTemplates _sharedViewTemplates;
    private readonly MainTabViewControls _mainTabViewControls;


    public MainWindow(ThemeColors theme)
    {
        _theme = theme;
        _sharedViewTemplates = new SharedViewTemplates(_theme);
        _mainTabViewControls = new MainTabViewControls(_theme, _sharedViewTemplates);

        Title = "Sonorize";
        Width = 950;
        Height = 750;
        MinWidth = 700;
        MinHeight = 500;
        WindowStartupLocation = WindowStartupLocation.CenterScreen;
        Background = _theme.B_BackgroundColor;

        var mainGrid = new Grid
        {
            RowDefinitions =
            [
                new(GridLength.Auto),
                new(GridLength.Auto),
                new(GridLength.Star),
                new(GridLength.Auto),
                new(GridLength.Auto),
                new(GridLength.Auto)
            ]
        };

        var menu = MainMenu.Create(_theme, this);
        Grid.SetRow(menu, 0);
        mainGrid.Children.Add(menu);

        var searchBarPanel = SearchBarPanel.Create(_theme);
        Grid.SetRow(searchBarPanel, 1);
        mainGrid.Children.Add(searchBarPanel);

        var tabControl = _mainTabViewControls.CreateMainTabView(out _songListBox, out _artistsListBox, out _albumsListBox);
        Grid.SetRow(tabControl, 2);
        mainGrid.Children.Add(tabControl);

        var advancedPlaybackPanel = AdvancedPlaybackPanelControls.Create(_theme);
        advancedPlaybackPanel.Bind(Visual.IsVisibleProperty, new Binding("IsAdvancedPanelVisible"));
        Grid.SetRow(advancedPlaybackPanel, 3);
        mainGrid.Children.Add(advancedPlaybackPanel);

        var mainPlaybackControls = MainPlaybackControlsPanel.Create(_theme);
        Grid.SetRow(mainPlaybackControls, 4);
        mainGrid.Children.Add(mainPlaybackControls);

        var statusBar = CreateStatusBar();
        Grid.SetRow(statusBar, 5);
        mainGrid.Children.Add(statusBar);

        Content = mainGrid;

        this.DataContextChanged += MainWindow_DataContextChanged;
    }

    private void MainWindow_DataContextChanged(object? sender, EventArgs e)
    {
        // Previous LibraryVM cleanup
        if (_currentLibraryVM != null)
        {
            _currentLibraryVM.PropertyChanged -= LibraryViewModel_PropertyChanged;
            _sharedViewTemplates.SetLibraryViewModel(null); // Reset in shared templates
            _currentLibraryVM = null;
        }

        // New LibraryVM setup
        if (DataContext is MainWindowViewModel vm && vm.Library != null)
        {
            _currentLibraryVM = vm.Library;
            _currentLibraryVM.PropertyChanged += LibraryViewModel_PropertyChanged;
            _sharedViewTemplates.SetLibraryViewModel(_currentLibraryVM); // Set in shared templates

            // Apply initial display modes for each list
            ApplyListViewDisplayMode(_songListBox, _currentLibraryVM.LibraryViewMode, _sharedViewTemplates.DetailedSongTemplate, _sharedViewTemplates.CompactSongTemplate, _sharedViewTemplates.GridSongTemplate);
            ApplyListViewDisplayMode(_artistsListBox, _currentLibraryVM.ArtistViewMode, _sharedViewTemplates.DetailedArtistTemplate, _sharedViewTemplates.CompactArtistTemplate, _sharedViewTemplates.GridArtistTemplate);
            ApplyListViewDisplayMode(_albumsListBox, _currentLibraryVM.AlbumViewMode, _sharedViewTemplates.DetailedAlbumTemplate, _sharedViewTemplates.CompactAlbumTemplate, _sharedViewTemplates.GridAlbumTemplate);
        }
    }

    private void LibraryViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (sender is LibraryViewModel lvm)
        {
            if (e.PropertyName == nameof(LibraryViewModel.LibraryViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_songListBox, lvm.LibraryViewMode, _sharedViewTemplates.DetailedSongTemplate, _sharedViewTemplates.CompactSongTemplate, _sharedViewTemplates.GridSongTemplate));
            }
            else if (e.PropertyName == nameof(LibraryViewModel.ArtistViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_artistsListBox, lvm.ArtistViewMode, _sharedViewTemplates.DetailedArtistTemplate, _sharedViewTemplates.CompactArtistTemplate, _sharedViewTemplates.GridArtistTemplate));
            }
            else if (e.PropertyName == nameof(LibraryViewModel.AlbumViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_albumsListBox, lvm.AlbumViewMode, _sharedViewTemplates.DetailedAlbumTemplate, _sharedViewTemplates.CompactAlbumTemplate, _sharedViewTemplates.GridAlbumTemplate));
            }
        }
    }

    // Renamed for clarity
    private void ApplyListViewDisplayMode(ListBox listBox, SongDisplayMode mode, IDataTemplate detailedTemplate, IDataTemplate compactTemplate, IDataTemplate gridTemplate)
    {
        if (listBox == null)
        {
            Debug.WriteLine($"[MainWindow] ApplyListViewDisplayMode called but ListBox target is null. Mode: {mode}");
            return;
        }
        _mainTabViewControls.UpdateListViewMode(mode, listBox, detailedTemplate, compactTemplate, gridTemplate);
    }

    private Border CreateStatusBar()
    {
        var statusBar = new Border { Background = _theme.B_SlightlyLighterBackground, Padding = new Thickness(10, 4), Height = 26 };
        var statusBarText = new TextBlock { Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center, FontSize = 11 };
        statusBarText.Bind(TextBlock.TextProperty, new Binding("StatusBarText"));
        statusBar.Child = statusBarText;
        return statusBar;
    }

    protected override void OnClosed(EventArgs e)
    {
        if (_currentLibraryVM != null)
        {
            _currentLibraryVM.PropertyChanged -= LibraryViewModel_PropertyChanged;
            _sharedViewTemplates.SetLibraryViewModel(null); // Also clear on close
        }
        base.OnClosed(e);
    }
}
</file>

<file path="Source\Views\SettingsWindow.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // Required for Style
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Styling;
using Sonorize.Converters; // For EnumToBooleanConverter
using Sonorize.Models;
using Sonorize.ViewModels;
using Sonorize.Views.SettingsWindowControls; // Added for new panel builders

namespace Sonorize.Views;

public class SettingsWindow : Window
{
    private readonly ThemeColors _theme;

    public SettingsWindow(ThemeColors currentDisplayTheme)
    {
        _theme = currentDisplayTheme;

        Title = "Sonorize Settings"; Width = 650; Height = 500; MinWidth = 600; MinHeight = 450;
        CanResize = true; WindowStartupLocation = WindowStartupLocation.CenterOwner; Icon = null;
        Background = _theme.B_SlightlyLighterBackground;

        // Style for the TextBox part of NumericUpDown controls in this window
        this.Styles.Add(new Style(s => s.OfType<NumericUpDown>().Descendant().OfType<TextBox>())
        {
            Setters =
            {
                new Setter(TextBox.ForegroundProperty, _theme.B_TextColor),
                new Setter(TextBox.BackgroundProperty, Brushes.Transparent),
                new Setter(TextBox.CaretBrushProperty, _theme.B_TextColor),
                new Setter(TextBox.BorderThicknessProperty, new Thickness(0)),
                new Setter(TextBox.VerticalContentAlignmentProperty, VerticalAlignment.Center),
                new Setter(TextBox.HorizontalContentAlignmentProperty, HorizontalAlignment.Center),
                new Setter(TextBox.PaddingProperty, new Thickness(10,0)) // Increased horizontal padding
            }
        });

        var mainGrid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitions("150, *"), // Left menu, Right content
            RowDefinitions = new RowDefinitions("*, Auto")      // Content area, Bottom buttons
        };

        // --- Left Navigation Menu ---
        var menuPanelContainer = SettingsMenuPanel.Create(_theme);
        Grid.SetColumn(menuPanelContainer, 0);
        Grid.SetRow(menuPanelContainer, 0);
        mainGrid.Children.Add(menuPanelContainer);

        // --- Right Content Area ---
        var contentArea = CreateContentAreaPanel(); // This method remains to manage visibility
        Grid.SetColumn(contentArea, 1);
        Grid.SetRow(contentArea, 0);
        mainGrid.Children.Add(contentArea);

        // --- Bottom Buttons Panel ---
        var buttonsPanel = SettingsButtonPanel.Create(_theme, this);
        Grid.SetColumnSpan(buttonsPanel, 2); // Span across both columns
        Grid.SetColumn(buttonsPanel, 0);
        Grid.SetRow(buttonsPanel, 1);
        mainGrid.Children.Add(buttonsPanel);

        Content = mainGrid;
    }

    private Panel CreateContentAreaPanel()
    {
        var contentPanel = new Panel { Margin = new Thickness(15) };

        var directoriesSettingsPanel = DirectoriesSettingsPanel.Create(_theme, this);
        directoriesSettingsPanel.Bind(Visual.IsVisibleProperty, new Binding("CurrentSettingsViewSection")
        {
            Converter = EnumToBooleanConverter.Instance,
            ConverterParameter = SettingsViewSection.Directories
        });

        var themeSettingsPanel = ThemeSettingsPanel.Create(_theme);
        themeSettingsPanel.Bind(Visual.IsVisibleProperty, new Binding("CurrentSettingsViewSection")
        {
            Converter = EnumToBooleanConverter.Instance,
            ConverterParameter = SettingsViewSection.Theme
        });

        var scrobblingSettingsPanel = ScrobblingSettingsPanel.Create(_theme);
        scrobblingSettingsPanel.Bind(Visual.IsVisibleProperty, new Binding("CurrentSettingsViewSection")
        {
            Converter = EnumToBooleanConverter.Instance,
            ConverterParameter = SettingsViewSection.Scrobbling
        });

        contentPanel.Children.Add(directoriesSettingsPanel);
        contentPanel.Children.Add(themeSettingsPanel);
        contentPanel.Children.Add(scrobblingSettingsPanel);

        return contentPanel;
    }
}
</file>

<file path="Source\Services\Application\ApplicationInteractionService.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class ApplicationInteractionService
{
    private readonly SettingsService _settingsService;
    private readonly SettingsChangeProcessorService _settingsChangeProcessorService;
    private readonly ThemeColors _currentTheme;

    public ApplicationInteractionService(
        SettingsService settingsService,
        SettingsChangeProcessorService settingsChangeProcessorService,
        ThemeColors currentTheme)
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        _settingsChangeProcessorService = settingsChangeProcessorService ?? throw new ArgumentNullException(nameof(settingsChangeProcessorService));
        _currentTheme = currentTheme ?? throw new ArgumentNullException(nameof(currentTheme));
    }

    public async Task<(List<string> statusMessages, bool settingsChanged)> HandleOpenSettingsDialogAsync(Window owner)
    {
        var currentSettingsBeforeDialog = _settingsService.LoadSettings();
        var settingsVM = new SettingsViewModel(_settingsService);
        var settingsDialog = new Sonorize.Views.SettingsWindow(_currentTheme) { DataContext = settingsVM };

        await settingsDialog.ShowDialog(owner);

        List<string> statusMessages = [];
        bool overallSettingsChanged = false;

        if (settingsVM.SettingsChanged)
        {
            Debug.WriteLine("[AppInteractionService] Settings changed detected after dialog closed. Processing changes...");
            var newSettingsAfterDialog = _settingsService.LoadSettings(); // Get the latest saved settings

            statusMessages = await _settingsChangeProcessorService.ProcessChangesAndGetStatus(
                currentSettingsBeforeDialog,
                newSettingsAfterDialog
            );
            overallSettingsChanged = true; // Indicate that settings were processed
        }
        else
        {
            Debug.WriteLine("[AppInteractionService] Settings dialog closed, no changes reported by SettingsViewModel.");
        }
        return (statusMessages, overallSettingsChanged);
    }

    public async Task<(bool directoryAddedAndLibraryRefreshNeeded, string statusMessage)> HandleAddMusicDirectoryAsync(Window owner)
    {
        var result = await owner.StorageProvider.OpenFolderPickerAsync(new FolderPickerOpenOptions { Title = "Select Music Directory", AllowMultiple = false });

        if (result == null || result.Count == 0)
        {
            Debug.WriteLine("[AppInteractionService] Folder picker cancelled or returned no results.");
            return (false, "Folder selection cancelled.");
        }

        string? folderPath = null;
        try
        {
            folderPath = Path.GetFullPath(result[0].Path.LocalPath);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[AppInteractionService] Error getting full path for selected directory: {ex.Message}");
            return (false, "Error getting path for selected directory.");
        }

        if (string.IsNullOrEmpty(folderPath) || !Directory.Exists(folderPath))
        {
            Debug.WriteLine($"[AppInteractionService] Selected directory path is invalid or does not exist: {folderPath}");
            return (false, "Invalid directory selected.");
        }

        var settings = _settingsService.LoadSettings();
        if (!settings.MusicDirectories.Any(d => string.Equals(d, folderPath, StringComparison.OrdinalIgnoreCase)))
        {
            settings.MusicDirectories.Add(folderPath);
            _settingsService.SaveSettings(settings);
            Debug.WriteLine($"[AppInteractionService] Added new directory: {folderPath}. Library refresh needed.");
            return (true, $"Added directory: {Path.GetFileName(folderPath)}. Library refreshing...");
        }
        else
        {
            Debug.WriteLine($"[AppInteractionService] Directory already exists: {folderPath}");
            return (false, "Directory already in library.");
        }
    }
}
</file>

<file path="Source\Services\Application\ApplicationServicesBootstrapper.cs">
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class ApplicationServicesBootstrapper
{
    public MainWindowViewModel Bootstrap(SettingsService settingsService, ThemeColors currentCustomTheme)
    {
        // Create all services
        var lastfmAuthenticatorService = new LastfmAuthenticatorService(settingsService);
        var scrobblingService = new ScrobblingService(settingsService, lastfmAuthenticatorService);
        var playbackService = new PlaybackService(scrobblingService);
        var loopDataService = new LoopDataService();
        var thumbnailService = new ThumbnailService();
        var songFactory = new SongFactory(loopDataService); // Create SongFactory
        var musicLibraryService = new MusicLibraryService(loopDataService, thumbnailService, songFactory); // Inject SongFactory
        var waveformService = new WaveformService();

        // Create MainWindowViewModel
        var mainWindowViewModel = new MainWindowViewModel(
            settingsService,
            musicLibraryService,
            playbackService,
            currentCustomTheme,
            waveformService,
            loopDataService,
            scrobblingService);

        return mainWindowViewModel;
    }
}
</file>

<file path="Source\Services\Playback\NAudioEffectsProcessor.cs">
using System;
using System.Diagnostics;
using NAudio.Wave;
using NAudio.Wave.SampleProviders;
using SoundTouch.Net.NAudioSupport;

namespace Sonorize.Services;

public class NAudioEffectsProcessor : IDisposable
{
    private SoundTouchWaveProvider? _soundTouch;
    private SmbPitchShiftingSampleProvider? _pitchShifter;
    private SampleToWaveProvider? _sampleToWaveProvider;

    private ISampleProvider? _outputProvider;

    public ISampleProvider OutputProvider
    {
        get
        {
            if (_outputProvider == null)
            {
                throw new InvalidOperationException("Audio effects processor has not been initialized.");
            }
            return _outputProvider;
        }
    }

    private float _tempo = 1.0f;
    public float Tempo
    {
        get => _tempo;
        set
        {
            if (Math.Abs(_tempo - value) > float.Epsilon)
            {
                _tempo = value;
                if (_soundTouch != null)
                {
                    try
                    {
                        _soundTouch.Tempo = _tempo;
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[EffectsProcessor] Error setting SoundTouch Tempo: {ex.Message}");
                    }
                }
            }
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            if (Math.Abs(_pitchSemitones - value) > float.Epsilon)
            {
                _pitchSemitones = value;
                if (_pitchShifter != null)
                {
                    try
                    {
                        _pitchShifter.PitchFactor = (float)Math.Pow(2, _pitchSemitones / 12.0);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[EffectsProcessor] Error setting PitchShifter PitchFactor: {ex.Message}");
                    }
                }
            }
        }
    }

    public NAudioEffectsProcessor()
    {
    }

    public void Initialize(ISampleProvider sourceProvider)
    {
        Dispose(disposing: true);

        if (sourceProvider == null)
        {
            throw new ArgumentNullException(nameof(sourceProvider));
        }

        try
        {
            ISampleProvider monoSampleProvider = sourceProvider.ToMono();

            _sampleToWaveProvider = new SampleToWaveProvider(monoSampleProvider);

            _soundTouch = new SoundTouchWaveProvider(_sampleToWaveProvider);
            _soundTouch.Tempo = _tempo;
            _soundTouch.Rate = 1.0f;
            _soundTouch.Pitch = 1.0f;

            ISampleProvider soundTouchAsSampleProvider = _soundTouch.ToSampleProvider();

            _pitchShifter = new SmbPitchShiftingSampleProvider(soundTouchAsSampleProvider);
            _pitchShifter.PitchFactor = (float)Math.Pow(2, _pitchSemitones / 12.0);

            _outputProvider = _pitchShifter;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[EffectsProcessor] CRITICAL ERROR during effects pipeline initialization: {ex.ToString()}");
            Dispose(disposing: true);
            _outputProvider = null;
            throw;
        }
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _sampleToWaveProvider = null;
            _soundTouch = null;
            _pitchShifter = null;
            _outputProvider = null;
        }
    }

    ~NAudioEffectsProcessor()
    {
        Dispose(disposing: false);
    }
}
</file>

<file path="Source\Services\Playback\NAudioEngineController.cs">
using System;
using System.Diagnostics;
using System.IO;
using NAudio.Wave;

namespace Sonorize.Services.Playback;

public class NAudioEngineController : IDisposable
{
    private NAudioPlaybackEngine? _playbackEngine;

    public event EventHandler<StoppedEventArgs>? PlaybackStopped;

    public TimeSpan CurrentPosition => _playbackEngine?.CurrentPosition ?? TimeSpan.Zero;
    public TimeSpan CurrentSongDuration => _playbackEngine?.CurrentSongDuration ?? TimeSpan.Zero;

    public PlaybackStateStatus CurrentPlaybackStatus => _playbackEngine?.CurrentPlaybackStatus ?? PlaybackStateStatus.Stopped;

    public float PlaybackRate
    {
        get;
        set
        {
            field = value;

            if (_playbackEngine is null)
            {
                return;
            }

            _playbackEngine.PlaybackRate = value;
        }
    } = 1.0f;

    public float PitchSemitones
    {
        get;
        set
        {
            field = value;

            if (_playbackEngine is null)
            {
                return;
            }

            _playbackEngine.PitchSemitones = value;
        }
    } = 0f;

    public NAudioEngineController()
    {
        Debug.WriteLine("[EngineController] Constructor called.");
    }

    public void Load(string filePath)
    {
        Debug.WriteLine($"[EngineController] Load requested for: {Path.GetFileName(filePath)}");
        DisposePreviousEngine(); // Ensure any existing engine is disposed before loading a new one

        if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
        {
            Debug.WriteLine($"[EngineController] Load failed: File path is invalid or file does not exist at '{filePath}'.");
            throw new FileNotFoundException("Audio file not found or path invalid.", filePath);
        }

        try
        {
            _playbackEngine = new NAudioPlaybackEngine();
            _playbackEngine.PlaybackStopped += OnEnginePlaybackStopped;
            _playbackEngine.PlaybackRate = this.PlaybackRate; // Apply current rate
            _playbackEngine.PitchSemitones = this.PitchSemitones; // Apply current pitch
            _playbackEngine.Load(filePath);
            Debug.WriteLine($"[EngineController] Engine loaded successfully for: {Path.GetFileName(filePath)}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[EngineController] CRITICAL ERROR during engine Load for '{filePath}': {ex.ToString()}");
            DisposePreviousEngine(); // Cleanup on failure
            throw; // Re-throw to allow higher levels to handle
        }
    }

    private void OnEnginePlaybackStopped(object? sender, StoppedEventArgs e)
    {
        Debug.WriteLine("[EngineController] Internal OnEnginePlaybackStopped. Relaying event.");
        PlaybackStopped?.Invoke(this, e);
    }

    public void Play()
    {
        if (_playbackEngine == null)
        {
            Debug.WriteLine("[EngineController] Play ignored: Engine not loaded.");
            return;
        }
        _playbackEngine.Play();
        Debug.WriteLine($"[EngineController] Play initiated. Engine state: {_playbackEngine.CurrentPlaybackStatus}");
    }

    public void Pause()
    {
        if (_playbackEngine == null)
        {
            Debug.WriteLine("[EngineController] Pause ignored: Engine not loaded.");
            return;
        }
        _playbackEngine.Pause();
        Debug.WriteLine($"[EngineController] Pause initiated. Engine state: {_playbackEngine.CurrentPlaybackStatus}");
    }

    public void Stop()
    {
        if (_playbackEngine == null)
        {
            Debug.WriteLine("[EngineController] Stop ignored: Engine not loaded.");
            // If no engine, there's nothing to stop that would raise an event.
            // If an event is expected even without an engine, it needs to be simulated.
            // For now, assume Stop only applies if an engine exists.
            return;
        }
        _playbackEngine.Stop(); // This will trigger the engine's PlaybackStopped event, then ours
        Debug.WriteLine("[EngineController] Stop initiated on engine.");
    }

    public void Seek(TimeSpan position)
    {
        if (_playbackEngine == null)
        {
            Debug.WriteLine("[EngineController] Seek ignored: Engine not loaded.");
            return;
        }
        _playbackEngine.Seek(position);
        Debug.WriteLine($"[EngineController] Seek initiated to {position}.");
    }

    private void DisposePreviousEngine()
    {
        if (_playbackEngine != null)
        {
            Debug.WriteLine("[EngineController] Disposing previous engine instance.");
            _playbackEngine.PlaybackStopped -= OnEnginePlaybackStopped;
            _playbackEngine.Dispose();
            _playbackEngine = null;
        }
    }

    public void Dispose()
    {
        Debug.WriteLine("[EngineController] Dispose() called.");
        DisposePreviousEngine();
        GC.SuppressFinalize(this);
        Debug.WriteLine("[EngineController] Dispose() completed.");
    }

    ~NAudioEngineController()
    {
        Debug.WriteLine("[EngineController] Finalizer called.");
        Dispose();
    }
}
</file>

<file path="Source\Services\Playback\NAudioPlaybackEngine.cs">
using System;
using System.Diagnostics;
using System.IO;
using NAudio.Wave;

namespace Sonorize.Services;

public class NAudioPlaybackEngine : IDisposable
{
    private IWavePlayer? _waveOutDevice;
    private AudioFileReader? audioFileReader;
    private NAudioEffectsProcessor? _effectsProcessor;

    private IWavePlayer? _waveOutDeviceInstanceForEvent;

    public event EventHandler<StoppedEventArgs>? PlaybackStopped;

    public TimeSpan CurrentPosition
    {
        get => audioFileReader?.CurrentTime ?? TimeSpan.Zero;
        set
        {
            if (audioFileReader != null) audioFileReader.CurrentTime = value;
            else Debug.WriteLine("[Engine] Attempted to set CurrentPosition on null audioFileReader.");
        }
    }

    public TimeSpan CurrentSongDuration => audioFileReader?.TotalTime ?? TimeSpan.Zero;

    public PlaybackStateStatus CurrentPlaybackStatus
    {
        get
        {
            if (_waveOutDevice == null) return PlaybackStateStatus.Stopped;
            return _waveOutDevice.PlaybackState switch
            {
                NAudio.Wave.PlaybackState.Playing => PlaybackStateStatus.Playing,
                NAudio.Wave.PlaybackState.Paused => PlaybackStateStatus.Paused,
                NAudio.Wave.PlaybackState.Stopped => PlaybackStateStatus.Stopped,
                _ => PlaybackStateStatus.Stopped
            };
        }
    }

    private float _playbackRate = 1.0f;
    public float PlaybackRate
    {
        get => _playbackRate;
        set
        {
            _playbackRate = value;
            if (_effectsProcessor != null) _effectsProcessor.Tempo = value;
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            _pitchSemitones = value;
            if (_effectsProcessor != null) _effectsProcessor.PitchSemitones = value;
        }
    }


    public NAudioPlaybackEngine()
    {
        Debug.WriteLine("[Engine] Constructor called.");
    }

    public void Load(string filePath)
    {
        Debug.WriteLine($"[Engine] Load called for: {Path.GetFileName(filePath)}");

        if (!File.Exists(filePath))
        {
            Debug.WriteLine($"[Engine] Load failed: File not found at {filePath}");
            throw new FileNotFoundException("Audio file not found.", filePath);
        }

        Dispose(disposing: true);

        try
        {
            audioFileReader = new AudioFileReader(filePath);
            Debug.WriteLine($"[Engine] Loaded AudioFileReader. Channels: {audioFileReader.WaveFormat.Channels}, SampleRate: {audioFileReader.WaveFormat.SampleRate}, Duration: {audioFileReader.TotalTime}");

            _effectsProcessor = new NAudioEffectsProcessor();
            _effectsProcessor.Initialize(audioFileReader.ToSampleProvider());

            _effectsProcessor.Tempo = PlaybackRate;
            _effectsProcessor.PitchSemitones = PitchSemitones;
            Debug.WriteLine($"[Engine] Effects Processor initialized. Applied Tempo: {_effectsProcessor.Tempo}, Pitch: {_effectsProcessor.PitchSemitones}");

            _waveOutDevice = new WaveOutEvent();
            _waveOutDeviceInstanceForEvent = _waveOutDevice;
            _waveOutDevice.PlaybackStopped += OnWaveOutPlaybackStopped;

            _waveOutDevice.Init(_effectsProcessor.OutputProvider.ToWaveProvider());

            Debug.WriteLine($"[Engine] NAudio pipeline loaded successfully for: {Path.GetFileName(filePath)}.");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[Engine] CRITICAL ERROR during NAudio pipeline Load for {Path.GetFileName(filePath)}: {ex.ToString()}");
            Dispose(disposing: true);
            throw new Exception($"Failed to load audio pipeline for {Path.GetFileName(filePath)}", ex);
        }
    }

    public void Play()
    {
        Debug.WriteLine("[Engine] Play requested.");
        if (_waveOutDevice != null && (_waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Paused || _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Stopped))
        {
            Debug.WriteLine("[Engine] Calling device.Play().");
            try
            {
                _waveOutDevice.Play();
                Debug.WriteLine($"[Engine] Playback started/resumed. State: {CurrentPlaybackStatus}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Play(): {ex.Message}");
            }
        }
        else if (_waveOutDevice != null && _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Playing)
        {
            Debug.WriteLine("[Engine] Already playing. Doing nothing.");
        }
        else
        {
            Debug.WriteLine("[Engine] Cannot Play: Device not initialized.");
        }
    }

    public void Pause()
    {
        Debug.WriteLine("[Engine] Pause requested.");
        if (_waveOutDevice != null && _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Playing)
        {
            Debug.WriteLine("[Engine] Calling device.Pause().");
            try
            {
                _waveOutDevice.Pause();
                Debug.WriteLine($"[Engine] Playback paused. State: {CurrentPlaybackStatus}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Pause(): {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine($"[Engine] Cannot Pause: Device state is {_waveOutDevice?.PlaybackState ?? NAudio.Wave.PlaybackState.Stopped}.");
        }
    }

    public void Stop()
    {
        Debug.WriteLine("[Engine] Stop requested.");
        if (_waveOutDevice != null && _waveOutDevice.PlaybackState != NAudio.Wave.PlaybackState.Stopped)
        {
            Debug.WriteLine("[Engine] Calling device.Stop().");
            try
            {
                _waveOutDevice.Stop();
                Debug.WriteLine($"[Engine] Stop initiated. Device state: {_waveOutDevice?.PlaybackState}. PlaybackStopped event should follow.");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Stop(): {ex.Message}. PlaybackStopped event may not fire.");
            }
        }
        else
        {
            Debug.WriteLine("[Engine] Already stopped or not initialized. Doing nothing.");
        }
    }

    public void Seek(TimeSpan position)
    {
        Debug.WriteLine($"[Engine] Seek requested to {position:mm\\:ss\\.ff}.");
        if (audioFileReader != null)
        {
            try
            {
                audioFileReader.CurrentTime = position;
                Debug.WriteLine($"[Engine] Seek successful. Actual position: {audioFileReader.CurrentTime:mm\\:ss\\.ff}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during audioFileReader.CurrentTime = {position:mm\\:ss\\.ff}: {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine("[Engine] Cannot Seek: AudioFileReader not initialized.");
        }
    }

    private void OnWaveOutPlaybackStopped(object? sender, StoppedEventArgs e)
    {
        if (sender == _waveOutDeviceInstanceForEvent)
        {
            Debug.WriteLine("[Engine] OnWaveOutPlaybackStopped event received from current device.");
            PlaybackStopped?.Invoke(this, e);
        }
        else
        {
            Debug.WriteLine("[Engine] OnWaveOutPlaybackStopped event received from old device instance. Ignoring.");
        }
    }


    public void Dispose()
    {
        Debug.WriteLine("[Engine] Dispose() called.");
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
        Debug.WriteLine("[Engine] Dispose() completed.");
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_waveOutDevice != null && _waveOutDeviceInstanceForEvent == _waveOutDevice)
            {
                _waveOutDevice.PlaybackStopped -= OnWaveOutPlaybackStopped;
                Debug.WriteLine("[Engine] Detached PlaybackStopped handler.");
            }
            _waveOutDeviceInstanceForEvent = null;

            if (_waveOutDevice != null)
            {
                Debug.WriteLine($"[Engine] Disposing WaveOutDevice (State: {_waveOutDevice.PlaybackState}).");
                try { _waveOutDevice.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing WaveOutDevice: {ex.Message}"); }
                _waveOutDevice = null;
            }

            if (_effectsProcessor != null)
            {
                Debug.WriteLine("[Engine] Disposing Effects Processor.");
                try { _effectsProcessor.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing Effects Processor: {ex.Message}"); }
                _effectsProcessor = null;
            }

            if (audioFileReader != null)
            {
                Debug.WriteLine("[Engine] Disposing AudioFileReader.");
                try { audioFileReader.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing AudioFileReader: {ex.Message}"); }
                audioFileReader = null;
            }
        }
    }

    ~NAudioPlaybackEngine()
    {
        Debug.WriteLine("[Engine] Finalizer called for NAudioPlaybackEngine.");
        Dispose(disposing: false);
        Debug.WriteLine("[Engine] Finalizer completed for NAudioPlaybackEngine.");
    }
}
</file>

<file path="Source\Services\Playback\PlaybackCompletionHandler.cs">
using System;
using System.Diagnostics;
using Sonorize.Models;
using NAudio.Wave; // Required for StoppedEventArgs

namespace Sonorize.Services.Playback;

public class PlaybackCompletionHandler
{
    private readonly PlaybackSessionManager _sessionManager;
    private readonly ScrobblingService _scrobblingService;

    public PlaybackCompletionHandler(PlaybackSessionManager sessionManager, ScrobblingService scrobblingService)
    {
        _sessionManager = sessionManager ?? throw new ArgumentNullException(nameof(sessionManager));
        _scrobblingService = scrobblingService ?? throw new ArgumentNullException(nameof(scrobblingService));
    }

    public void Handle(
        StoppedEventArgs eventArgs,
        Song? songThatJustStopped,
        TimeSpan actualStoppedPosition,
        TimeSpan actualStoppedSongDuration,
        bool wasExplicitlyStopped)
    {
        Debug.WriteLine($"[PlaybackCompletionHandler] Handling playback stop for: {songThatJustStopped?.Title ?? "No Song"}. ExplicitStop: {wasExplicitlyStopped}, Error: {eventArgs.Exception != null}");

        _sessionManager.StopUiUpdateMonitor();

        if (eventArgs.Exception != null)
        {
            Debug.WriteLine($"[PlaybackCompletionHandler] Playback stopped due to error: {eventArgs.Exception.Message}. Finalizing state to Stopped.");
            TryScrobble(songThatJustStopped, actualStoppedPosition);
            _sessionManager.FinalizeCurrentSong(null);
        }
        else
        {
            bool isNearEndOfFile = (actualStoppedSongDuration > TimeSpan.Zero) &&
                                   (actualStoppedPosition >= actualStoppedSongDuration - TimeSpan.FromMilliseconds(500));

            Debug.WriteLine($"[PlaybackCompletionHandler] Clean Stop. ExplicitStopReq: {wasExplicitlyStopped}. NearEnd: {isNearEndOfFile}. Pos: {actualStoppedPosition:mm\\:ss\\.ff}, Dur: {actualStoppedSongDuration:mm\\:ss\\.ff}");

            if (wasExplicitlyStopped)
            {
                Debug.WriteLine("[PlaybackCompletionHandler] Playback stopped by explicit user/app command. Finalizing.");
                TryScrobble(songThatJustStopped, actualStoppedPosition);
                _sessionManager.FinalizeCurrentSong(null);
            }
            else if (isNearEndOfFile)
            {
                Debug.WriteLine("[PlaybackCompletionHandler] Playback stopped naturally (end of file).");
                TryScrobble(songThatJustStopped, actualStoppedSongDuration);
                _sessionManager.UpdateStateForNaturalPlaybackEnd();
                _sessionManager.TriggerSessionEndedNaturally();
            }
            else
            {
                Debug.WriteLine("[PlaybackCompletionHandler] Playback stopped (not error, not explicit, not EOF). Scrobbling and stopping.");
                TryScrobble(songThatJustStopped, actualStoppedPosition);
                _sessionManager.FinalizeCurrentSong(null);
            }
        }

        if (_sessionManager.GetCurrentSongForCompletion() == null)
        {
            _sessionManager.SetPlaybackState(false, PlaybackStateStatus.Stopped);
        }

        _sessionManager.ResetExplicitStopFlag();
        Debug.WriteLine($"[PlaybackCompletionHandler] Handle finishes. CurrentSong after handling: {_sessionManager.GetCurrentSongForCompletion()?.Title ?? "null"}");
    }

    private async void TryScrobble(Song? song, TimeSpan playedPosition)
    {
        if (song == null) return;
        Debug.WriteLine($"[PlaybackCompletionHandler] TryScrobble called for '{song.Title}' at {playedPosition}.");
        if (_scrobblingService.ShouldScrobble(song, playedPosition))
        {
            await _scrobblingService.ScrobbleAsync(song, DateTime.UtcNow).ConfigureAwait(false);
        }
    }
}
</file>

<file path="Source\Services\Playback\PlaybackEngineCoordinator.cs">
using System;
using System.Diagnostics;
using System.IO;
using NAudio.Wave;
using Sonorize.Models;

namespace Sonorize.Services.Playback;

public class PlaybackEngineCoordinator : IDisposable
{
    private readonly NAudioEngineController _engineController;
    private readonly PlaybackLoopHandler _loopHandler;
    private readonly PlaybackMonitor _playbackMonitor;
    private Song? _currentSong;

    public event EventHandler<StoppedEventArgs>? EnginePlaybackStopped;
    public event EventHandler<PositionEventArgs>? EnginePositionUpdated;

    public TimeSpan CurrentPosition => _engineController.CurrentPosition;
    public TimeSpan CurrentSongDuration => _engineController.CurrentSongDuration;
    public PlaybackStateStatus CurrentPlaybackStatus => _engineController.CurrentPlaybackStatus;

    public PlaybackEngineCoordinator(NAudioEngineController engineController, PlaybackLoopHandler loopHandler, PlaybackMonitor playbackMonitor)
    {
        _engineController = engineController ?? throw new ArgumentNullException(nameof(engineController));
        _loopHandler = loopHandler ?? throw new ArgumentNullException(nameof(loopHandler));
        _playbackMonitor = playbackMonitor ?? throw new ArgumentNullException(nameof(playbackMonitor));

        _engineController.PlaybackStopped += OnEngineControllerPlaybackStoppedRelay;
        Debug.WriteLine("[PlaybackEngineCoordinator] Initialized.");
    }

    private void OnEngineControllerPlaybackStoppedRelay(object? sender, StoppedEventArgs e)
    {
        EnginePlaybackStopped?.Invoke(this, e);
    }

    private void OnMonitorPositionUpdate(TimeSpan position, TimeSpan duration)
    {
        EnginePositionUpdated?.Invoke(this, new PositionEventArgs(position, duration));
    }

    public void SetSong(Song? song)
    {
        _currentSong = song;
        _loopHandler.UpdateCurrentSong(song);
        Debug.WriteLine($"[PlaybackEngineCoordinator] SetSong: {song?.Title ?? "null"}");
    }

    public bool Load(string filePath, float rate, float pitch)
    {
        Debug.WriteLine($"[PlaybackEngineCoordinator] Load called for: {Path.GetFileName(filePath)}");
        try
        {
            _engineController.PlaybackRate = rate;
            _engineController.PitchSemitones = pitch;
            _engineController.Load(filePath);
            return true;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[PlaybackEngineCoordinator] Error loading: {ex.Message}");
            return false;
        }
    }

    public void Play(bool startMonitor)
    {
        if (_currentSong == null)
        {
            Debug.WriteLine("[PlaybackEngineCoordinator] Play called but no current song. Aborting.");
            return;
        }

        TimeSpan initialPosition = _loopHandler.GetInitialPlaybackPosition(_engineController.CurrentSongDuration);
        if (initialPosition > TimeSpan.Zero && initialPosition < _engineController.CurrentSongDuration)
        {
            _engineController.Seek(initialPosition);
        }
        _engineController.Play();
        if (startMonitor)
        {
            _playbackMonitor.Start(_currentSong, OnMonitorPositionUpdate);
        }
        Debug.WriteLine($"[PlaybackEngineCoordinator] Play initiated for {_currentSong.Title}. Monitor started: {startMonitor}");
    }

    public void Pause()
    {
        _playbackMonitor.Stop();
        _engineController.Pause();
        Debug.WriteLine("[PlaybackEngineCoordinator] Pause initiated.");
    }

    public void Resume(bool startMonitor)
    {
        if (_currentSong == null)
        {
            Debug.WriteLine("[PlaybackEngineCoordinator] Resume called but no current song. Aborting.");
            return;
        }
        _engineController.Play(); // NAudio handles resuming from paused or re-playing from stopped if applicable
        if (startMonitor)
        {
            _playbackMonitor.Start(_currentSong, OnMonitorPositionUpdate);
        }
        Debug.WriteLine($"[PlaybackEngineCoordinator] Resume initiated for {_currentSong.Title}. Monitor started: {startMonitor}");
    }

    public void Stop()
    {
        _playbackMonitor.Stop();
        _engineController.Stop(); // This will trigger the EnginePlaybackStopped event
        Debug.WriteLine("[PlaybackEngineCoordinator] Stop initiated.");
    }

    public void Seek(TimeSpan requestedPosition)
    {
        if (_currentSong == null || _engineController.CurrentSongDuration == TimeSpan.Zero) return;

        TimeSpan targetPosition = _loopHandler.GetAdjustedSeekPosition(requestedPosition, _engineController.CurrentSongDuration);

        var totalMs = _engineController.CurrentSongDuration.TotalMilliseconds;
        var seekMarginMs = totalMs > 200 ? 100 : (totalMs > 0 ? Math.Min(totalMs / 2, 50) : 0);
        var maxSeekablePosition = TimeSpan.FromMilliseconds(totalMs - seekMarginMs);
        if (maxSeekablePosition < TimeSpan.Zero) maxSeekablePosition = TimeSpan.Zero;

        targetPosition = TimeSpan.FromSeconds(Math.Clamp(targetPosition.TotalSeconds, 0, maxSeekablePosition.TotalSeconds));

        _engineController.Seek(targetPosition);
        Debug.WriteLine($"[PlaybackEngineCoordinator] Seek to {targetPosition} initiated.");

        // If not playing, the monitor won't update position, so fire an event manually
        if (_engineController.CurrentPlaybackStatus != PlaybackStateStatus.Playing)
        {
            OnMonitorPositionUpdate(_engineController.CurrentPosition, _engineController.CurrentSongDuration);
        }
    }

    public void UpdateRateAndPitch(float rate, float pitch)
    {
        _engineController.PlaybackRate = rate;
        _engineController.PitchSemitones = pitch;
    }

    public void Dispose()
    {
        Debug.WriteLine("[PlaybackEngineCoordinator] Dispose called.");
        _playbackMonitor.Dispose();
        if (_engineController != null)
        {
            _engineController.PlaybackStopped -= OnEngineControllerPlaybackStoppedRelay;
            _engineController.Dispose();
        }
        _loopHandler.Dispose(); // LoopHandler is IDisposable
        GC.SuppressFinalize(this);
        Debug.WriteLine("[PlaybackEngineCoordinator] Dispose completed.");
    }

    ~PlaybackEngineCoordinator()
    {
        Dispose();
    }
}

// Helper class for event arguments
public class PositionEventArgs(TimeSpan position, TimeSpan duration) : EventArgs
{
    public TimeSpan Position { get; } = position;
    public TimeSpan Duration { get; } = duration;
}
</file>

<file path="Source\Services\Playback\PlaybackFlowManagerService.cs">
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class PlaybackFlowManagerService
{
    private readonly LibraryViewModel _libraryViewModel;
    private readonly PlaybackViewModel _playbackViewModel;
    private readonly PlaybackService _playbackService;
    private readonly NextTrackSelectorService _nextTrackSelectorService;

    public PlaybackFlowManagerService(
        LibraryViewModel libraryViewModel,
        PlaybackViewModel playbackViewModel,
        PlaybackService playbackService,
        NextTrackSelectorService nextTrackSelectorService)
    {
        _libraryViewModel = libraryViewModel ?? throw new System.ArgumentNullException(nameof(libraryViewModel));
        _playbackViewModel = playbackViewModel ?? throw new System.ArgumentNullException(nameof(playbackViewModel));
        _playbackService = playbackService ?? throw new System.ArgumentNullException(nameof(playbackService));
        _nextTrackSelectorService = nextTrackSelectorService ?? throw new System.ArgumentNullException(nameof(nextTrackSelectorService));
    }

    public void HandlePlaybackEndedNaturally()
    {
        Debug.WriteLine("[PlaybackFlowManager] HandlePlaybackEndedNaturally called.");

        Song? currentSong = _libraryViewModel.SelectedSong;
        List<Song> currentList = [.. _libraryViewModel.FilteredSongs];
        RepeatMode repeatMode = _playbackViewModel.ModeControls.RepeatMode; // Corrected access
        bool shuffleEnabled = _playbackViewModel.ModeControls.ShuffleEnabled; // Corrected access

        Song? nextSong = _nextTrackSelectorService.GetNextSong(currentSong, currentList, repeatMode, shuffleEnabled);

        if (nextSong is not null)
        {
            Debug.WriteLine($"[PlaybackFlowManager] Next song determined: {nextSong.Title}. Setting Library.SelectedSong.");
            _libraryViewModel.SelectedSong = nextSong;
        }
        else
        {
            Debug.WriteLine("[PlaybackFlowManager] No next song determined. Calling PlaybackService.Stop().");
            _playbackService.Stop();
        }

        Debug.WriteLine("[PlaybackFlowManager] HandlePlaybackEndedNaturally completed.");
    }
}
</file>

<file path="Source\Services\Playback\PlaybackLoopHandler.cs">
using System;
using System.Diagnostics;
using Sonorize.Models;

namespace Sonorize.Services;

/// <summary>
/// Handles loop region logic for playback, including checking for loop boundaries
/// during playback and adjusting seek positions.
/// </summary>
public class PlaybackLoopHandler : IDisposable // Implementing IDisposable for consistency, though no explicit unmanaged resources are held here.
{
    private readonly PlaybackService _playbackService; // Reference back to the PlaybackService
    private Song? _currentSong; // Keep a reference to the current song

    public PlaybackLoopHandler(PlaybackService playbackService)
    {
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        Debug.WriteLine("[LoopHandler] Constructor called.");
        // No need to subscribe to PlaybackService events here; PlaybackService pushes data via method calls.
    }

    /// <summary>
    /// Updates the internal reference to the current song.
    /// Called by PlaybackService when CurrentSong changes.
    /// </summary>
    /// <param name="song">The new current song, or null.</param>
    internal void UpdateCurrentSong(Song? song)
    {
        _currentSong = song;
        Debug.WriteLine($"[LoopHandler] CurrentSong updated to: {_currentSong?.Title ?? "null"}");
        // The handler doesn't need to manage song.IsLoopActive persistence; that's handled by the ViewModel.
        // It just needs to *read* the Song's SavedLoop and IsLoopActive properties.
    }

    /// <summary>
    /// Checks if the current position is within an active loop region and triggers a seek if the end is reached.
    /// Called periodically by the PlaybackService UI update timer.
    /// </summary>
    /// <param name="currentPosition">The current playback position.</param>
    /// <param name="totalDuration">The total duration of the song.</param>
    internal void CheckForLoopSeek(TimeSpan currentPosition, TimeSpan totalDuration)
    {
        // Ensure we have a song, it has a saved loop, and the loop is active
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;

            // Ensure loop end is after loop start and valid within total time
            if (loop.End > loop.Start && loop.End <= totalDuration)
            {
                // Check if current position is at or past the loop end
                // Using a small tolerance (e.g., 50ms) to trigger seek slightly before the exact end,
                // but ensure it's not extremely close to the *total* song duration.
                TimeSpan seekThreshold = loop.End - TimeSpan.FromMilliseconds(50);
                if (currentPosition >= seekThreshold && currentPosition < totalDuration - TimeSpan.FromMilliseconds(200))
                {
                    Debug.WriteLine($"[LoopHandler] Loop active & end reached ({currentPosition:mm\\:ss\\.ff} >= {seekThreshold:mm\\:ss\\.ff}) within file ({totalDuration:mm\\:ss\\.ff}). Requesting seek to loop start: {loop.Start:mm\\:ss\\.ff}");
                    // Request seek back to the loop start via the PlaybackService
                    // This call will come back into PlaybackService.Seek, which will use GetAdjustedSeekPosition,
                    // but since the target is *exactly* loop.Start, GetAdjustedSeekPosition should return loop.Start.
                    _playbackService.Seek(loop.Start);
                    // Note: The Seek method itself has a tolerance to prevent seeking if already very close.
                    // If currentPosition is already at or very near loop.Start (e.g., due to seek tolerance issues),
                    // this check might not trigger a redundant seek.
                }
                // If currentPosition is >= loop.End but also very close to totalDuration,
                // we let the natural end-of-file event trigger (handled by PlaybackService).
            }
            else if (_currentSong.IsLoopActive)
            {
                Debug.WriteLine($"[LoopHandler] Loop active for {_currentSong.Title} but invalid region ({loop.Start:mm\\:ss\\.ff} - {loop.End:mm\\:ss\\.ff}). Loop will not function.");
            }
        }
    }

    /// <summary>
    /// Adjusts a requested seek position based on the currently active loop region.
    /// Called by PlaybackService before performing a seek.
    /// </summary>
    /// <param name="requestedPosition">The position requested by the caller (e.g., UI slider, previous/next logic).</param>
    /// <param name="totalDuration">The total duration of the song.</param>
    /// <returns>The adjusted position, potentially snapped to the loop start.</returns>
    internal TimeSpan GetAdjustedSeekPosition(TimeSpan requestedPosition, TimeSpan totalDuration)
    {
        TimeSpan targetPosition = requestedPosition;

        // Apply loop region constraints if an active loop is defined for the current song.
        // If seeking *into* an active loop from *outside* its start or after its end, snap to start.
        // If seeking *within* an active loop, allow it.
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;
            Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Active loop detected [{loop.Start:mm\\:ss\\.ff}-{loop.End:mm\\:ss\\.ff}). Requested: {requestedPosition:mm\\:ss\\.ff}");

            // Ensure loop end is after loop start and valid within total time
            if (loop.End > loop.Start && loop.End <= totalDuration)
            {
                // If the target position is outside the loop's bounds [loop.Start, loop.End),
                // snap the target position to the loop's start time.
                if (targetPosition < loop.Start || targetPosition >= loop.End)
                {
                    Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Target {targetPosition:mm\\:ss\\.ff} is outside loop bounds. Snapping to loop start: {loop.Start:mm\\:ss\\.ff}.");
                    targetPosition = loop.Start;
                }
                // If targetPosition is within [loop.Start, loop.End), allow normal seek within the loop.
                else
                {
                    Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Target {targetPosition:mm\\:ss\\.ff} is within loop bounds. Allowing seek.");
                }
            }
            else if (_currentSong.IsLoopActive)
            {
                Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Loop active but invalid region ({loop.Start:mm\\:ss\\.ff} - {loop.End:mm\\:ss\\.ff}). Not applying loop seek constraints.");
            }
        }
        else
        {
            Debug.WriteLine("[LoopHandler] GetAdjustedSeekPosition: No active loop. No adjustment needed.");
        }

        return targetPosition;
    }

    /// <summary>
    /// Determines the initial playback position when a new song is loaded.
    /// Returns the loop start if a loop is active, otherwise returns TimeSpan.Zero.
    /// Called by PlaybackService.Play().
    /// </summary>
    /// <param name="totalDuration">The total duration of the song.</param>
    /// <returns>The initial playback position.</returns>
    internal TimeSpan GetInitialPlaybackPosition(TimeSpan totalDuration)
    {
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;
            // Ensure loop start is valid before returning it
            if (loop.Start >= TimeSpan.Zero && loop.Start < totalDuration)
            {
                Debug.WriteLine($"[LoopHandler] GetInitialPlaybackPosition: Active loop found. Starting at loop start: {loop.Start:mm\\:ss\\.ff}");
                return loop.Start;
            }
            else
            {
                Debug.WriteLine($"[LoopHandler] GetInitialPlaybackPosition: Active loop found, but loop start is invalid ({loop.Start >= totalDuration}). Starting from beginning.");
                return TimeSpan.Zero;
            }
        }
        Debug.WriteLine("[LoopHandler] GetInitialPlaybackPosition: No active loop. Starting from beginning.");
        return TimeSpan.Zero; // Start from the beginning if no active loop
    }


    public void Dispose()
    {
        Debug.WriteLine("[LoopHandler] Dispose() called.");
        // This class doesn't currently hold any resources that need explicit disposal.
        // Nullifying the song reference for cleanliness.
        _currentSong = null;
        Debug.WriteLine("[LoopHandler] Dispose() completed.");
    }

    // Finalizer not strictly needed as no unmanaged resources are held,
    // but included for consistency if needed later.
    ~PlaybackLoopHandler()
    {
        Debug.WriteLine("[LoopHandler] Finalizer called.");
        Dispose(false);
        Debug.WriteLine("[LoopHandler] Finalizer completed.");
    }
    // Protected virtual Dispose is standard pattern, though not strictly needed if no unmanaged resources
    protected virtual void Dispose(bool disposing)
    {
        // No specific managed or unmanaged resources to free here.
    }
}
</file>

<file path="Source\Services\Playback\PlaybackMonitor.cs">
using System;
using System.Diagnostics;
using System.Threading;
using Avalonia.Threading;
using Sonorize.Models;

namespace Sonorize.Services.Playback;

public class PlaybackMonitor : IDisposable
{
    private readonly NAudioEngineController _engineController;
    private readonly PlaybackLoopHandler _loopHandler;
    private Timer? _monitorTimer;
    private Song? _songBeingMonitored;
    private Action<TimeSpan, TimeSpan>? _positionUpdateAction;

    private const int MonitorIntervalMilliseconds = 100;

    public PlaybackMonitor(NAudioEngineController engineController, PlaybackLoopHandler loopHandler)
    {
        _engineController = engineController ?? throw new ArgumentNullException(nameof(engineController));
        _loopHandler = loopHandler ?? throw new ArgumentNullException(nameof(loopHandler));
        Debug.WriteLine("[PlaybackMonitor] Initialized.");
    }

    public void Start(Song? songToMonitor, Action<TimeSpan, TimeSpan> positionUpdateAction)
    {
        Stop();

        _songBeingMonitored = songToMonitor;
        _positionUpdateAction = positionUpdateAction ?? throw new ArgumentNullException(nameof(positionUpdateAction));

        if (_songBeingMonitored is null)
        {
            Debug.WriteLine("[PlaybackMonitor] Start called, but songToMonitor is null. Monitoring will not proceed effectively.");
            // It might still run the timer but the callback will likely stop it.
        }

        _monitorTimer = new Timer(MonitorCallback, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(MonitorIntervalMilliseconds));
        Debug.WriteLine($"[PlaybackMonitor] Started monitoring for: {_songBeingMonitored?.Title ?? "No Song"}");
    }

    public void Stop()
    {
        if (_monitorTimer is not null)
        {
            _monitorTimer.Change(Timeout.Infinite, Timeout.Infinite);
            _monitorTimer.Dispose();
            _monitorTimer = null;
            Debug.WriteLine($"[PlaybackMonitor] Stopped monitoring for: {_songBeingMonitored?.Title ?? "Previously Monitored Song"}");
        }
        _songBeingMonitored = null; // Clear the song being monitored
        _positionUpdateAction = null; // Clear the callback
    }

    private void MonitorCallback(object? state)
    {
        Song? localSongBeingMonitored = _songBeingMonitored; // Capture for thread safety
        Action<TimeSpan, TimeSpan>? localPositionUpdateAction = _positionUpdateAction; // Capture for thread safety

        if (localSongBeingMonitored is null || localPositionUpdateAction is null)
        {
            Debug.WriteLine("[PlaybackMonitor Callback] Song or position update action is null. Stopping timer.");
            Dispatcher.UIThread.InvokeAsync(Stop); // Stop on UI thread to ensure proper disposal if needed
            return;
        }

        // This check should be done on the UI thread if it involves UI-bound properties like PlaybackService.CurrentSong
        // However, here we are just checking against the _songBeingMonitored which was set at Start()
        // The critical part is that the PlaybackEngineController is still for this song.
        // PlaybackService's CurrentSong might change, causing this monitor to be stopped externally.

        if (_engineController.CurrentPlaybackStatus != PlaybackStateStatus.Playing)
        {
            // If not playing, stop the monitor.
            Debug.WriteLine($"[PlaybackMonitor Callback] Engine not playing (State: {_engineController.CurrentPlaybackStatus}). Stopping monitoring for '{localSongBeingMonitored.Title}'.");
            Dispatcher.UIThread.InvokeAsync(Stop);
            return;
        }

        Dispatcher.UIThread.InvokeAsync(() =>
        {
            // Re-check conditions on UI thread before acting, in case state changed during invoke
            if (_songBeingMonitored != localSongBeingMonitored || _positionUpdateAction != localPositionUpdateAction || _engineController.CurrentPlaybackStatus != PlaybackStateStatus.Playing)
            {
                // If the song being monitored has changed since the callback was scheduled, or monitor was stopped.
                return;
            }

            var currentAudioTime = TimeSpan.Zero;
            var songDuration = TimeSpan.Zero;

            try
            {
                currentAudioTime = _engineController.CurrentPosition;
                songDuration = _engineController.CurrentSongDuration;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[PlaybackMonitor] Error getting EngineController.CurrentPosition/Duration in timer callback for '{localSongBeingMonitored.Title}': {ex.Message}. Stopping timer.");
                Stop(); // Stop self
                return;
            }

            localPositionUpdateAction(currentAudioTime, songDuration);
            _loopHandler.CheckForLoopSeek(currentAudioTime, songDuration);
        });
    }

    public void Dispose()
    {
        Debug.WriteLine("[PlaybackMonitor] Dispose called.");
        Stop(); // Ensure timer is stopped and disposed
        GC.SuppressFinalize(this);
        Debug.WriteLine("[PlaybackMonitor] Dispose finished.");
    }

    ~PlaybackMonitor()
    {
        Debug.WriteLine("[PlaybackMonitor] Finalizer called.");
        Dispose(); // Call the same dispose logic
    }
}
</file>

<file path="Source\Services\Playback\PlaybackService.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using Sonorize.Models;
using Sonorize.Services.Playback;
using Sonorize.ViewModels; // For ViewModelBase, if still needed (likely)

namespace Sonorize.Services;

public enum PlaybackStateStatus { Stopped, Playing, Paused } // This enum might be better placed in a shared Models namespace if used by ViewModels too

public class PlaybackService : ViewModelBase, IDisposable
{
    private readonly PlaybackSessionManager _sessionManager;
    private readonly PlaybackLoopHandler _loopHandler; // Keep loop handler if it needs PlaybackService context

    // Properties that mirror PlaybackSessionManager's state
    public Song? CurrentSong => _sessionManager.CurrentSong;
    public bool HasCurrentSong => _sessionManager.HasCurrentSong;
    public bool IsPlaying => _sessionManager.IsPlaying;
    public PlaybackStateStatus CurrentPlaybackStatus => _sessionManager.CurrentPlaybackStatus;
    public TimeSpan CurrentPosition => _sessionManager.CurrentPosition;
    public double CurrentPositionSeconds => _sessionManager.CurrentPositionSeconds;
    public TimeSpan CurrentSongDuration => _sessionManager.CurrentSongDuration;
    public double CurrentSongDurationSeconds => _sessionManager.CurrentSongDurationSeconds;

    public float PlaybackRate
    {
        get => _sessionManager.PlaybackRate;
        set => _sessionManager.PlaybackRate = value;
    }

    public float PitchSemitones
    {
        get => _sessionManager.PitchSemitones;
        set => _sessionManager.PitchSemitones = value;
    }

    public event EventHandler? PlaybackEndedNaturally
    {
        add => _sessionManager.SessionEndedNaturally += value;
        remove => _sessionManager.SessionEndedNaturally -= value;
    }

    public PlaybackService(ScrobblingService scrobblingService)
    {
        Debug.WriteLine("[PlaybackService] Constructor called.");
        _loopHandler = new PlaybackLoopHandler(this); // LoopHandler now takes this simplified PlaybackService
        _sessionManager = new PlaybackSessionManager(scrobblingService, _loopHandler);
        _sessionManager.PropertyChanged += SessionManager_PropertyChanged;
    }

    private void SessionManager_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        // Forward property changes from SessionManager to this service's listeners
        OnPropertyChanged(e.PropertyName);
        if (e.PropertyName == nameof(PlaybackSessionManager.CurrentSong))
        {
            // Explicitly notify HasCurrentSong if CurrentSong changes
            OnPropertyChanged(nameof(HasCurrentSong));
        }
    }

    public void Play(Song song)
    {
        Debug.WriteLine($"[PlaybackService facade] Play requested for: {(song?.Title ?? "null song")}");
        _sessionManager.StartNewSession(song);
    }

    public void Pause()
    {
        Debug.WriteLine($"[PlaybackService facade] Pause requested.");
        _sessionManager.PauseSession();
    }

    public void Resume()
    {
        Debug.WriteLine($"[PlaybackService facade] Resume requested.");
        _sessionManager.ResumeSession();
    }

    public void Stop()
    {
        Debug.WriteLine("[PlaybackService facade] Public Stop() called.");
        _sessionManager.StopSession(isExplicit: true);
    }

    public void Seek(TimeSpan requestedPosition)
    {
        if (CurrentSong == null || CurrentSongDuration == TimeSpan.Zero)
        {
            Debug.WriteLine($"[PlaybackService facade] Seek ignored: No current song or duration is zero.");
            return;
        }
        _sessionManager.SeekSession(requestedPosition);
    }

    // This method might be called by PlaybackLoopHandler
    // Ensure PlaybackLoopHandler has the correct reference or adjust its design.
    // For now, assuming LoopHandler might still need a way to trigger seek on the service layer.
    internal void PerformSeekInternal(TimeSpan position) // Example if LoopHandler calls back
    {
        Seek(position);
    }


    public void Dispose()
    {
        Debug.WriteLine("[PlaybackService] Dispose() called.");
        if (_sessionManager != null)
        {
            _sessionManager.PropertyChanged -= SessionManager_PropertyChanged;
            _sessionManager.Dispose();
        }
        _loopHandler?.Dispose();
        GC.SuppressFinalize(this);
        Debug.WriteLine("[PlaybackService] Dispose() completed.");
    }

    ~PlaybackService()
    {
        Dispose();
    }
}
</file>

<file path="Source\Services\Playback\PlaybackSessionManager.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using NAudio.Wave; // For StoppedEventArgs
using Sonorize.Models;

namespace Sonorize.Services.Playback;

public class PlaybackSessionManager : INotifyPropertyChanged, IDisposable
{
    private readonly PlaybackEngineCoordinator _playbackEngineCoordinator;
    private readonly PlaybackCompletionHandler _completionHandler;
    private readonly ScrobblingService _scrobblingService;

    private Song? _currentSong;
    public Song? CurrentSong
    {
        get => _currentSong;
        private set
        {
            if (_currentSong != value)
            {
                _currentSong = value;
                OnPropertyChanged(nameof(CurrentSong));
                OnPropertyChanged(nameof(HasCurrentSong));
                _playbackEngineCoordinator.SetSong(value);

                if (value == null)
                {
                    // This state reset is crucial when the song becomes null
                    IsPlaying = false;
                    CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                    UpdatePlaybackPositionAndDuration(TimeSpan.Zero, TimeSpan.Zero);
                }
            }
        }
    }

    public bool HasCurrentSong => CurrentSong != null;

    private bool _isPlaying;
    public bool IsPlaying
    {
        get => _isPlaying;
        private set
        {
            if (_isPlaying != value)
            {
                _isPlaying = value;
                OnPropertyChanged(nameof(IsPlaying));
            }
        }
    }

    private PlaybackStateStatus _currentPlaybackStatus = PlaybackStateStatus.Stopped;
    public PlaybackStateStatus CurrentPlaybackStatus
    {
        get => _currentPlaybackStatus;
        private set
        {
            if (_currentPlaybackStatus != value)
            {
                _currentPlaybackStatus = value;
                OnPropertyChanged(nameof(CurrentPlaybackStatus));
            }
        }
    }

    private TimeSpan _currentPosition;
    public TimeSpan CurrentPosition
    {
        get => _currentPosition;
        private set
        {
            if (_currentPosition != value)
            {
                _currentPosition = value;
                OnPropertyChanged(nameof(CurrentPosition));
                OnPropertyChanged(nameof(CurrentPositionSeconds));
            }
        }
    }
    public double CurrentPositionSeconds => CurrentPosition.TotalSeconds;

    private TimeSpan _currentSongDuration;
    public TimeSpan CurrentSongDuration
    {
        get => _currentSongDuration;
        private set
        {
            if (_currentSongDuration != value)
            {
                _currentSongDuration = value;
                OnPropertyChanged(nameof(CurrentSongDuration));
                OnPropertyChanged(nameof(CurrentSongDurationSeconds));
            }
        }
    }
    public double CurrentSongDurationSeconds => CurrentSongDuration.TotalSeconds > 0 ? CurrentSongDuration.TotalSeconds : 1.0;

    private float _playbackRate = 1.0f;
    public float PlaybackRate
    {
        get => _playbackRate;
        set
        {
            if (_playbackRate != value)
            {
                _playbackRate = value;
                _playbackEngineCoordinator.UpdateRateAndPitch(value, PitchSemitones);
                OnPropertyChanged(nameof(PlaybackRate));
            }
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            if (_pitchSemitones != value)
            {
                _pitchSemitones = value;
                _playbackEngineCoordinator.UpdateRateAndPitch(PlaybackRate, value);
                OnPropertyChanged(nameof(PitchSemitones));
            }
        }
    }

    private volatile bool _explicitStopRequested = false;

    public event PropertyChangedEventHandler? PropertyChanged;
    public event EventHandler? SessionEndedNaturally;

    public PlaybackSessionManager(ScrobblingService scrobblingService, PlaybackLoopHandler loopHandler)
    {
        _scrobblingService = scrobblingService ?? throw new ArgumentNullException(nameof(scrobblingService));

        var engineController = new NAudioEngineController();
        _playbackEngineCoordinator = new PlaybackEngineCoordinator(engineController, loopHandler, new PlaybackMonitor(engineController, loopHandler));

        _completionHandler = new PlaybackCompletionHandler(this, _scrobblingService);

        _playbackEngineCoordinator.EnginePlaybackStopped += OnEngineCoordinatorPlaybackStopped;
        _playbackEngineCoordinator.EnginePositionUpdated += OnEngineCoordinatorPositionUpdated;
        Debug.WriteLine("[PlaybackSessionManager] Initialized.");
    }

    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    private void UpdatePlaybackPositionAndDuration(TimeSpan position, TimeSpan duration)
    {
        this.CurrentPosition = position;
        this.CurrentSongDuration = duration;
    }

    public bool StartNewSession(Song song)
    {
        Debug.WriteLine($"[SessionManager] StartNewSession requested for: {(song?.Title ?? "null song")}");

        if (CurrentPlaybackStatus != PlaybackStateStatus.Stopped && CurrentSong != null && CurrentSong != song)
        {
            _playbackEngineCoordinator.Stop();
        }
        else if (CurrentPlaybackStatus != PlaybackStateStatus.Stopped && CurrentSong == song)
        {
            _playbackEngineCoordinator.Stop();
        }

        if (song == null || string.IsNullOrEmpty(song.FilePath) || !File.Exists(song.FilePath))
        {
            Debug.WriteLine("[SessionManager] New song is null or invalid. Stopping current playback if any.");
            if (CurrentPlaybackStatus != PlaybackStateStatus.Stopped) _playbackEngineCoordinator.Stop();
            CurrentSong = null;
            return false;
        }

        CurrentSong = song;
        _explicitStopRequested = false;

        try
        {
            if (!_playbackEngineCoordinator.Load(song.FilePath, PlaybackRate, PitchSemitones))
            {
                CurrentSong = null;
                return false;
            }
            UpdatePlaybackPositionAndDuration(TimeSpan.Zero, _playbackEngineCoordinator.CurrentSongDuration);
            _playbackEngineCoordinator.Play(startMonitor: true);
            SetPlaybackState(true, PlaybackStateStatus.Playing);
            _ = _scrobblingService.UpdateNowPlayingAsync(CurrentSong); // Fire and forget NowPlaying update
            return true;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[SessionManager] Error starting new session for '{CurrentSong?.FilePath}': {ex}");
            if (CurrentSong != null) _playbackEngineCoordinator.Stop();
            CurrentSong = null;
            return false;
        }
    }

    public void PauseSession()
    {
        if (IsPlaying)
        {
            _playbackEngineCoordinator.Pause();
            SetPlaybackState(false, PlaybackStateStatus.Paused);
        }
    }

    public void ResumeSession()
    {
        if (CurrentSong == null) return;

        if (CurrentPlaybackStatus == PlaybackStateStatus.Paused)
        {
            _playbackEngineCoordinator.Resume(startMonitor: true);
            SetPlaybackState(true, PlaybackStateStatus.Playing);
            _ = _scrobblingService.UpdateNowPlayingAsync(CurrentSong); // Fire and forget NowPlaying update
        }
        else if (CurrentPlaybackStatus == PlaybackStateStatus.Stopped)
        {
            StartNewSession(CurrentSong);
        }
    }

    public void StopSession(bool isExplicit)
    {
        _explicitStopRequested = isExplicit;
        if (CurrentPlaybackStatus != PlaybackStateStatus.Stopped)
        {
            _playbackEngineCoordinator.Stop();
        }
        else if (isExplicit)
        {
            _completionHandler.Handle(
               new StoppedEventArgs(),
               CurrentSong,
               this.CurrentPosition,
               this.CurrentSongDuration,
               _explicitStopRequested
           );
        }
    }

    public void SeekSession(TimeSpan requestedPosition)
    {
        if (CurrentSong == null || CurrentSongDuration == TimeSpan.Zero) return;
        _playbackEngineCoordinator.Seek(requestedPosition);
    }

    private void OnEngineCoordinatorPositionUpdated(object? sender, PositionEventArgs e)
    {
        UpdatePlaybackPositionAndDuration(e.Position, e.Duration);
    }

    private void OnEngineCoordinatorPlaybackStopped(object? sender, StoppedEventArgs e)
    {
        Song? songThatJustStopped = CurrentSong;
        TimeSpan actualStoppedPosition = _playbackEngineCoordinator.CurrentPosition;
        TimeSpan actualStoppedSongDuration = _playbackEngineCoordinator.CurrentSongDuration;

        if (songThatJustStopped != null && actualStoppedSongDuration == TimeSpan.Zero)
        {
            actualStoppedSongDuration = songThatJustStopped.Duration;
        }

        _completionHandler.Handle(
            e,
            songThatJustStopped,
            actualStoppedPosition,
            actualStoppedSongDuration,
            _explicitStopRequested
        );
    }

    // Methods for PlaybackCompletionHandler to call
    internal void StopUiUpdateMonitor() => _playbackEngineCoordinator.Stop();
    internal void UpdateStateForNaturalPlaybackEnd()
    {
        SetPlaybackState(false, PlaybackStateStatus.Stopped);
        // Position reset when CurrentSong becomes null
    }
    internal void FinalizeCurrentSong(Song? song)
    {
        CurrentSong = song;
    }
    internal Song? GetCurrentSongForCompletion() => CurrentSong;
    internal void SetPlaybackState(bool isPlaying, PlaybackStateStatus status)
    {
        IsPlaying = isPlaying;
        CurrentPlaybackStatus = status;
    }
    internal void TriggerSessionEndedNaturally()
    {
        SessionEndedNaturally?.Invoke(this, EventArgs.Empty);
    }
    internal void ResetExplicitStopFlag()
    {
        _explicitStopRequested = false;
    }

    public void Dispose()
    {
        Debug.WriteLine("[PlaybackSessionManager] Dispose called.");
        if (_playbackEngineCoordinator != null)
        {
            _playbackEngineCoordinator.EnginePlaybackStopped -= OnEngineCoordinatorPlaybackStopped;
            _playbackEngineCoordinator.EnginePositionUpdated -= OnEngineCoordinatorPositionUpdated;
            _playbackEngineCoordinator.Dispose();
        }
        GC.SuppressFinalize(this);
        Debug.WriteLine("[PlaybackSessionManager] Dispose completed.");
    }

    ~PlaybackSessionManager()
    {
        Dispose();
    }
}
</file>

<file path="Source\Services\Settings\SettingsChangeProcessorService.cs">
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Sonorize.Models;
using Sonorize.ViewModels; // Required for LibraryViewModel

namespace Sonorize.Services;

public class SettingsChangeProcessorService
{
    private readonly LibraryViewModel _libraryViewModel;
    private readonly ScrobblingService _scrobblingService;

    public SettingsChangeProcessorService(LibraryViewModel libraryViewModel, ScrobblingService scrobblingService)
    {
        _libraryViewModel = libraryViewModel ?? throw new System.ArgumentNullException(nameof(libraryViewModel));
        _scrobblingService = scrobblingService ?? throw new System.ArgumentNullException(nameof(scrobblingService));
    }

    public async Task<List<string>> ProcessChangesAndGetStatus(AppSettings oldSettings, AppSettings newSettings)
    {
        List<string> statusMessages = [];

        // Directory changes
        bool dirsActuallyChanged = !oldSettings.MusicDirectories.SequenceEqual(newSettings.MusicDirectories);
        if (dirsActuallyChanged)
        {
            Debug.WriteLine("[SettingsChangeProcessor] Music directories changed. Reloading library.");
            await _libraryViewModel.LoadLibraryAsync();
            // Status text during library loading is handled by LibraryViewModel/MusicLibraryService
        }

        // Theme changes
        bool themeActuallyChanged = oldSettings.PreferredThemeFileName != newSettings.PreferredThemeFileName;
        if (themeActuallyChanged)
        {
            Debug.WriteLine("[SettingsChangeProcessor] Theme changed. Restart recommended.");
            statusMessages.Add("Theme changed. Restart Sonorize for full effect.");
        }

        // Scrobbling settings changes
        bool scrobbleSettingsActuallyChanged =
            oldSettings.LastfmScrobblingEnabled != newSettings.LastfmScrobblingEnabled ||
            oldSettings.LastfmUsername != newSettings.LastfmUsername ||
            oldSettings.LastfmPassword != newSettings.LastfmPassword || // Used for change detection only
            oldSettings.LastfmSessionKey != newSettings.LastfmSessionKey || // If session key is cleared/changed directly
            oldSettings.ScrobbleThresholdPercentage != newSettings.ScrobbleThresholdPercentage ||
            oldSettings.ScrobbleThresholdAbsoluteSeconds != newSettings.ScrobbleThresholdAbsoluteSeconds;

        if (scrobbleSettingsActuallyChanged)
        {
            Debug.WriteLine("[SettingsChangeProcessor] Scrobbling settings changed. Refreshing ScrobblingService.");
            _scrobblingService.RefreshSettings(); // This will re-evaluate credentials and session key

            // Provide feedback based on the new state of scrobbling AFTER refresh
            _scrobblingService.RefreshSettings(); // Call refresh again to ensure service state is based on latest
            if (_scrobblingService.IsScrobblingEnabled && _scrobblingService.AreCredentialsEffectivelyConfigured)
            {
                // Check if already added "Theme changed..." to avoid overwriting it with a less critical message
                if (!statusMessages.Any(m => m.Contains("Theme changed")))
                {
                    statusMessages.Add("Scrobbling enabled and configured.");
                }
                else
                {
                    // Append if theme change message exists
                    var themeMsgIndex = statusMessages.FindIndex(m => m.Contains("Theme changed"));
                    if (themeMsgIndex != -1) statusMessages[themeMsgIndex] += " Scrobbling enabled.";
                    else statusMessages.Add("Scrobbling enabled and configured.");
                }
            }
            else if (_scrobblingService.IsScrobblingEnabled && !_scrobblingService.AreCredentialsEffectivelyConfigured)
            {
                if (!statusMessages.Any(m => m.Contains("Theme changed")))
                {
                    statusMessages.Add("Scrobbling enabled, but not configured. Check settings.");
                }
                else
                {
                    var themeMsgIndex = statusMessages.FindIndex(m => m.Contains("Theme changed"));
                    if (themeMsgIndex != -1) statusMessages[themeMsgIndex] += " Scrobbling enabled (check config).";
                    else statusMessages.Add("Scrobbling enabled, but not configured. Check settings.");
                }
            }
            else if (!_scrobblingService.IsScrobblingEnabled && oldSettings.LastfmScrobblingEnabled)
            {
                if (!statusMessages.Any(m => m.Contains("Theme changed")))
                {
                    statusMessages.Add("Scrobbling disabled.");
                }
                else
                {
                    var themeMsgIndex = statusMessages.FindIndex(m => m.Contains("Theme changed"));
                    if (themeMsgIndex != -1) statusMessages[themeMsgIndex] += " Scrobbling disabled.";
                    else statusMessages.Add("Scrobbling disabled.");
                }

            }
        }

        // If no specific messages were generated but changes happened, ensure status bar updates.
        // This is implicitly handled if statusMessages is empty, MainWindowViewModel calls UpdateStatusBarText().

        return statusMessages;
    }
}
</file>

<file path="Source\Services\Settings\SettingsService.cs">
using System;
using System.IO;
using System.Text.Json;
using Sonorize.Models;

namespace Sonorize.Services;

public class SettingsService
{
    private readonly string _settingsFilePath;

    public SettingsService()
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        Directory.CreateDirectory(sonorizeAppDataPath); // Ensure directory exists
        _settingsFilePath = Path.Combine(sonorizeAppDataPath, "settings.json");
    }

    public AppSettings LoadSettings()
    {
        try
        {
            if (File.Exists(_settingsFilePath))
            {
                var json = File.ReadAllText(_settingsFilePath);
                return JsonSerializer.Deserialize<AppSettings>(json) ?? new AppSettings();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
            // Fallback to default settings
        }
        return new AppSettings();
    }

    public void SaveSettings(AppSettings settings)
    {
        try
        {
            var json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(_settingsFilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings: {ex.Message}");
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\ArtistAlbumCollectionManager.cs">
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Avalonia.Media.Imaging;
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.Utils; // For AlbumArtistTupleComparer

namespace Sonorize.ViewModels.LibraryManagement;

public class ArtistAlbumCollectionManager
{
    private readonly ObservableCollection<ArtistViewModel> _artistsCollection;
    private readonly ObservableCollection<AlbumViewModel> _albumsCollection;
    private readonly MusicLibraryService _musicLibraryService; // For default thumbnail

    public ArtistAlbumCollectionManager(
        ObservableCollection<ArtistViewModel> artistsCollection,
        ObservableCollection<AlbumViewModel> albumsCollection,
        MusicLibraryService musicLibraryService)
    {
        _artistsCollection = artistsCollection ?? throw new ArgumentNullException(nameof(artistsCollection));
        _albumsCollection = albumsCollection ?? throw new ArgumentNullException(nameof(albumsCollection));
        _musicLibraryService = musicLibraryService ?? throw new ArgumentNullException(nameof(musicLibraryService));
    }

    public void PopulateCollections(IEnumerable<Song> allSongs)
    {
        _artistsCollection.Clear();
        var uniqueArtistNames = allSongs
            .Where(s => !string.IsNullOrWhiteSpace(s.Artist))
            .Select(s => s.Artist!)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(a => a, StringComparer.OrdinalIgnoreCase)
            .ToList();

        Bitmap? defaultSongThumbnail = _musicLibraryService.GetDefaultThumbnail();
        foreach (string? artistName in uniqueArtistNames)
        {
            Bitmap? repThumb = allSongs.FirstOrDefault(s =>
                                   (s.Artist?.Equals(artistName, StringComparison.OrdinalIgnoreCase) ?? false) &&
                                   s.Thumbnail != null && s.Thumbnail != defaultSongThumbnail)?.Thumbnail
                               ?? defaultSongThumbnail;
            _artistsCollection.Add(new ArtistViewModel { Name = artistName, Thumbnail = repThumb });
        }

        _albumsCollection.Clear();
        Func<Song, (string Album, string Artist)> keySelector = s => (s.Album?.Trim() ?? string.Empty, s.Artist?.Trim() ?? string.Empty);
        var uniqueAlbumsData = allSongs
            .Where(s => !string.IsNullOrWhiteSpace(s.Album) && !string.IsNullOrWhiteSpace(s.Artist))
            .GroupBy(keySelector, AlbumArtistTupleComparer.Instance)
            .Select(g => new
            {
                AlbumTitle = g.Key.Item1,
                ArtistName = g.Key.Item2,
                SongsInAlbum = g.ToList()
            })
            .OrderBy(a => a.ArtistName, StringComparer.OrdinalIgnoreCase).ThenBy(a => a.AlbumTitle, StringComparer.OrdinalIgnoreCase)
            .ToList();

        foreach (var albumData in uniqueAlbumsData)
        {
            AlbumViewModel albumVM = new()
            {
                Title = albumData.AlbumTitle,
                Artist = albumData.ArtistName
            };

            List<Bitmap?> songThumbnailsForGrid = new(new Bitmap?[4]);
            List<Bitmap?> distinctSongThumbs = albumData.SongsInAlbum
                                                 .Select(s => s.Thumbnail ?? defaultSongThumbnail)
                                                 .Distinct()
                                                 .Take(4)
                                                 .ToList();

            for (int i = 0; i < distinctSongThumbs.Count; i++)
            {
                songThumbnailsForGrid[i] = distinctSongThumbs[i];
            }

            albumVM.SongThumbnailsForGrid = songThumbnailsForGrid;
            albumVM.RepresentativeThumbnail = songThumbnailsForGrid.FirstOrDefault(t => t != null) ?? defaultSongThumbnail;

            _albumsCollection.Add(albumVM);
        }
    }

    public void UpdateCollectionsForSongThumbnail(Song updatedSong, IEnumerable<Song> allSongs)
    {
        // Update ArtistViewModel
        var artistVM = _artistsCollection.FirstOrDefault(a => a.Name == updatedSong.Artist);
        if (artistVM != null)
        {
            var firstSongOfArtistWithThumbnail = allSongs.FirstOrDefault(s =>
                (s.Artist?.Equals(artistVM.Name, StringComparison.OrdinalIgnoreCase) ?? false) && s.Thumbnail != _musicLibraryService.GetDefaultThumbnail());

            Bitmap? newArtistThumbnail = (firstSongOfArtistWithThumbnail?.Thumbnail ?? _musicLibraryService.GetDefaultThumbnail());
            if (artistVM.Thumbnail != newArtistThumbnail) // Only update if changed to avoid needless notifications
            {
                artistVM.Thumbnail = newArtistThumbnail;
            }
        }

        // Update AlbumViewModel
        var albumVM = _albumsCollection.FirstOrDefault(al => al.Title == updatedSong.Album && al.Artist == updatedSong.Artist);
        if (albumVM != null)
        {
            var songsInAlbum = allSongs.Where(s => (s.Album?.Equals(albumVM.Title, StringComparison.OrdinalIgnoreCase) ?? false) &&
                                                    (s.Artist?.Equals(albumVM.Artist, StringComparison.OrdinalIgnoreCase) ?? false))
                                         .ToList();

            Bitmap? defaultSongThumbnail = _musicLibraryService.GetDefaultThumbnail();
            List<Bitmap?> newSongThumbnailsForGrid = new List<Bitmap?>(new Bitmap?[4]);
            List<Bitmap?> distinctSongThumbs = songsInAlbum
                                                 .Select(s => s.Thumbnail ?? defaultSongThumbnail)
                                                 .Distinct()
                                                 .Take(4)
                                                 .ToList();

            for (int i = 0; i < distinctSongThumbs.Count; i++)
            {
                newSongThumbnailsForGrid[i] = distinctSongThumbs[i];
            }

            // Check if the grid thumbnails actually changed before assigning to avoid unnecessary UI updates.
            if (!albumVM.SongThumbnailsForGrid.SequenceEqual(newSongThumbnailsForGrid))
            {
                albumVM.SongThumbnailsForGrid = newSongThumbnailsForGrid;
            }

            Bitmap? newRepresentativeThumbnail = newSongThumbnailsForGrid.FirstOrDefault(t => t != null) ?? defaultSongThumbnail;
            if (albumVM.RepresentativeThumbnail != newRepresentativeThumbnail)
            {
                albumVM.RepresentativeThumbnail = newRepresentativeThumbnail;
            }
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\LibraryDataOrchestrator.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels.LibraryManagement;

public class LibraryDataOrchestrator
{
    private readonly MusicLibraryService _musicLibraryService;
    private readonly ArtistAlbumCollectionManager _artistAlbumManager;
    private readonly SettingsService _settingsService;

    public LibraryDataOrchestrator(
        MusicLibraryService musicLibraryService,
        ArtistAlbumCollectionManager artistAlbumManager,
        SettingsService settingsService)
    {
        _musicLibraryService = musicLibraryService ?? throw new ArgumentNullException(nameof(musicLibraryService));
        _artistAlbumManager = artistAlbumManager ?? throw new ArgumentNullException(nameof(artistAlbumManager));
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
    }

    public async Task<List<Song>> LoadAndProcessLibraryDataAsync(
        Action<string> statusUpdateCallback,
        Action<Song> songAddedToRawListCallback)
    {
        var rawSongs = new List<Song>(); // Temporary list to gather songs from MusicLibraryService

        AppSettings settings = _settingsService.LoadSettings();
        if (!settings.MusicDirectories.Any())
        {
            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback("No music directories configured."));
            return rawSongs; // Return empty list
        }

        try
        {
            // Phase 1: Load raw song metadata and thumbnails (thumbnails load in background via MusicLibraryService)
            await _musicLibraryService.LoadMusicFromDirectoriesAsync(
                settings.MusicDirectories,
                song =>
                {
                    // This callback is invoked on UI thread by MusicLibraryService
                    rawSongs.Add(song);
                    songAddedToRawListCallback(song); // Notify caller (LibraryViewModel) to add to its _allSongs
                },
                status => Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback(status)) // Pass status updates
            );

            // Phase 2: Populate Artist and Album collections using the fully gathered rawSongs list
            // This is done after all songs are initially processed by MusicLibraryService.
            // The ArtistAlbumCollectionManager operates on the collections passed to its constructor,
            // so this call effectively updates the Artists and Albums collections in LibraryViewModel.
            // Ensure this runs on UI thread if ArtistAlbumCollectionManager modifies UI-bound collections directly.
            // ArtistAlbumCollectionManager is designed to populate ObservableCollections, which should be UI thread safe if modified there.
            await Dispatcher.UIThread.InvokeAsync(() =>
            {
                _artistAlbumManager.PopulateCollections(rawSongs);
            });

            return rawSongs; // Return the populated list of all songs
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[LibraryDataOrchestrator] Error loading and processing library data: {ex}");
            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback("Error loading music library."));
            return new List<Song>(); // Return empty list on error
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\LibraryDisplayModeService.cs">
using System;
using System.ComponentModel;
using System.Windows.Input;
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels.LibraryManagement;

public class LibraryDisplayModeService : ViewModelBase
{
    private readonly SettingsService _settingsService;

    private SongDisplayMode _libraryViewMode;
    public SongDisplayMode LibraryViewMode
    {
        get => _libraryViewMode;
        private set // Setter is private, changes are made via command
        {
            if (SetProperty(ref _libraryViewMode, value))
            {
                SavePreference(nameof(AppSettings.LibraryViewModePreference), value);
            }
        }
    }

    private SongDisplayMode _artistViewMode;
    public SongDisplayMode ArtistViewMode
    {
        get => _artistViewMode;
        private set
        {
            if (SetProperty(ref _artistViewMode, value))
            {
                SavePreference(nameof(AppSettings.ArtistViewModePreference), value);
            }
        }
    }

    private SongDisplayMode _albumViewMode;
    public SongDisplayMode AlbumViewMode
    {
        get => _albumViewMode;
        private set
        {
            if (SetProperty(ref _albumViewMode, value))
            {
                SavePreference(nameof(AppSettings.AlbumViewModePreference), value);
            }
        }
    }

    public ICommand SetDisplayModeCommand { get; }

    public LibraryDisplayModeService(SettingsService settingsService)
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        LoadPreferences();

        SetDisplayModeCommand = new RelayCommand(
            param =>
            {
                if (param is not (string targetView, SongDisplayMode mode))
                {
                    return;
                }

                switch (targetView)
                {
                    case "Library": LibraryViewMode = mode; break;
                    case "Artists": ArtistViewMode = mode; break;
                    case "Albums": AlbumViewMode = mode; break;
                }
            },
            _ => true // Command is always executable
        );
    }

    private void LoadPreferences()
    {
        AppSettings settings = _settingsService.LoadSettings();
        _libraryViewMode = Enum.TryParse<SongDisplayMode>(settings.LibraryViewModePreference, out var libMode) ? libMode : SongDisplayMode.Detailed;
        _artistViewMode = Enum.TryParse<SongDisplayMode>(settings.ArtistViewModePreference, out var artMode) ? artMode : SongDisplayMode.Detailed;
        _albumViewMode = Enum.TryParse<SongDisplayMode>(settings.AlbumViewModePreference, out var albMode) ? albMode : SongDisplayMode.Detailed;

        // Initial OnPropertyChanged for any subscribers after loading
        OnPropertyChanged(nameof(LibraryViewMode));
        OnPropertyChanged(nameof(ArtistViewMode));
        OnPropertyChanged(nameof(AlbumViewMode));
    }

    private void SavePreference(string preferenceKey, SongDisplayMode mode)
    {
        AppSettings settings = _settingsService.LoadSettings();
        switch (preferenceKey)
        {
            case nameof(AppSettings.LibraryViewModePreference):
                settings.LibraryViewModePreference = mode.ToString();
                break;
            case nameof(AppSettings.ArtistViewModePreference):
                settings.ArtistViewModePreference = mode.ToString();
                break;
            case nameof(AppSettings.AlbumViewModePreference):
                settings.AlbumViewModePreference = mode.ToString();
                break;
        }
        _settingsService.SaveSettings(settings);
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\LibraryStatusTextGenerator.cs">
using System.Linq;
using Sonorize.Models;
using Sonorize.Services; // For AppSettings in case it's needed indirectly

namespace Sonorize.ViewModels.LibraryManagement;

public class LibraryStatusTextGenerator
{
    public string GenerateStatusText(
        bool isLoadingLibrary,
        int allSongsCount,
        int filteredSongsCount,
        ArtistViewModel? selectedArtist,
        AlbumViewModel? selectedAlbum,
        string? searchQuery,
        SettingsService settingsService) // Pass SettingsService to check for configured directories
    {
        if (isLoadingLibrary)
        {
            // During loading, LibraryViewModel's LibraryStatusText is updated by MusicLibraryService callbacks.
            // This generator is primarily for post-loading or idle states.
            // However, if called during loading, we might return a generic loading message
            // or expect the caller (LibraryViewModel) to handle this case.
            // For now, assume this is called when not actively in the middle of the LoadMusicFromDirectoriesAsync song processing loop.
            return "Loading library..."; // Or whatever the current LibraryStatusText is if passed in.
        }

        if (allSongsCount == 0)
        {
            AppSettings settings = settingsService.LoadSettings();
            if (!settings.MusicDirectories.Any())
            {
                return "Library empty. Add directories via File menu.";
            }
            else
            {
                return "No songs found in configured directories.";
            }
        }

        // Album selection takes precedence for status text
        if (selectedAlbum?.Title != null && selectedAlbum.Artist != null)
        {
            return $"Showing songs from {selectedAlbum.Title} by {selectedAlbum.Artist}: {filteredSongsCount} of {allSongsCount} total songs.";
        }
        // Then artist selection
        else if (selectedArtist?.Name != null)
        {
            return $"Showing songs by {selectedArtist.Name}: {filteredSongsCount} of {allSongsCount} total songs.";
        }
        else if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            return $"{filteredSongsCount} of {allSongsCount} songs matching search.";
        }
        else // No specific view, no search query - showing all songs
        {
            return $"{allSongsCount} songs in library.";
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\SongFilteringService.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using Sonorize.Models;

namespace Sonorize.ViewModels.LibraryManagement;

public class SongFilteringService
{
    public IEnumerable<Song> ApplyFilter(
        IEnumerable<Song> allSongs,
        string? searchQuery,
        ArtistViewModel? selectedArtist,
        AlbumViewModel? selectedAlbum)
    {
        IEnumerable<Song> songsToFilter = allSongs;

        // Priority:
        // 1. If an album is selected, filter by album (and its artist).
        // 2. Else if an artist is selected, filter by artist.
        // 3. Else if a search query is present, filter by query.
        // 4. Else, show all songs (after ordering).

        bool specificAlbumSelected = selectedAlbum?.Title != null && selectedAlbum.Artist != null;
        bool specificArtistSelected = selectedArtist?.Name != null;

        if (specificAlbumSelected)
        {
            // When an album is selected, the searchQuery is often set to the album title.
            // We should primarily filter by the album's identity.
            songsToFilter = songsToFilter.Where(s =>
                (s.Album?.Equals(selectedAlbum!.Title, StringComparison.OrdinalIgnoreCase) ?? false) &&
                (s.Artist?.Equals(selectedAlbum!.Artist, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        else if (specificArtistSelected)
        {
            // When an artist is selected, the searchQuery is often set to the artist name.
            // Filter by the artist's identity.
            songsToFilter = songsToFilter.Where(s =>
                s.Artist?.Equals(selectedArtist!.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        else if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            string query = searchQuery.ToLowerInvariant().Trim();
            songsToFilter = songsToFilter.Where(s =>
                (s.Title?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false) ||
                (s.Artist?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false) ||
                (s.Album?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false));
        }

        return songsToFilter.OrderBy(s => s.Title, StringComparer.OrdinalIgnoreCase);
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\TrackNavigationManager.cs">
using System;
using System.Collections.ObjectModel; // For ObservableCollection
using System.Diagnostics;
using System.Linq;
using System.Windows.Input;
using Sonorize.Models;

namespace Sonorize.ViewModels.LibraryManagement;

public class TrackNavigationManager : ViewModelBase // Inherit for RelayCommand's RaiseCanExecuteChanged if needed
{
    private readonly ObservableCollection<Song> _filteredSongs;
    private Song? _selectedSong;

    public Song? SelectedSong
    {
        get => _selectedSong;
        set
        {
            // This setter is crucial. It's what the LibraryViewModel will call.
            // Or, LibraryViewModel could expose its SelectedSong and FilteredSongs
            // and this manager could observe them. For direct control, LibraryViewModel calls this.
            if (SetProperty(ref _selectedSong, value))
            {
                RaiseCanExecuteChangedForAllCommands();
            }
        }
    }

    public ICommand PreviousTrackCommand { get; }
    public ICommand NextTrackCommand { get; }

    public TrackNavigationManager(ObservableCollection<Song> filteredSongs)
    {
        _filteredSongs = filteredSongs ?? throw new ArgumentNullException(nameof(filteredSongs));
        _filteredSongs.CollectionChanged += (s, e) => RaiseCanExecuteChangedForAllCommands();

        PreviousTrackCommand = new RelayCommand(ExecutePreviousTrack, CanExecutePreviousTrack);
        NextTrackCommand = new RelayCommand(ExecuteNextTrack, CanExecuteNextTrack);
    }

    // This method will be called by LibraryViewModel when its SelectedSong changes
    public void UpdateSelectedSong(Song? newSelectedSong)
    {
        if (_selectedSong != newSelectedSong)
        {
            _selectedSong = newSelectedSong; // Update internal state
            RaiseCanExecuteChangedForAllCommands(); // Update command states
        }
    }


    private void ExecutePreviousTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        if (currentIndex > 0)
        {
            SelectedSong = _filteredSongs[currentIndex - 1]; // This will trigger property changed & command updates
            Debug.WriteLine($"[TrackNavManager] Moved to previous track: {SelectedSong.Title}");
        }
        else
        {
            Debug.WriteLine("[TrackNavManager] Already at the first track.");
        }
    }

    private bool CanExecutePreviousTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return false;
        return _filteredSongs.IndexOf(_selectedSong) > 0;
    }

    private void ExecuteNextTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        if (currentIndex < _filteredSongs.Count - 1 && currentIndex != -1)
        {
            SelectedSong = _filteredSongs[currentIndex + 1]; // This will trigger property changed & command updates
            Debug.WriteLine($"[TrackNavManager] Moved to next track: {SelectedSong.Title}");
        }
        else if (currentIndex != -1)
        {
            Debug.WriteLine("[TrackNavManager] Already at the last track.");
        }
        else
        {
            Debug.WriteLine("[TrackNavManager] Selected song not found in filtered list.");
        }
    }

    private bool CanExecuteNextTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return false;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        return currentIndex != -1 && currentIndex < _filteredSongs.Count - 1;
    }

    private void RaiseCanExecuteChangedForAllCommands()
    {
        (PreviousTrackCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (NextTrackCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    // Optional: Expose an event if LibraryViewModel needs to react to selection changes from this manager
    // public event Action<Song?>? ManagedSelectionChanged;
}
</file>

<file path="Source\ViewModels\Loop\LoopCandidateViewModel.cs">
using System;
using System.ComponentModel;
using System.Windows.Input;
using Sonorize.Models;
using Sonorize.Services; // For PlaybackService (to get CurrentPosition)

namespace Sonorize.ViewModels;

public class LoopCandidateViewModel : ViewModelBase
{
    private readonly PlaybackService _playbackService;
    private readonly Func<Song?> _getCurrentSongCallback; // To check if a song is loaded

    private TimeSpan? _newLoopStartCandidate;
    public TimeSpan? NewLoopStartCandidate
    {
        get => _newLoopStartCandidate;
        set
        {
            if (SetProperty(ref _newLoopStartCandidate, value))
            {
                OnPropertyChanged(nameof(NewLoopStartCandidateDisplay));
                // Notify parent VM or raise an event if CanSave in parent depends on this directly
                ParentLoopEditor?.RaiseCanSaveLoopRegionChanged();
            }
        }
    }

    private TimeSpan? _newLoopEndCandidate;
    public TimeSpan? NewLoopEndCandidate
    {
        get => _newLoopEndCandidate;
        set
        {
            if (SetProperty(ref _newLoopEndCandidate, value))
            {
                OnPropertyChanged(nameof(NewLoopEndCandidateDisplay));
                ParentLoopEditor?.RaiseCanSaveLoopRegionChanged();
            }
        }
    }

    public string NewLoopStartCandidateDisplay => NewLoopStartCandidate.HasValue ? $"{NewLoopStartCandidate.Value:mm\\:ss\\.ff}" : "Not set";
    public string NewLoopEndCandidateDisplay => NewLoopEndCandidate.HasValue ? $"{NewLoopEndCandidate.Value:mm\\:ss\\.ff}" : "Not set";

    public ICommand CaptureLoopStartCandidateCommand { get; }
    public ICommand CaptureLoopEndCandidateCommand { get; }

    // Reference to parent to notify about changes affecting CanSaveLoopRegion
    // This is a simple way; alternatively, events could be used.
    internal LoopEditorViewModel? ParentLoopEditor { get; set; }


    public LoopCandidateViewModel(PlaybackService playbackService, Func<Song?> getCurrentSongCallback)
    {
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        _getCurrentSongCallback = getCurrentSongCallback ?? throw new ArgumentNullException(nameof(getCurrentSongCallback));

        CaptureLoopStartCandidateCommand = new RelayCommand(
            _ => NewLoopStartCandidate = _playbackService.CurrentPosition,
            CanCaptureLoopPoint);

        CaptureLoopEndCandidateCommand = new RelayCommand(
            _ => NewLoopEndCandidate = _playbackService.CurrentPosition,
            CanCaptureLoopPoint);

        _playbackService.PropertyChanged += PlaybackService_PropertyChanged;
    }

    private void PlaybackService_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(PlaybackService.CurrentPlaybackStatus) || e.PropertyName == nameof(PlaybackService.CurrentSong))
        {
            RaiseCaptureCommandsCanExecuteChanged();
        }
    }

    private bool CanCaptureLoopPoint(object? _) =>
        _getCurrentSongCallback() != null &&
        _playbackService.CurrentPlaybackStatus != PlaybackStateStatus.Stopped;

    public void RaiseCaptureCommandsCanExecuteChanged()
    {
        (CaptureLoopStartCandidateCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (CaptureLoopEndCandidateCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    public void ClearCandidates()
    {
        NewLoopStartCandidate = null;
        NewLoopEndCandidate = null;
    }

    public void Dispose()
    {
        _playbackService.PropertyChanged -= PlaybackService_PropertyChanged;
        ParentLoopEditor = null; // Clear reference
    }
}
</file>

<file path="Source\ViewModels\Loop\LoopEditorViewModel.cs">
using System;
using System.Diagnostics;
using System.Windows.Input;
using Avalonia.Threading; // Required for Dispatcher
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels;

public class LoopEditorViewModel : ViewModelBase, IDisposable
{
    private readonly PlaybackService _playbackService;
    private readonly LoopDataService _loopDataService;
    private Song? _currentSongInternal; // Holds the Song instance from PlaybackService.CurrentSong

    public LoopCandidateViewModel CandidateLoop { get; }

    private string _activeLoopDisplayText = "No loop defined.";
    public string ActiveLoopDisplayText { get => _activeLoopDisplayText; set => SetProperty(ref _activeLoopDisplayText, value); }

    private bool _isCurrentLoopActiveUiBinding;
    public bool IsCurrentLoopActiveUiBinding
    {
        get => _isCurrentLoopActiveUiBinding;
        set
        {
            if (SetProperty(ref _isCurrentLoopActiveUiBinding, value))
            {
                if (_currentSongInternal != null && _currentSongInternal.SavedLoop != null)
                {
                    _currentSongInternal.IsLoopActive = value;
                    Debug.WriteLine($"[LoopEdVM] UI binding set IsLoopActive on Song '{_currentSongInternal.Title}' to: {value}");
                }
                else if (_currentSongInternal != null && _currentSongInternal.SavedLoop == null && value == true)
                {
                    _isCurrentLoopActiveUiBinding = false;
                    OnPropertyChanged(nameof(IsCurrentLoopActiveUiBinding));
                    Debug.WriteLine($"[LoopEdVM] Attempted to activate loop via UI, but no loop is defined for {_currentSongInternal.Title}.");
                }
            }
        }
    }

    public bool CanSaveLoopRegion => _currentSongInternal != null
                                     && CandidateLoop.NewLoopStartCandidate.HasValue
                                     && CandidateLoop.NewLoopEndCandidate.HasValue
                                     && CandidateLoop.NewLoopEndCandidate.Value > CandidateLoop.NewLoopStartCandidate.Value
                                     && _currentSongInternal.Duration.TotalSeconds > 0
                                     && CandidateLoop.NewLoopEndCandidate.Value <= _currentSongInternal.Duration
                                     && CandidateLoop.NewLoopStartCandidate.Value >= TimeSpan.Zero;

    // Delegate capture commands to LoopCandidateViewModel
    public ICommand CaptureLoopStartCandidateCommand => CandidateLoop.CaptureLoopStartCandidateCommand;
    public ICommand CaptureLoopEndCandidateCommand => CandidateLoop.CaptureLoopEndCandidateCommand;

    public ICommand SaveLoopCommand { get; }
    public ICommand ClearLoopCommand { get; }
    public ICommand ToggleLoopActiveCommand { get; }
    public ICommand WaveformSeekCommand { get; }


    public LoopEditorViewModel(PlaybackService playbackService, LoopDataService loopDataService)
    {
        _playbackService = playbackService;
        _loopDataService = loopDataService;

        CandidateLoop = new LoopCandidateViewModel(playbackService, () => _currentSongInternal);
        CandidateLoop.ParentLoopEditor = this; // Allow child to notify parent

        SaveLoopCommand = new RelayCommand(SaveLoopAction, _ => CanSaveLoopRegion);
        ClearLoopCommand = new RelayCommand(ClearSavedLoopAction, _ => _currentSongInternal?.SavedLoop != null);
        ToggleLoopActiveCommand = new RelayCommand(ToggleCurrentSongLoopActive, _ => _currentSongInternal?.SavedLoop != null);
        WaveformSeekCommand = new RelayCommand(
            timeSpanObj => { if (timeSpanObj is TimeSpan ts && _currentSongInternal != null) _playbackService.Seek(ts); },
            _ => _currentSongInternal != null);

        _playbackService.PropertyChanged += PlaybackService_PropertyChanged;
        UpdateStateForCurrentSong(_playbackService.CurrentSong);
    }

    internal void RaiseCanSaveLoopRegionChanged()
    {
        OnPropertyChanged(nameof(CanSaveLoopRegion));
        (SaveLoopCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    private void PlaybackService_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            switch (e.PropertyName)
            {
                case nameof(PlaybackService.CurrentSong):
                    Debug.WriteLine($"[LoopEdVM] PlaybackService.CurrentSong changed to: {_playbackService.CurrentSong?.Title ?? "null"}. Updating loop state.");
                    if (_currentSongInternal != null)
                    {
                        _currentSongInternal.PropertyChanged -= CurrentSong_PropertyChanged;
                    }
                    _currentSongInternal = _playbackService.CurrentSong;
                    if (_currentSongInternal != null)
                    {
                        _currentSongInternal.PropertyChanged += CurrentSong_PropertyChanged;
                    }
                    UpdateStateForCurrentSong(_currentSongInternal);
                    break;
                case nameof(PlaybackService.CurrentPosition):
                case nameof(PlaybackService.CurrentSongDuration):
                    RaiseCanSaveLoopRegionChanged();
                    CandidateLoop.RaiseCaptureCommandsCanExecuteChanged(); // Capture commands depend on playback status/song
                    UpdateActiveLoopDisplayText();
                    break;
                case nameof(PlaybackService.CurrentPlaybackStatus):
                    CandidateLoop.RaiseCaptureCommandsCanExecuteChanged();
                    break;
            }
            // All commands might be affected by song or playback state changes
            RaiseMainLoopCommandsCanExecuteChanged();
        });
    }

    private void CurrentSong_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            if (sender is Song song && song == _currentSongInternal)
            {
                switch (e.PropertyName)
                {
                    case nameof(Song.SavedLoop):
                        Debug.WriteLine($"[LoopEdVM] CurrentSong.SavedLoop changed for {song.Title}. Updating loop state.");
                        UpdateStateForCurrentSong(song);
                        break;
                    case nameof(Song.IsLoopActive):
                        Debug.WriteLine($"[LoopEdVM] CurrentSong.IsLoopActive changed to {song.IsLoopActive} for {song.Title}. Updating UI binding and persisting.");
                        if (_isCurrentLoopActiveUiBinding != song.IsLoopActive)
                        {
                            _isCurrentLoopActiveUiBinding = song.IsLoopActive;
                            OnPropertyChanged(nameof(IsCurrentLoopActiveUiBinding));
                        }
                        if (song.SavedLoop != null)
                        {
                            _loopDataService.UpdateLoopActiveState(song.FilePath, song.IsLoopActive);
                        }
                        UpdateActiveLoopDisplayText();
                        break;
                }
            }
        });
    }

    private void UpdateStateForCurrentSong(Song? song)
    {
        Debug.WriteLine($"[LoopEdVM] UpdateStateForCurrentSong called for: {song?.Title ?? "null"}");
        if (song?.SavedLoop != null)
        {
            CandidateLoop.NewLoopStartCandidate = song.SavedLoop.Start;
            CandidateLoop.NewLoopEndCandidate = song.SavedLoop.End;
            IsCurrentLoopActiveUiBinding = song.IsLoopActive;
        }
        else
        {
            CandidateLoop.ClearCandidates();
            IsCurrentLoopActiveUiBinding = false;
        }
        UpdateActiveLoopDisplayText();
        RaiseCanSaveLoopRegionChanged();
        RaiseMainLoopCommandsCanExecuteChanged();
        CandidateLoop.RaiseCaptureCommandsCanExecuteChanged();
    }

    private void SaveLoopAction(object? param)
    {
        var currentSong = _currentSongInternal;
        if (!CanSaveLoopRegion || currentSong == null || !CandidateLoop.NewLoopStartCandidate.HasValue || !CandidateLoop.NewLoopEndCandidate.HasValue)
        {
            Debug.WriteLine("[LoopEdVM] SaveLoopAction skipped: conditions not met.");
            return;
        }

        var newLoop = new LoopRegion(CandidateLoop.NewLoopStartCandidate.Value, CandidateLoop.NewLoopEndCandidate.Value, "User Loop");
        bool shouldBeActive = (currentSong.SavedLoop != null && currentSong.IsLoopActive) || currentSong.SavedLoop == null;

        currentSong.SavedLoop = newLoop;
        if (currentSong.IsLoopActive != shouldBeActive)
        {
            currentSong.IsLoopActive = shouldBeActive;
        }
        else
        {
            _loopDataService.SetLoop(currentSong.FilePath, newLoop.Start, newLoop.End, currentSong.IsLoopActive);
        }
        Debug.WriteLine($"[LoopEdVM] Loop saved for {currentSong.Title}. Start: {newLoop.Start}, End: {newLoop.End}, Active: {currentSong.IsLoopActive}");
        UpdateStateForCurrentSong(currentSong);
    }

    private void ClearSavedLoopAction(object? param)
    {
        var currentSong = _currentSongInternal;
        if (currentSong != null)
        {
            var filePath = currentSong.FilePath;
            Debug.WriteLine($"[LoopEdVM] Clearing loop for {currentSong.Title}.");
            currentSong.SavedLoop = null;
            currentSong.IsLoopActive = false;
            if (!string.IsNullOrEmpty(filePath))
            {
                _loopDataService.ClearLoop(filePath);
            }
        }
        CandidateLoop.ClearCandidates();
        UpdateStateForCurrentSong(currentSong);
    }

    private void ToggleCurrentSongLoopActive(object? parameter)
    {
        if (_currentSongInternal != null && _currentSongInternal.SavedLoop != null)
        {
            Debug.WriteLine($"[LoopEdVM] Toggling loop active state for {_currentSongInternal.Title}. Current: {_currentSongInternal.IsLoopActive}");
            IsCurrentLoopActiveUiBinding = !_isCurrentLoopActiveUiBinding;
        }
    }

    private void UpdateActiveLoopDisplayText()
    {
        var currentSong = _currentSongInternal;
        if (currentSong?.SavedLoop != null)
        {
            var loop = currentSong.SavedLoop;
            string activeStatus = currentSong.IsLoopActive ? " (Active)" : " (Inactive)";
            ActiveLoopDisplayText = $"Loop: {loop.Start:mm\\:ss\\.f} - {loop.End:mm\\:ss\\.f}{activeStatus}";
        }
        else
        {
            ActiveLoopDisplayText = "No loop defined.";
        }
    }

    public void RaiseMainLoopCommandsCanExecuteChanged()
    {
        (SaveLoopCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ClearLoopCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ToggleLoopActiveCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (WaveformSeekCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    public void Dispose()
    {
        if (_currentSongInternal != null)
        {
            _currentSongInternal.PropertyChanged -= CurrentSong_PropertyChanged;
        }
        _playbackService.PropertyChanged -= PlaybackService_PropertyChanged;
        CandidateLoop.Dispose(); // Dispose the child ViewModel
        CandidateLoop.ParentLoopEditor = null; // Break cycle if any strict GC needs it
    }
}
</file>

<file path="Source\ViewModels\MainWindow\MainWindowViewModel.cs">
using System;
using System.Collections.Generic; // Added for List<string>
using System.ComponentModel;
using System.Diagnostics;
using System.IO; // Required for Path.GetFullPath, Directory.Exists
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;
// Removed: using Sonorize.ViewModels.Status; // StatusBarTextProvider usage moved
using Sonorize.ViewModels.LibraryManagement; // Required for LibraryDisplayModeService

namespace Sonorize.ViewModels;

public class MainWindowViewModel : ViewModelBase, IDisposable
{
    private readonly SettingsService _settingsService;
    private readonly MusicLibraryService _musicLibraryService;
    private readonly WaveformService _waveformService;
    private readonly LoopDataService _loopDataService;
    private readonly ScrobblingService _scrobblingService;

    private readonly MainWindowViewModelOrchestrator _orchestrator;
    private readonly ApplicationWorkflowManager _workflowManager; // New workflow manager
    private readonly LibraryDisplayModeService _libraryDisplayModeService;


    // Expose the Services directly for child VMs or public properties
    public PlaybackService PlaybackService { get; }
    public ThemeColors CurrentTheme { get; }

    // Expose the child ViewModels
    public LibraryViewModel Library { get; set; }
    public LoopEditorViewModel LoopEditor { get; }
    public PlaybackViewModel Playback { get; }
    public AdvancedPanelViewModel AdvancedPanel { get; }
    public string StatusBarText { get => field; set => SetProperty(ref field, value); } = "Welcome to Sonorize!";

    public int ActiveTabIndex { get => field; set => SetProperty(ref field, value); } = 0;

    public bool IsLoadingLibrary { get => Library.IsLoadingLibrary; }

    public bool IsAdvancedPanelVisible
    {
        get => AdvancedPanel.IsVisible;
        set
        {
            if (AdvancedPanel.IsVisible != value)
            {
                AdvancedPanel.IsVisible = value;
                OnPropertyChanged();
            }
        }
    }
    public ICommand ToggleAdvancedPanelCommand => AdvancedPanel.ToggleVisibilityCommand;


    public ICommand LoadInitialDataCommand { get; }
    public ICommand OpenSettingsCommand { get; }
    public ICommand ExitCommand { get; }
    public ICommand AddDirectoryAndRefreshCommand { get; }

    public MainWindowViewModel(
        SettingsService settingsService,
        MusicLibraryService musicLibraryService,
        PlaybackService playbackService,
        ThemeColors theme,
        WaveformService waveformService,
        LoopDataService loopDataService,
        ScrobblingService scrobblingService)
    {
        _settingsService = settingsService;
        _musicLibraryService = musicLibraryService;
        PlaybackService = playbackService;
        CurrentTheme = theme;
        _waveformService = waveformService;
        _loopDataService = loopDataService;
        _scrobblingService = scrobblingService;

        _libraryDisplayModeService = new LibraryDisplayModeService(_settingsService);
        Library = new LibraryViewModel(this, _settingsService, _musicLibraryService, _loopDataService, _libraryDisplayModeService);
        Playback = new PlaybackViewModel(PlaybackService, _waveformService);
        LoopEditor = new LoopEditorViewModel(PlaybackService, _loopDataService);
        AdvancedPanel = new AdvancedPanelViewModel(Playback, Library);

        // Instantiate the workflow manager, passing necessary dependencies
        _workflowManager = new ApplicationWorkflowManager(
            _settingsService,
            _scrobblingService,
            CurrentTheme,
            Library,
            Playback,
            PlaybackService,
            _loopDataService); // Pass LoopDataService, though ApplicationWorkflowManager might not use it directly currently

        _orchestrator = new MainWindowViewModelOrchestrator(
            Library,
            Playback,
            AdvancedPanel,
            RaiseAllCommandsCanExecuteChanged,
            UpdateStatusBarText,
            (propertyName) => OnPropertyChanged(propertyName)
        );

        PlaybackService.PlaybackEndedNaturally += PlaybackService_PlaybackEndedNaturally;

        LoadInitialDataCommand = new RelayCommand(async _ => await Library.LoadLibraryAsync(), _ => !Library.IsLoadingLibrary && (Playback.WaveformDisplay == null || !Playback.WaveformDisplay.IsWaveformLoading));
        OpenSettingsCommand = new RelayCommand(async owner => await OpenSettingsDialogAsync(owner), _ => !Library.IsLoadingLibrary && (Playback.WaveformDisplay == null || !Playback.WaveformDisplay.IsWaveformLoading));
        ExitCommand = new RelayCommand(_ => Environment.Exit(0));
        AddDirectoryAndRefreshCommand = new RelayCommand(async owner => await AddMusicDirectoryAndRefreshAsync(owner), _ => !Library.IsLoadingLibrary && (Playback.WaveformDisplay == null || !Playback.WaveformDisplay.IsWaveformLoading));

        Dispatcher.UIThread.InvokeAsync(UpdateAllUIDependentStates);
    }

    private void PlaybackService_PlaybackEndedNaturally(object? sender, EventArgs e)
    {
        Debug.WriteLine("[MainVM] PlaybackService_PlaybackEndedNaturally event received. Delegating to WorkflowManager.");
        _workflowManager.HandlePlaybackEndedNaturally();
        Debug.WriteLine("[MainVM] PlaybackService_PlaybackEndedNaturally handler completed after delegation.");
    }

    private void UpdateAllUIDependentStates()
    {
        OnPropertyChanged(nameof(IsLoadingLibrary));
        OnPropertyChanged(nameof(Playback.CurrentSong));
        OnPropertyChanged(nameof(Playback.HasCurrentSong));
        OnPropertyChanged(nameof(Playback.CurrentPlaybackStatus));
        OnPropertyChanged(nameof(Playback.IsPlaying));
        OnPropertyChanged(nameof(Playback.CurrentTimeDisplay));
        OnPropertyChanged(nameof(Playback.TotalTimeDisplay));
        OnPropertyChanged(nameof(IsAdvancedPanelVisible));
        OnPropertyChanged(nameof(ActiveTabIndex));

        UpdateStatusBarText();
        RaiseAllCommandsCanExecuteChanged();
    }

    public void RaiseAllCommandsCanExecuteChanged()
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            (LoadInitialDataCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (OpenSettingsCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (ExitCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (AddDirectoryAndRefreshCommand as RelayCommand)?.RaiseCanExecuteChanged();

            Library.RaiseLibraryCommandsCanExecuteChanged();
            Playback.RaisePlaybackCommandCanExecuteChanged();
            LoopEditor.RaiseMainLoopCommandsCanExecuteChanged();
            LoopEditor.CandidateLoop.RaiseCaptureCommandsCanExecuteChanged();
            (AdvancedPanel.ToggleVisibilityCommand as RelayCommand)?.RaiseCanExecuteChanged();
        });
    }

    private void UpdateStatusBarText()
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            StatusBarText = _workflowManager.GetCurrentStatusText(LoopEditor);
        });
    }

    private async Task OpenSettingsDialogAsync(object? ownerWindow)
    {
        if (ownerWindow is not Window owner || Library.IsLoadingLibrary) return;
        IsAdvancedPanelVisible = false;

        var (statusMessages, settingsChanged) = await _workflowManager.HandleOpenSettingsDialogAsync(owner);

        if (settingsChanged)
        {
            if (statusMessages.Any())
            {
                StatusBarText = string.Join(" | ", statusMessages);
            }
            else
            {
                UpdateStatusBarText();
            }
        }
        else
        {
            UpdateStatusBarText();
        }
        RaiseAllCommandsCanExecuteChanged();
    }

    private async Task AddMusicDirectoryAndRefreshAsync(object? ownerWindow)
    {
        if (ownerWindow is not Window owner || Library.IsLoadingLibrary) return;
        IsAdvancedPanelVisible = false;

        var (directoryAdded, statusMessage) = await _workflowManager.HandleAddMusicDirectoryAsync(owner);

        StatusBarText = statusMessage;

        if (directoryAdded)
        {
            await Library.LoadLibraryAsync();
        }
        else
        {
            UpdateStatusBarText();
        }
        RaiseAllCommandsCanExecuteChanged();
    }

    public void Dispose()
    {
        if (PlaybackService != null)
        {
            PlaybackService.PlaybackEndedNaturally -= PlaybackService_PlaybackEndedNaturally;
        }
        _orchestrator?.Dispose();
        _workflowManager?.Dispose(); // Dispose the new manager
        // _libraryPlaybackLinkService was moved into _workflowManager
        Library?.Dispose();
        Playback?.Dispose();
        AdvancedPanel?.Dispose();
        LoopEditor?.Dispose();
    }
}
</file>

<file path="Source\ViewModels\MainWindow\MainWindowViewModelOrchestrator.cs">
using System;
using System.ComponentModel;
using Sonorize.ViewModels;

namespace Sonorize.ViewModels;

internal class MainWindowViewModelOrchestrator : IDisposable
{
    private readonly LibraryViewModel _libraryViewModel;
    private readonly PlaybackViewModel _playbackViewModel;
    private readonly AdvancedPanelViewModel _advancedPanelViewModel;

    private readonly Action _raiseAllCommandsCanExecuteChangedCallback;
    private readonly Action _updateStatusBarTextCallback;
    private readonly Action<string> _notifyMainWindowVMPropertyChangedCallback;

    public MainWindowViewModelOrchestrator(
        LibraryViewModel libraryViewModel,
        PlaybackViewModel playbackViewModel,
        AdvancedPanelViewModel advancedPanelViewModel,
        Action raiseAllCommandsCanExecuteChangedCallback,
        Action updateStatusBarTextCallback,
        Action<string> notifyMainWindowVMPropertyChangedCallback)
    {
        _libraryViewModel = libraryViewModel ?? throw new ArgumentNullException(nameof(libraryViewModel));
        _playbackViewModel = playbackViewModel ?? throw new ArgumentNullException(nameof(playbackViewModel));
        _advancedPanelViewModel = advancedPanelViewModel ?? throw new ArgumentNullException(nameof(advancedPanelViewModel));
        _raiseAllCommandsCanExecuteChangedCallback = raiseAllCommandsCanExecuteChangedCallback ?? throw new ArgumentNullException(nameof(raiseAllCommandsCanExecuteChangedCallback));
        _updateStatusBarTextCallback = updateStatusBarTextCallback ?? throw new ArgumentNullException(nameof(updateStatusBarTextCallback));
        _notifyMainWindowVMPropertyChangedCallback = notifyMainWindowVMPropertyChangedCallback ?? throw new ArgumentNullException(nameof(notifyMainWindowVMPropertyChangedCallback));

        SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
        _libraryViewModel.PropertyChanged += Library_PropertyChanged;
        _playbackViewModel.PropertyChanged += Playback_PropertyChanged;
        if (_playbackViewModel.ModeControls != null)
        {
            _playbackViewModel.ModeControls.PropertyChanged += PlaybackModeControls_PropertyChanged;
        }
        if (_playbackViewModel.WaveformDisplay != null)
        {
            _playbackViewModel.WaveformDisplay.PropertyChanged += PlaybackWaveformDisplay_PropertyChanged;
        }
        _advancedPanelViewModel.PropertyChanged += AdvancedPanel_PropertyChanged;
    }

    private void UnsubscribeFromEvents()
    {
        _libraryViewModel.PropertyChanged -= Library_PropertyChanged;
        _playbackViewModel.PropertyChanged -= Playback_PropertyChanged;
        if (_playbackViewModel.ModeControls != null)
        {
            _playbackViewModel.ModeControls.PropertyChanged -= PlaybackModeControls_PropertyChanged;
        }
        if (_playbackViewModel.WaveformDisplay != null)
        {
            _playbackViewModel.WaveformDisplay.PropertyChanged -= PlaybackWaveformDisplay_PropertyChanged;
        }
        _advancedPanelViewModel.PropertyChanged -= AdvancedPanel_PropertyChanged;
    }

    private void PlaybackWaveformDisplay_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(WaveformDisplayViewModel.IsWaveformLoading))
        {
            _raiseAllCommandsCanExecuteChangedCallback();
        }
    }

    private void AdvancedPanel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AdvancedPanelViewModel.IsVisible))
        {
            _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.IsAdvancedPanelVisible));
            _raiseAllCommandsCanExecuteChangedCallback();
        }
    }

    private void Library_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(LibraryViewModel.SelectedSong):
                _raiseAllCommandsCanExecuteChangedCallback();
                break;
            case nameof(LibraryViewModel.IsLoadingLibrary):
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.IsLoadingLibrary));
                _raiseAllCommandsCanExecuteChangedCallback();
                _updateStatusBarTextCallback();
                break;
            case nameof(LibraryViewModel.LibraryStatusText):
                _updateStatusBarTextCallback();
                break;
        }
    }

    private void Playback_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(PlaybackViewModel.CurrentSong):
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentSong)); // Or just rely on MainWindowViewModel.Playback being the source
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.HasCurrentSong));
                _raiseAllCommandsCanExecuteChangedCallback();
                _updateStatusBarTextCallback();
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentTimeDisplay));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.TotalTimeDisplay));
                break;
            case nameof(PlaybackViewModel.CurrentPlaybackStatus):
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentPlaybackStatus));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.IsPlaying));
                _updateStatusBarTextCallback();
                _raiseAllCommandsCanExecuteChangedCallback();
                break;
            case nameof(PlaybackViewModel.CurrentPosition):
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentPosition));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentPositionSeconds));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentTimeDisplay));
                break;
            case nameof(PlaybackViewModel.CurrentSongDuration):
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentSongDuration));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.CurrentSongDurationSeconds));
                _notifyMainWindowVMPropertyChangedCallback(nameof(MainWindowViewModel.Playback.TotalTimeDisplay));
                _raiseAllCommandsCanExecuteChangedCallback();
                break;
        }
    }

    private void PlaybackModeControls_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(PlaybackModeViewModel.ShuffleEnabled):
            case nameof(PlaybackModeViewModel.RepeatMode):
                _playbackViewModel.RaisePlaybackCommandCanExecuteChanged(); // PlaybackVM raises its own commands
                _updateStatusBarTextCallback();
                break;
        }
    }

    public void Dispose()
    {
        UnsubscribeFromEvents();
        GC.SuppressFinalize(this);
    }
}
</file>

<file path="Source\ViewModels\Settings\SettingsPersistenceManager.cs">
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels;

public class SettingsPersistenceManager
{
    private readonly SettingsService _settingsService;

    public SettingsPersistenceManager(SettingsService settingsService)
    {
        _settingsService = settingsService ?? throw new System.ArgumentNullException(nameof(settingsService));
    }

    public bool ApplyAndSaveChanges(
        AppSettings settingsOnDisk,
        IEnumerable<string> currentUiMusicDirs,
        IEnumerable<string> initialUiMusicDirs, // Used to detect if UI list changed from its initial state
        string? currentUiSelectedTheme,
        LastfmSettingsViewModel currentUiLastfmSettings)
    {
        AppSettings newSettingsToSave = new();

        // Preserve settings not managed by SettingsViewModel's UI by copying from disk state
        newSettingsToSave.LibraryViewModePreference = settingsOnDisk.LibraryViewModePreference;
        newSettingsToSave.ArtistViewModePreference = settingsOnDisk.ArtistViewModePreference;
        newSettingsToSave.AlbumViewModePreference = settingsOnDisk.AlbumViewModePreference;
        newSettingsToSave.LastfmSessionKey = settingsOnDisk.LastfmSessionKey;
        // Add any other unmanaged settings here if AppSettings grows

        bool actualChangesMade = false;

        // Music Directories
        // A change is made if the current UI list is different from its initial state OR different from disk state
        if (!initialUiMusicDirs.SequenceEqual(currentUiMusicDirs) ||
            !settingsOnDisk.MusicDirectories.SequenceEqual(currentUiMusicDirs))
        {
            newSettingsToSave.MusicDirectories = new List<string>(currentUiMusicDirs);
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsPersistence] Music directories changed. Count: {newSettingsToSave.MusicDirectories.Count}");
        }
        else
        {
            newSettingsToSave.MusicDirectories = new List<string>(settingsOnDisk.MusicDirectories);
        }

        // Theme
        if (settingsOnDisk.PreferredThemeFileName != currentUiSelectedTheme)
        {
            newSettingsToSave.PreferredThemeFileName = currentUiSelectedTheme;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsPersistence] Theme changed to: {currentUiSelectedTheme}");
        }
        else
        {
            newSettingsToSave.PreferredThemeFileName = settingsOnDisk.PreferredThemeFileName;
        }

        // Last.fm Settings - Compare UI state against disk state for change detection
        if (settingsOnDisk.LastfmScrobblingEnabled != currentUiLastfmSettings.LastfmScrobblingEnabled) actualChangesMade = true;
        if (settingsOnDisk.LastfmUsername != currentUiLastfmSettings.LastfmUsername) actualChangesMade = true;
        // Password comparison: change if UI has a new password (and it's different from disk, though disk doesn't store it long-term)
        // Or, more simply, if the password field in UI was touched and is not null.
        // The original logic was: settingsOnDisk.LastfmPassword != LastfmSettings.LastfmPassword && !string.IsNullOrEmpty(LastfmSettings.LastfmPassword)
        // This implies if LastfmSettings.LastfmPassword is set, it's a change (as disk password is nulled after session key).
        if (!string.IsNullOrEmpty(currentUiLastfmSettings.LastfmPassword)) actualChangesMade = true; // If a password was entered, consider it a change for re-auth.
        if (settingsOnDisk.ScrobbleThresholdPercentage != currentUiLastfmSettings.ScrobbleThresholdPercentage) actualChangesMade = true;
        if (settingsOnDisk.ScrobbleThresholdAbsoluteSeconds != currentUiLastfmSettings.ScrobbleThresholdAbsoluteSeconds) actualChangesMade = true;

        // Apply UI Last.fm settings to newSettingsToSave object
        currentUiLastfmSettings.UpdateAppSettings(newSettingsToSave);
        if (actualChangesMade)
        {
            // Log Last.fm specific changes if any were part of overall changes
            Debug.WriteLine($"[SettingsPersistence] Last.fm settings potentially updated in newSettingsToSave: " +
                          $"Scrobbling={newSettingsToSave.LastfmScrobblingEnabled}, " +
                          $"User={newSettingsToSave.LastfmUsername}, " +
                          $"PassLen={(newSettingsToSave.LastfmPassword?.Length ?? 0)}, " +
                          $"Thresh%={newSettingsToSave.ScrobbleThresholdPercentage}, " +
                          $"ThreshAbsSec={newSettingsToSave.ScrobbleThresholdAbsoluteSeconds}");
        }


        if (actualChangesMade)
        {
            _settingsService.SaveSettings(newSettingsToSave);
            Debug.WriteLine("[SettingsPersistence] Actual changes detected and settings saved.");
            return true;
        }

        Debug.WriteLine("[SettingsPersistence] No actual changes to persist.");
        return false;
    }
}
</file>

<file path="Source\ViewModels\Settings\SettingsViewModel.cs">
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Sonorize.Models; // Required for AppSettings type
using Sonorize.Services;

namespace Sonorize.ViewModels;

public enum SettingsViewSection
{
    Directories,
    Theme,
    Scrobbling
}

public class SettingsViewModel : ViewModelBase
{
    private readonly SettingsService _settingsService;
    private readonly ThemeService _themeService;
    private readonly SettingsPersistenceManager _settingsPersistenceManager;

    public ObservableCollection<string> MusicDirectories { get; } = new();
    public List<string> InitialMusicDirectories { get; private set; }

    public string? SelectedDirectory
    {
        get;

        set => SetProperty(ref field, value, nameof(CanRemoveDirectory));
    }

    public ObservableCollection<string> AvailableThemes { get; } = new();

    public string? SelectedThemeFile
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }
            MarkSettingsChanged();
        }
    }

    // Encapsulated Last.fm Settings
    public LastfmSettingsViewModel LastfmSettings { get; }


    public bool SettingsChanged { get; private set; } = false;

    private SettingsViewSection _currentSettingsViewSection = SettingsViewSection.Directories;
    public SettingsViewSection CurrentSettingsViewSection
    {
        get => _currentSettingsViewSection;
        set => SetProperty(ref _currentSettingsViewSection, value);
    }

    public ICommand AddDirectoryCommand { get; }
    public ICommand RemoveDirectoryCommand { get; }
    public ICommand SaveAndCloseCommand { get; }
    public ICommand ShowDirectoriesSettingsCommand { get; }
    public ICommand ShowThemeSettingsCommand { get; }
    public ICommand ShowScrobblingSettingsCommand { get; }


    public bool CanRemoveDirectory => SelectedDirectory != null;

    public SettingsViewModel(SettingsService settingsService)
    {
        _settingsService = settingsService;
        _themeService = new ThemeService(null); // ThemeService used for GetAvailableThemeFiles
        _settingsPersistenceManager = new SettingsPersistenceManager(settingsService);

        var settings = _settingsService.LoadSettings();
        InitialMusicDirectories = new List<string>(settings.MusicDirectories);

        foreach (var dir in settings.MusicDirectories)
        {
            MusicDirectories.Add(dir);
        }

        foreach (var themeFile in _themeService.GetAvailableThemeFiles())
        {
            AvailableThemes.Add(themeFile);
        }

        SelectedThemeFile = settings.PreferredThemeFileName ?? ThemeService.DefaultThemeFileName;
        if (!AvailableThemes.Contains(SelectedThemeFile) && AvailableThemes.Any())
        {
            SelectedThemeFile = AvailableThemes.First();
        }

        // Initialize Last.fm settings module
        LastfmSettings = new LastfmSettingsViewModel();
        LastfmSettings.LoadFromSettings(settings);
        LastfmSettings.PropertyChanged += (s, e) => MarkSettingsChanged();


        SettingsChanged = false; // Initial state is unchanged

        AddDirectoryCommand = new RelayCommand(async owner => await AddDirectory(owner as Window));
        RemoveDirectoryCommand = new RelayCommand(RemoveSelectedDirectory, _ => CanRemoveDirectory);
        SaveAndCloseCommand = new RelayCommand(SaveSettings);

        ShowDirectoriesSettingsCommand = new RelayCommand(_ => CurrentSettingsViewSection = SettingsViewSection.Directories);
        ShowThemeSettingsCommand = new RelayCommand(_ => CurrentSettingsViewSection = SettingsViewSection.Theme);
        ShowScrobblingSettingsCommand = new RelayCommand(_ => CurrentSettingsViewSection = SettingsViewSection.Scrobbling);


        PropertyChanged += (s, e) =>
        {
            if (e.PropertyName == nameof(SelectedDirectory))
            {
                (RemoveDirectoryCommand as RelayCommand)?.RaiseCanExecuteChanged();
            }
            // Changes to SelectedThemeFile already call MarkSettingsChanged in their setter
        };
        MusicDirectories.CollectionChanged += (s, e) => MarkSettingsChanged();
    }

    private void MarkSettingsChanged()
    {
        if (!SettingsChanged)
        {
            SettingsChanged = true;
            Debug.WriteLine("[SettingsVM] Settings marked as changed (UI interaction).");
        }
    }


    private async Task AddDirectory(Window? owner)
    {
        if (owner?.StorageProvider == null)
        {
            Debug.WriteLine("StorageProvider is not available.");
            return;
        }

        var options = new FolderPickerOpenOptions
        {
            Title = "Select Music Directory",
            AllowMultiple = false
        };

        var result = await owner.StorageProvider.OpenFolderPickerAsync(options);

        if (result != null && result.Count > 0)
        {
            var folder = result.FirstOrDefault();
            if (folder == null) return;

            var path = folder.Path.LocalPath;
            if (string.IsNullOrEmpty(path) || MusicDirectories.Contains(path)) return;

            MusicDirectories.Add(path);
            // MarkSettingsChanged() is called by CollectionChanged handler
        }
    }

    private void RemoveSelectedDirectory(object? parameter)
    {
        if (SelectedDirectory == null) return;

        MusicDirectories.Remove(SelectedDirectory);
        SelectedDirectory = null;
        // MarkSettingsChanged() is called by CollectionChanged handler
    }

    private void SaveSettings(object? parameter)
    {
        AppSettings settingsOnDisk = _settingsService.LoadSettings();

        bool changesPersisted = _settingsPersistenceManager.ApplyAndSaveChanges(
            settingsOnDisk,
            this.MusicDirectories,
            this.InitialMusicDirectories,
            this.SelectedThemeFile,
            this.LastfmSettings
        );

        if (changesPersisted)
        {
            // Update the baseline for future comparisons if changes were actually saved
            this.InitialMusicDirectories = new List<string>(this.MusicDirectories);
            // SettingsChanged flag is used by ApplicationInteractionService to determine if post-save processing is needed.
            // If ApplyAndSaveChanges persisted anything, then SettingsChanged should be true.
            // If MarkSettingsChanged() was called due to UI interaction but no actual changes were persisted,
            // then SettingsChanged should reflect that no *persistent* change happened.
            this.SettingsChanged = true;
            Debug.WriteLine("[SettingsVM] Changes were persisted by SettingsPersistenceManager.");
        }
        else
        {
            // If no changes were persisted, ensure SettingsChanged reflects this,
            // even if UI interactions previously set it to true.
            // This is important because SettingsChanged is checked *after* this method by the caller.
            this.SettingsChanged = false;
            Debug.WriteLine("[SettingsVM] No changes were persisted by SettingsPersistenceManager.");
        }
    }
}
</file>

<file path="Source\Views\MainWindowControls\AdvancedPlaybackPanelControls.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // For Thumb
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Styling;
using Sonorize.Controls;
using Sonorize.Converters;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // For MainWindowViewModel, LoopEditorViewModel

namespace Sonorize.Views.MainWindowControls;

public static class AdvancedPlaybackPanelControls
{
    public static Border Create(ThemeColors theme)
    {
        var panelRoot = new Border
        {
            Background = theme.B_SlightlyLighterBackground,
            Padding = new Thickness(10),
            BorderBrush = theme.B_AccentColor,
            BorderThickness = new Thickness(0, 1, 0, 1),
            MinHeight = 180,
            ClipToBounds = true
        };
        var mainStack = new StackPanel { Spacing = 10 };

        // Speed and Pitch Controls
        var speedPitchGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto,15,Auto,*,Auto"), Margin = new Thickness(0, 0, 0, 5) };
        var speedLabel = new TextBlock { Text = "Tempo:", VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_TextColor, Margin = new Thickness(0, 0, 5, 0) };
        var speedSlider = new Slider { Minimum = 0.5, Maximum = 2.0, SmallChange = 0.05, LargeChange = 0.25, TickFrequency = 0.25, Foreground = theme.B_AccentColor, Background = theme.B_SecondaryTextColor };
        speedSlider.Styles.Add(new Style(s => s.Is<Thumb>()) { Setters = { new Setter(TemplatedControl.BackgroundProperty, theme.B_AccentColor) } });
        speedSlider.Bind(Slider.ValueProperty, new Binding("Playback.EffectsControls.PlaybackSpeed", BindingMode.TwoWay)); // Updated binding
        var speedDisplay = new TextBlock { VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 0), Foreground = theme.B_TextColor, MinWidth = 35, HorizontalAlignment = HorizontalAlignment.Right };
        speedDisplay.Bind(TextBlock.TextProperty, new Binding("Playback.EffectsControls.PlaybackSpeedDisplay")); // Updated binding

        var pitchLabel = new TextBlock { Text = "Pitch:", VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_TextColor, Margin = new Thickness(0, 0, 5, 0) };
        var pitchSlider = new Slider { Minimum = -4, Maximum = 4, SmallChange = 0.1, LargeChange = 0.5, TickFrequency = 0.5, Foreground = theme.B_AccentColor, Background = theme.B_SecondaryTextColor };
        pitchSlider.Styles.Add(new Style(s => s.Is<Thumb>()) { Setters = { new Setter(TemplatedControl.BackgroundProperty, theme.B_AccentColor) } });
        pitchSlider.Bind(Slider.ValueProperty, new Binding("Playback.EffectsControls.PlaybackPitch", BindingMode.TwoWay)); // Updated binding
        var pitchDisplay = new TextBlock { VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 0), Foreground = theme.B_TextColor, MinWidth = 45, HorizontalAlignment = HorizontalAlignment.Right };
        pitchDisplay.Bind(TextBlock.TextProperty, new Binding("Playback.EffectsControls.PlaybackPitchDisplay")); // Updated binding

        Grid.SetColumn(speedLabel, 0); Grid.SetColumn(speedSlider, 1); Grid.SetColumn(speedDisplay, 2);
        Grid.SetColumn(pitchLabel, 4); Grid.SetColumn(pitchSlider, 5); Grid.SetColumn(pitchDisplay, 6);
        speedPitchGrid.Children.Add(speedLabel); speedPitchGrid.Children.Add(speedSlider); speedPitchGrid.Children.Add(speedDisplay);
        speedPitchGrid.Children.Add(pitchLabel); speedPitchGrid.Children.Add(pitchSlider); speedPitchGrid.Children.Add(pitchDisplay);
        mainStack.Children.Add(speedPitchGrid);

        // Waveform Display
        Color accentColorForLoopRegion = (theme.B_AccentColor as ISolidColorBrush)?.Color ?? Colors.Orange;
        var waveformDisplay = new WaveformDisplayControl
        {
            Height = 80,
            MinHeight = 60,
            Background = theme.B_ControlBackgroundColor,
            WaveformBrush = theme.B_AccentColor,
            PositionMarkerBrush = Brushes.OrangeRed,
            LoopRegionBrush = new SolidColorBrush(accentColorForLoopRegion, 0.3)
        };
        waveformDisplay.Bind(WaveformDisplayControl.WaveformPointsProperty, new Binding("Playback.WaveformDisplay.WaveformRenderData"));
        waveformDisplay.Bind(WaveformDisplayControl.CurrentPositionProperty, new Binding("Playback.CurrentPosition"));
        waveformDisplay.Bind(WaveformDisplayControl.DurationProperty, new Binding("Playback.CurrentSongDuration"));
        waveformDisplay.Bind(WaveformDisplayControl.ActiveLoopProperty, new Binding("Playback.PlaybackService.CurrentSong.SavedLoop"));
        waveformDisplay.SeekRequested += (s, time) =>
        {
            if (s is Control { DataContext: MainWindowViewModel mainWindowVM })
            {
                mainWindowVM.LoopEditor.WaveformSeekCommand.Execute(time);
            }
        };

        var waveformLoadingIndicator = new ProgressBar { IsIndeterminate = true, Height = 5, Margin = new Thickness(0, -5, 0, 0), Foreground = theme.B_AccentColor, Background = Brushes.Transparent };
        waveformLoadingIndicator.Bind(Visual.IsVisibleProperty, new Binding("Playback.WaveformDisplay.IsWaveformLoading"));
        var waveformContainer = new Panel();
        waveformContainer.Children.Add(waveformDisplay); waveformContainer.Children.Add(waveformLoadingIndicator);
        mainStack.Children.Add(waveformContainer);

        // Loop Controls
        var loopControlsOuterPanel = new StackPanel { Orientation = Orientation.Vertical, Spacing = 5, Margin = new Thickness(0, 10, 0, 0) };
        var loopDefinitionLabel = new TextBlock { Text = "Define Loop:", FontSize = 12, FontWeight = FontWeight.SemiBold, Foreground = theme.B_TextColor };
        var loopActionsPanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 8, VerticalAlignment = VerticalAlignment.Center };

        var setStartBtn = new Button { Content = "A", FontSize = 12, Padding = new Thickness(10, 5), MinWidth = 40, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        setStartBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.CaptureLoopStartCandidateCommand"));
        var startDisp = new TextBlock { FontSize = 11, Margin = new Thickness(3, 0), VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_SecondaryTextColor, MinWidth = 60 };
        startDisp.Bind(TextBlock.TextProperty, new Binding("LoopEditor.NewLoopStartCandidateDisplay"));

        var setEndBtn = new Button { Content = "B", FontSize = 12, Padding = new Thickness(10, 5), MinWidth = 40, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        setEndBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.CaptureLoopEndCandidateCommand"));
        var endDisp = new TextBlock { FontSize = 11, Margin = new Thickness(3, 0), VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_SecondaryTextColor, MinWidth = 60 };
        endDisp.Bind(TextBlock.TextProperty, new Binding("LoopEditor.NewLoopEndCandidateDisplay"));

        var saveLoopBtn = new Button { Content = "Save Loop", FontSize = 11, Padding = new Thickness(10, 5), Background = theme.B_AccentColor, Foreground = theme.B_AccentForeground };
        saveLoopBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.SaveLoopCommand"));
        saveLoopBtn.Bind(Button.IsEnabledProperty, new Binding("LoopEditor.CanSaveLoopRegion"));

        var clearLoopBtn = new Button { Content = "Clear Loop", FontSize = 11, Padding = new Thickness(10, 5), Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        clearLoopBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.ClearLoopCommand"));
        var clearLoopBinding = new Binding("PlaybackService.CurrentSong.SavedLoop") { Converter = NotNullToBooleanConverter.Instance };
        clearLoopBtn.Bind(Button.IsEnabledProperty, clearLoopBinding);

        loopActionsPanel.Children.Add(setStartBtn); loopActionsPanel.Children.Add(startDisp);
        loopActionsPanel.Children.Add(setEndBtn); loopActionsPanel.Children.Add(endDisp);
        loopActionsPanel.Children.Add(saveLoopBtn); loopActionsPanel.Children.Add(clearLoopBtn);

        var loopActiveTogglePanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 8, 0, 0), Spacing = 8, VerticalAlignment = VerticalAlignment.Center };
        var loopActiveCheckBox = new CheckBox { Content = "Activate Loop", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        loopActiveCheckBox.Bind(ToggleButton.IsCheckedProperty, new Binding("LoopEditor.IsCurrentLoopActiveUiBinding", BindingMode.TwoWay));
        var loopActiveCheckBoxIsEnabledBinding = new Binding("PlaybackService.CurrentSong.SavedLoop") { Converter = NotNullToBooleanConverter.Instance };
        loopActiveCheckBox.Bind(Control.IsEnabledProperty, loopActiveCheckBoxIsEnabledBinding); // Corrected: Control.IsEnabledProperty
        loopActiveTogglePanel.Children.Add(loopActiveCheckBox);

        loopControlsOuterPanel.Children.Add(loopDefinitionLabel);
        loopControlsOuterPanel.Children.Add(loopActionsPanel);
        loopControlsOuterPanel.Children.Add(loopActiveTogglePanel);
        mainStack.Children.Add(loopControlsOuterPanel);

        panelRoot.Child = mainStack;
        return panelRoot;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainMenu.cs">
using Avalonia.Controls;
using Avalonia.Data;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // For SongDisplayMode enum

namespace Sonorize.Views.MainWindowControls;

public static class MainMenu
{
    public static Menu Create(ThemeColors theme, Window ownerWindow)
    {
        var menu = new Menu
        {
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor
        };

        // File Menu
        var fileMenuItem = new MenuItem { Header = "_File", Foreground = theme.B_TextColor };
        var addDirectoryMenuItem = new MenuItem { Header = "_Add Music Directory...", Foreground = theme.B_TextColor };
        addDirectoryMenuItem.Bind(MenuItem.CommandProperty, new Binding("AddDirectoryAndRefreshCommand"));
        addDirectoryMenuItem.CommandParameter = ownerWindow;

        var settingsMenuItem = new MenuItem { Header = "_Settings...", Foreground = theme.B_TextColor };
        settingsMenuItem.Bind(MenuItem.CommandProperty, new Binding("OpenSettingsCommand"));
        settingsMenuItem.CommandParameter = ownerWindow;

        var exitMenuItem = new MenuItem { Header = "E_xit", Foreground = theme.B_TextColor };
        exitMenuItem.Bind(MenuItem.CommandProperty, new Binding("ExitCommand"));

        fileMenuItem.Items.Add(addDirectoryMenuItem);
        fileMenuItem.Items.Add(settingsMenuItem);
        fileMenuItem.Items.Add(new Separator());
        fileMenuItem.Items.Add(exitMenuItem);

        // View Menu
        var viewMenuItem = new MenuItem { Header = "_View", Foreground = theme.B_TextColor };

        // Library View SubMenu
        var libraryViewSubMenu = new MenuItem { Header = "Library View", Foreground = theme.B_TextColor };
        var libDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        libDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libDetailed.CommandParameter = ("Library", SongDisplayMode.Detailed);
        var libCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        libCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libCompact.CommandParameter = ("Library", SongDisplayMode.Compact);
        var libGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        libGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libGrid.CommandParameter = ("Library", SongDisplayMode.Grid);
        libraryViewSubMenu.Items.Add(libDetailed);
        libraryViewSubMenu.Items.Add(libCompact);
        libraryViewSubMenu.Items.Add(libGrid);

        // Artists View SubMenu
        var artistsViewSubMenu = new MenuItem { Header = "Artists View", Foreground = theme.B_TextColor };
        var artDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        artDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artDetailed.CommandParameter = ("Artists", SongDisplayMode.Detailed);
        var artCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        artCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artCompact.CommandParameter = ("Artists", SongDisplayMode.Compact);
        var artGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        artGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artGrid.CommandParameter = ("Artists", SongDisplayMode.Grid);
        artistsViewSubMenu.Items.Add(artDetailed);
        artistsViewSubMenu.Items.Add(artCompact);
        artistsViewSubMenu.Items.Add(artGrid);

        // Albums View SubMenu
        var albumsViewSubMenu = new MenuItem { Header = "Albums View", Foreground = theme.B_TextColor };
        var albDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        albDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albDetailed.CommandParameter = ("Albums", SongDisplayMode.Detailed);
        var albCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        albCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albCompact.CommandParameter = ("Albums", SongDisplayMode.Compact);
        var albGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        albGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albGrid.CommandParameter = ("Albums", SongDisplayMode.Grid);
        albumsViewSubMenu.Items.Add(albDetailed);
        albumsViewSubMenu.Items.Add(albCompact);
        albumsViewSubMenu.Items.Add(albGrid);

        viewMenuItem.Items.Add(libraryViewSubMenu);
        viewMenuItem.Items.Add(artistsViewSubMenu);
        viewMenuItem.Items.Add(albumsViewSubMenu);

        menu.Items.Add(fileMenuItem);
        menu.Items.Add(viewMenuItem);
        return menu;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainPlaybackControlsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Data.Converters; // Added required using directive for FuncValueConverter
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Models;

namespace Sonorize.Views.MainWindowControls;

public static class MainPlaybackControlsPanel
{
    public static Grid Create(ThemeColors theme) // Root is a Grid
    {
        // --- Playback Navigation Buttons Panel (Extracted) ---
        var combinedPlaybackButtonControlsPanel = PlaybackNavigationButtonsPanel.Create(theme);

        var toggleAdvPanelButton = new Button
        {
            Content = "+",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor, // Default color
            BorderBrush = theme.B_ControlBackgroundColor, // Default border color
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(3),
            Padding = new Thickness(8, 4),
            MinWidth = 30, // Give it a minimum size to occupy space
            FontWeight = FontWeight.Bold,
            Width = 32, // Fixed width for consistency
            Height = 32, // Fixed height for consistency
            HorizontalContentAlignment = HorizontalAlignment.Center, // Center content horizontally
            VerticalContentAlignment = VerticalAlignment.Center     // Center content vertically
        };
        // Change BorderBrush color based on IsAdvancedPanelVisible
        toggleAdvPanelButton[!Button.BorderBrushProperty] = new Binding("IsAdvancedPanelVisible")
        {
            Converter = new FuncValueConverter<bool, IBrush>(isVisible => isVisible ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        toggleAdvPanelButton[!Button.ForegroundProperty] = new Binding("IsAdvancedPanelVisible")
        {
            Converter = new FuncValueConverter<bool, IBrush>(isVisible => isVisible ? theme.B_AccentColor : theme.B_TextColor)
        };
        toggleAdvPanelButton.Bind(Button.CommandProperty, new Binding("ToggleAdvancedPanelCommand"));
        toggleAdvPanelButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));


        var rightControlsPanel = new StackPanel // Holds toggle button
        {
            Orientation = Orientation.Horizontal,
            Spacing = 5,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Right, // Align to the right within its grid cell
            Margin = new Thickness(0, 0, 10, 0) // Margin from the right edge of the grid cell
            // MinWidth/Width could be added here if needed to reserve space even when invisible
        };
        rightControlsPanel.Children.Add(toggleAdvPanelButton);

        // --- Playback Time Slider Panel (Extracted) ---
        var timeSliderGrid = PlaybackTimeSliderPanel.Create(theme);


        // --- Center Playback Controls Stack (Combined Buttons Panel + Slider) ---
        // This stack panel contains the combined button panel (now includes shuffle/loop, prev/play/next) and the time/slider grid.
        var centerPlaybackControlsStack = new StackPanel
        {
            Orientation = Orientation.Vertical,
            Margin = new Thickness(0, 5, 0, 0),
            Spacing = 8, // Space between the button row and the slider row
            HorizontalAlignment = HorizontalAlignment.Center, // Center this stack panel within its parent grid cell
            VerticalAlignment = VerticalAlignment.Center
        };
        // Add the combined button panel (now includes shuffle/loop, prev/play/next)
        centerPlaybackControlsStack.Children.Add(combinedPlaybackButtonControlsPanel);
        centerPlaybackControlsStack.Children.Add(timeSliderGrid);


        // --- Currently Playing Song Info Panel (Extracted) ---
        var songInfoPanel = SongInfoDisplayPanel.Create(theme);


        // --- Main Grid Layout (Restored Single Column Centering) ---
        // Use a single star (*) column. All children are placed in this column.
        // Their HorizontalAlignment determines their position within the column.
        // The centerPlaybackControlsStack has HorizontalAlignment.Center, ensuring it's centered
        // regardless of the width of the left (songInfoPanel) or right (rightControlsPanel) elements.
        var outerGrid = new Grid // This is the root panel
        {
            Background = theme.B_BackgroundColor,
            Margin = new Thickness(0, 5, 0, 5), // Vertical margin for the whole control
            HorizontalAlignment = HorizontalAlignment.Stretch,
            RowDefinitions = new RowDefinitions("Auto"), // Single row, height is Auto based on content
            ColumnDefinitions = new ColumnDefinitions("*") // Single column spanning the width
        };

        // Place all panels in the single column (column 0).
        // Their HorizontalAlignment will handle horizontal positioning.
        Grid.SetColumn(songInfoPanel, 0);
        Grid.SetColumn(centerPlaybackControlsStack, 0);
        Grid.SetColumn(rightControlsPanel, 0);

        // Add children in any order; their position is determined by grid layout and alignment.
        outerGrid.Children.Add(songInfoPanel);
        outerGrid.Children.Add(centerPlaybackControlsStack);
        outerGrid.Children.Add(rightControlsPanel);

        return outerGrid;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainTabViewControls.cs">
using System.Diagnostics;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Media;
using Avalonia.Styling;
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Views.MainWindowControls
{
    public class MainTabViewControls
    {
        private readonly ThemeColors _theme;
        private readonly SharedViewTemplates _sharedViewTemplates; // Changed from SongListTemplates
        private ListBox? _songListBoxInstance;
        private ListBox? _artistsListBoxInstance; // Added
        private ListBox? _albumsListBoxInstance;  // Added

        public MainTabViewControls(ThemeColors theme, SharedViewTemplates sharedViewTemplates) // Changed parameter type
        {
            _theme = theme;
            _sharedViewTemplates = sharedViewTemplates;
        }

        public TabControl CreateMainTabView(out ListBox songListBox, out ListBox artistsListBox, out ListBox albumsListBox) // Added out params
        {
            var tabControl = new TabControl
            {
                Background = _theme.B_BackgroundColor,
                Margin = new Thickness(10, 5, 10, 5),
                BorderThickness = new Thickness(0),
                Padding = new Thickness(0)
            };
            tabControl.Bind(TabControl.SelectedIndexProperty, new Binding("ActiveTabIndex", BindingMode.TwoWay));

            var tabItemStyle = new Style(s => s.Is<TabItem>());
            tabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_BackgroundColor));
            tabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_SecondaryTextColor));
            tabItemStyle.Setters.Add(new Setter(TabItem.PaddingProperty, new Thickness(12, 7)));
            tabItemStyle.Setters.Add(new Setter(TabItem.FontSizeProperty, 13.0));
            tabItemStyle.Setters.Add(new Setter(TabItem.FontWeightProperty, FontWeight.SemiBold));
            tabItemStyle.Setters.Add(new Setter(TabItem.BorderThicknessProperty, new Thickness(0)));
            tabItemStyle.Setters.Add(new Setter(TabItem.BorderBrushProperty, Brushes.Transparent));

            var selectedTabItemStyle = new Style(s => s.Is<TabItem>().Class(":selected"));
            selectedTabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_BackgroundColor));
            selectedTabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_TextColor));

            var pointerOverTabItemStyle = new Style(s => s.Is<TabItem>().Class(":pointerover").Not(x => x.Class(":selected")));
            pointerOverTabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_SlightlyLighterBackground));
            pointerOverTabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_TextColor));

            tabControl.Styles.Add(tabItemStyle);
            tabControl.Styles.Add(selectedTabItemStyle);
            tabControl.Styles.Add(pointerOverTabItemStyle);

            var libraryTab = new TabItem
            {
                Header = "LIBRARY",
                Content = CreateSongListScrollViewer()
            };

            var artistsTab = new TabItem
            {
                Header = "ARTISTS",
                Content = CreateArtistsListScrollViewer()
            };

            var albumsTab = new TabItem
            {
                Header = "ALBUMS",
                Content = CreateAlbumsListScrollViewer()
            };

            tabControl.Items.Add(libraryTab);
            tabControl.Items.Add(artistsTab);
            tabControl.Items.Add(albumsTab);

            songListBox = _songListBoxInstance!;
            artistsListBox = _artistsListBoxInstance!; // Assign out param
            albumsListBox = _albumsListBoxInstance!;   // Assign out param
            return tabControl;
        }

        private ScrollViewer CreateSongListScrollViewer()
        {
            _songListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "SongListBox"
            };

            // Common ListBoxItem styles
            ApplyListBoxItemStyles(_songListBoxInstance);

            _songListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.FilteredSongs"));
            _songListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedSong", BindingMode.TwoWay));

            _songListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedSongTemplate;
            _songListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _songListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private ScrollViewer CreateArtistsListScrollViewer()
        {
            _artistsListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "ArtistsListBox"
            };
            ApplyListBoxItemStyles(_artistsListBoxInstance);

            _artistsListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.Artists"));
            _artistsListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedArtist", BindingMode.TwoWay));

            _artistsListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedArtistTemplate;
            _artistsListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _artistsListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private ScrollViewer CreateAlbumsListScrollViewer()
        {
            _albumsListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "AlbumsListBox"
            };
            ApplyListBoxItemStyles(_albumsListBoxInstance);

            _albumsListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.Albums"));
            _albumsListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedAlbum", BindingMode.TwoWay));

            _albumsListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedAlbumTemplate;
            _albumsListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _albumsListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private void ApplyListBoxItemStyles(ListBox listBox)
        {
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>())
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_ListBoxBackground),
                    new Setter(TextBlock.ForegroundProperty, _theme.B_TextColor),
                    new Setter(ListBoxItem.PaddingProperty, new Thickness(3)) // Default padding, templates can override
                }
            });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":pointerover").Not(xx => xx.Class(":selected")))
            { Setters = { new Setter(TemplatedControl.BackgroundProperty, _theme.B_ControlBackgroundColor) } });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":selected"))
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_AccentColor),
                    new Setter(TextBlock.ForegroundProperty, _theme.B_AccentForeground)
                }
            });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":selected").Class(":pointerover"))
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_AccentColor), // Keep accent when selected and hovered
                    new Setter(TextBlock.ForegroundProperty, _theme.B_AccentForeground)
                }
            });
        }

        // Renamed and generalized
        public void UpdateListViewMode(SongDisplayMode mode, ListBox listBox, IDataTemplate detailedTemplate, IDataTemplate compactTemplate, IDataTemplate gridTemplate)
        {
            if (listBox == null)
            {
                Debug.WriteLine($"[MainTabViewControls] UpdateListViewMode called but target ListBox is null.");
                return;
            }

            Debug.WriteLine($"[MainTabViewControls] Applying display mode: {mode} to ListBox: {listBox.Name}");
            var scrollViewer = listBox.Parent as ScrollViewer;

            switch (mode)
            {
                case SongDisplayMode.Detailed:
                    listBox.ItemTemplate = detailedTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
                case SongDisplayMode.Compact:
                    listBox.ItemTemplate = compactTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
                case SongDisplayMode.Grid:
                    listBox.ItemTemplate = gridTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.WrapPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
            }
        }
    }
}
</file>

<file path="Source\Views\MainWindowControls\PlaybackNavigationButtonsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Data;
using Avalonia.Data.Converters;
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Converters;
using Sonorize.Models;
using Sonorize.ViewModels; // Required for RepeatMode enum

namespace Sonorize.Views.MainWindowControls;

public static class PlaybackNavigationButtonsPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        // Previous Button
        var previousButton = new Button
        {
            Content = "<",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            Width = 32,
            Height = 32,
            CornerRadius = new CornerRadius(16),
            Padding = new Thickness(0),
            FontSize = 16,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center
        };
        previousButton.Bind(Button.CommandProperty, new Binding("Library.PreviousTrackCommand"));

        var mainPlayPauseButton = new Button
        {
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_AccentColor,
            BorderThickness = new Thickness(1),
            Width = 38,
            Height = 38,
            CornerRadius = new CornerRadius(19),
            Padding = new Thickness(0),
            FontSize = 18,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center
        };
        mainPlayPauseButton.Bind(Button.CommandProperty, new Binding("Playback.PlayPauseResumeCommand"));
        mainPlayPauseButton.Bind(Button.ContentProperty, new Binding("Playback.IsPlaying") { Converter = BooleanToPlayPauseIconConverter.Instance });

        var nextButton = new Button
        {
            Content = ">",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            Width = 32,
            Height = 32,
            CornerRadius = new CornerRadius(16),
            Padding = new Thickness(0),
            FontSize = 16,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center
        };
        nextButton.Bind(Button.CommandProperty, new Binding("Library.NextTrackCommand"));

        var shuffleButton = new ToggleButton
        {
            Foreground = theme.B_SecondaryTextColor,
            Background = Brushes.Transparent,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            Padding = new Thickness(5),
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            ContentTemplate = null,
            Width = 32,
            Height = 32
        };
        shuffleButton.Content = new TextBlock
        {
            TextAlignment = TextAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            FontSize = 18,
            FontFamily = new FontFamily("Segoe UI Symbol, Arial"),
            [!TextBlock.TextProperty] = new Binding("Playback.ModeControls.ShuffleEnabled") { Converter = BooleanToShuffleIconConverter.Instance } // Updated path
        };
        shuffleButton.Bind(ToggleButton.IsCheckedProperty, new Binding("Playback.ModeControls.ShuffleEnabled", BindingMode.TwoWay)); // Updated path
        shuffleButton[!ToggleButton.ForegroundProperty] = new Binding("IsChecked")
        {
            Source = shuffleButton,
            Converter = new FuncValueConverter<bool, IBrush>(isChecked => isChecked ? theme.B_AccentColor : theme.B_SecondaryTextColor)
        };
        shuffleButton[!ToggleButton.BorderBrushProperty] = new Binding("IsChecked")
        {
            Source = shuffleButton,
            Converter = new FuncValueConverter<bool, IBrush>(isChecked => isChecked ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        shuffleButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var repeatModeButton = new ToggleButton
        {
            Foreground = theme.B_SecondaryTextColor,
            Background = Brushes.Transparent,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            Padding = new Thickness(5),
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            ContentTemplate = null,
            Width = 32,
            Height = 32
        };
        repeatModeButton.Content = new TextBlock
        {
            TextAlignment = TextAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            FontSize = 18,
            FontFamily = new FontFamily("Segoe UI Symbol, Arial"),
            RenderTransformOrigin = new RelativePoint(0.5, 0.5, RelativeUnit.Relative),
            [!TextBlock.TextProperty] = new Binding("Playback.ModeControls.RepeatMode") // Updated path
            {
                Converter = new FuncValueConverter<RepeatMode, string>(mode => mode switch
                {
                    RepeatMode.None => "―",
                    RepeatMode.PlayOnce => "₁",
                    RepeatMode.RepeatOne => "🔂",
                    RepeatMode.RepeatAll => "🔁",
                    _ => "?"
                })
            },
            [!TextBlock.RenderTransformProperty] = new Binding("Playback.ModeControls.RepeatMode") // Updated path
            {
                Converter = new FuncValueConverter<RepeatMode, ITransform?>(mode =>
                {
                    return mode switch
                    {
                        RepeatMode.PlayOnce => new TranslateTransform(0, -3),
                        RepeatMode.None => new TranslateTransform(0, -1),
                        _ => null
                    };
                })
            }
        };
        repeatModeButton[!ToggleButton.ForegroundProperty] = new Binding("Playback.ModeControls.RepeatMode") // Updated path
        {
            Converter = new FuncValueConverter<RepeatMode, IBrush>(mode => mode != RepeatMode.None ? theme.B_AccentColor : theme.B_SecondaryTextColor)
        };
        repeatModeButton[!ToggleButton.BorderBrushProperty] = new Binding("Playback.ModeControls.RepeatMode") // Updated path
        {
            Converter = new FuncValueConverter<RepeatMode, IBrush>(mode => mode != RepeatMode.None ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        repeatModeButton.Bind(ToggleButton.IsCheckedProperty, new Binding("Playback.ModeControls.IsRepeatActive")); // Updated path
        repeatModeButton.Bind(Button.CommandProperty, new Binding("Playback.ModeControls.CycleRepeatModeCommand")); // Updated path
        repeatModeButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var combinedPlaybackButtonControlsPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            Spacing = 10,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(0)
        };

        combinedPlaybackButtonControlsPanel.Children.Add(shuffleButton);
        combinedPlaybackButtonControlsPanel.Children.Add(previousButton);
        combinedPlaybackButtonControlsPanel.Children.Add(mainPlayPauseButton);
        combinedPlaybackButtonControlsPanel.Children.Add(nextButton);
        combinedPlaybackButtonControlsPanel.Children.Add(repeatModeButton);

        return combinedPlaybackButtonControlsPanel;
    }
}
</file>

<file path="Source\Views\MainWindowControls\PlaybackTimeSliderPanel.cs">
using System;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // For Thumb, Track
using Avalonia.Controls.Templates;  // For FuncControlTemplate
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Converters;
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.MainWindowControls;

public static class PlaybackTimeSliderPanel
{
    public static Grid Create(ThemeColors theme)
    {
        // TextBlock for Current Time
        var currentTimeTextBlock = new TextBlock
        {
            Foreground = theme.B_SecondaryTextColor,
            FontSize = 11,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(0, 0, 5, 0),
            MinWidth = 40,
            HorizontalAlignment = HorizontalAlignment.Left
        };
        currentTimeTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentTimeDisplay"));
        currentTimeTextBlock.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        // TextBlock for Total Time
        var totalTimeTextBlock = new TextBlock
        {
            Foreground = theme.B_SecondaryTextColor,
            FontSize = 11,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(5, 0, 0, 0),
            MinWidth = 40,
            HorizontalAlignment = HorizontalAlignment.Right
        };
        totalTimeTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.TotalTimeDisplay"));
        totalTimeTextBlock.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        var mainPlaybackSlider = new Slider
        {
            Name = "MainPlaybackSliderInstance",
            Minimum = 0,
            VerticalAlignment = VerticalAlignment.Center,
            Background = theme.B_SecondaryTextColor, // Inactive part of the track
            Foreground = theme.B_AccentColor,        // Active part of the track
            HorizontalAlignment = HorizontalAlignment.Stretch,
            Height = 32,                             // Overall height of the slider control
            MinHeight = 32,                          // Ensure it requests this minimum height
            Padding = new Thickness(0),
            CornerRadius = new CornerRadius(8),      // Rounded ends for the overall slider control
            RenderTransform = new TranslateTransform(0, -3) // Shift slider up by 3 pixels
        };

        // Override the theme resource for track height specifically for this slider
        mainPlaybackSlider.Resources["SliderTrackThemeHeight"] = 6.0;

        // Slider Template - thumb invisible but interactive
        mainPlaybackSlider.Template = new FuncControlTemplate<Slider>((slider, _) =>
        {
            var backgroundPart = new Border
            {
                Background = slider.Background,
                CornerRadius = new CornerRadius(3),
                VerticalAlignment = VerticalAlignment.Center,
                Height = 8
            };

            var filledPart = new Border
            {
                Background = slider.Foreground,
                CornerRadius = new CornerRadius(3),
                VerticalAlignment = VerticalAlignment.Center,
                Height = 8
            };

            var thumb = new Thumb
            {
                Width = 4,
                Height = 6,
                Opacity = 0,
                IsHitTestVisible = true
            };

            var track = new Track
            {
                Name = "PART_Track",
                Orientation = Orientation.Horizontal,
                Thumb = thumb
            };

            track.Bind(Track.MinimumProperty, slider[!Slider.MinimumProperty]);
            track.Bind(Track.MaximumProperty, slider[!Slider.MaximumProperty]);
            track.Bind(Track.ValueProperty, slider[!Slider.ValueProperty]);

            var container = new Grid
            {
                VerticalAlignment = VerticalAlignment.Center,
                Height = 6,
                Children =
                {
                    backgroundPart,
                    new Grid
                    {
                        HorizontalAlignment = HorizontalAlignment.Left,
                        Children = { filledPart }
                    },
                    track
                }
            };

            // Bind filledPart.Width to proportional slider value
            filledPart.Bind(Border.WidthProperty, new MultiBinding
            {
                Converter = new SliderFillWidthConverter(),
                Bindings =
                {
                    slider[!Slider.ValueProperty],
                    slider[!Slider.MaximumProperty],
                    slider[!Slider.BoundsProperty]
                }
            });

            return container;
        });

        // HERE IS THE CRUCIAL CHANGE:
        // Handle PointerPressed on the slider itself (the whole clickable area)
        mainPlaybackSlider.PointerPressed += (sender, e) =>
        {
            var s = (Slider)sender;
            var pos = e.GetPosition(s);
            var bounds = s.Bounds;

            if (bounds.Width > 0)
            {
                // Calculate ratio (clamped 0 to 1)
                double ratio = Math.Clamp(pos.X / bounds.Width, 0, 1);

                // Calculate new slider value based on ratio
                double newValue = s.Minimum + ratio * (s.Maximum - s.Minimum);

                s.Value = newValue;
                e.Handled = true;
            }
        };

        mainPlaybackSlider.Bind(Slider.MaximumProperty, new Binding("Playback.CurrentSongDurationSeconds"));
        mainPlaybackSlider.Bind(Slider.ValueProperty, new Binding("Playback.CurrentPositionSeconds", BindingMode.TwoWay));
        mainPlaybackSlider.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var timeSliderGrid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto"),
            VerticalAlignment = VerticalAlignment.Center,
            Height = 32,
            MinWidth = 500,
            HorizontalAlignment = HorizontalAlignment.Stretch,
            ClipToBounds = false
        };

        Grid.SetColumn(currentTimeTextBlock, 0);
        Grid.SetColumn(mainPlaybackSlider, 1);
        Grid.SetColumn(totalTimeTextBlock, 2);

        timeSliderGrid.Children.Add(currentTimeTextBlock);
        timeSliderGrid.Children.Add(mainPlaybackSlider);
        timeSliderGrid.Children.Add(totalTimeTextBlock);

        return timeSliderGrid;
    }
}
</file>

<file path="Source\Views\MainWindowControls\SearchBarPanels.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Styling;
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.MainWindowControls;

public static class SearchBarPanel
{
    public static Panel Create(ThemeColors theme)
    {
        var searchBox = new TextBox
        {
            Watermark = "Search songs by title, artist, or album...",
            Margin = new Thickness(10, 5, 10, 5),
            Padding = new Thickness(10, 7),
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            FontSize = 14
        };
        // Bind to Library.SearchQuery
        searchBox.Bind(TextBox.TextProperty, new Binding("Library.SearchQuery", BindingMode.TwoWay));

        searchBox.Styles.Add(new Style(s => s.Is<TextBox>().Class(":focus"))
        {
            Setters = { new Setter(TextBox.BorderBrushProperty, theme.B_AccentColor) }
        });

        var panel = new Panel
        {
            Children = { searchBox },
            Margin = new Thickness(0, 5, 0, 0)
        };
        return panel;
    }
}
</file>

<file path="Source\Views\MainWindowControls\SharedViewTemplates.cs">
using System.Linq;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Styling; // Required for Style
using Avalonia.VisualTree; // Required for FindAncestorOfType
using Sonorize.Models; // For Song, ArtistViewModel, AlbumViewModel, ThemeColors
using Sonorize.ViewModels; // For SongDisplayMode (though not directly used here, context is relevant)
using System.Diagnostics; // For Debug messages

namespace Sonorize.Views.MainWindowControls
{
    public class SharedViewTemplates
    {
        private readonly ThemeColors _theme;
        // _libraryVM field is kept for potential direct setting, but dynamic lookup is preferred for ContextMenu
        private LibraryViewModel? _libraryVM;

        // Song Templates
        public FuncDataTemplate<Song> DetailedSongTemplate { get; private set; }
        public FuncDataTemplate<Song> CompactSongTemplate { get; private set; }
        public FuncDataTemplate<Song> GridSongTemplate { get; private set; }

        // Artist Templates
        public FuncDataTemplate<ArtistViewModel> DetailedArtistTemplate { get; private set; }
        public FuncDataTemplate<ArtistViewModel> CompactArtistTemplate { get; private set; }
        public FuncDataTemplate<ArtistViewModel> GridArtistTemplate { get; private set; }

        // Album Templates
        public FuncDataTemplate<AlbumViewModel> DetailedAlbumTemplate { get; private set; }
        public FuncDataTemplate<AlbumViewModel> CompactAlbumTemplate { get; private set; }
        public FuncDataTemplate<AlbumViewModel> GridAlbumTemplate { get; private set; }


        // Panel Templates (reusable)
        public ITemplate<Panel?> StackPanelItemsPanelTemplate { get; private set; }
        public ITemplate<Panel?> WrapPanelItemsPanelTemplate { get; private set; }

        public SharedViewTemplates(ThemeColors theme)
        {
            _theme = theme;
            Debug.WriteLine("[SharedViewTemplates] Constructor called.");
            InitializeSongTemplates();
            InitializeArtistTemplates();
            InitializeAlbumTemplates();
            InitializePanelTemplates();
        }

        // This method is still useful if MainWindow explicitly sets it.
        public void SetLibraryViewModel(LibraryViewModel? libraryVM)
        {
            _libraryVM = libraryVM;
            Debug.WriteLine($"[SharedViewTemplates] SetLibraryViewModel explicitly called. _libraryVM is now {(_libraryVM == null ? "NULL" : "NOT NULL")}.");
        }

        private ContextMenu CreateSongContextMenu(Song songDataContext)
        {
            var contextMenu = new ContextMenu();

            // Apply styles
            contextMenu.Styles.Add(new Style(s => s.OfType<ContextMenu>())
            {
                Setters =
                {
                    new Setter(ContextMenu.BackgroundProperty, _theme.B_SlightlyLighterBackground),
                    new Setter(ContextMenu.BorderBrushProperty, _theme.B_ControlBackgroundColor),
                    new Setter(ContextMenu.BorderThicknessProperty, new Thickness(1)),
                }
            });
            contextMenu.Styles.Add(new Style(s => s.OfType<MenuItem>())
            {
                Setters =
                {
                    new Setter(MenuItem.ForegroundProperty, _theme.B_TextColor),
                    new Setter(MenuItem.BackgroundProperty, Brushes.Transparent)
                }
            });
            contextMenu.Styles.Add(new Style(s => s.OfType<MenuItem>().Class(":pointerover"))
            {
                Setters =
                {
                    new Setter(MenuItem.BackgroundProperty, _theme.B_ControlBackgroundColor.Multiply(1.2))
                }
            });

            contextMenu.Opening += (sender, e) =>
            {
                if (sender is not ContextMenu cm) return;

                Debug.WriteLine($"[ContextMenu.Opening] Event fired for song: {songDataContext.Title}. Attempting to resolve LibraryVM.");
                LibraryViewModel? resolvedLibraryVM = null;

                if (cm.PlacementTarget is Control placementTarget)
                {
                    Debug.WriteLine($"[ContextMenu.Opening] PlacementTarget is '{placementTarget.GetType().Name}'.");
                    var listBox = placementTarget.FindAncestorOfType<ListBox>();
                    if (listBox != null)
                    {
                        Debug.WriteLine($"[ContextMenu.Opening] Found ancestor ListBox '{listBox.Name}'. Its DataContext is '{listBox.DataContext?.GetType().Name ?? "null"}'.");
                        if (listBox.DataContext is MainWindowViewModel mwvm && mwvm.Library != null)
                        {
                            resolvedLibraryVM = mwvm.Library;
                            Debug.WriteLine($"[ContextMenu.Opening] Successfully resolved LibraryVM from ListBox.DataContext (MainWindowViewModel).");
                        }
                        else
                        {
                            Debug.WriteLine($"[ContextMenu.Opening] ListBox.DataContext is not MainWindowViewModel or Library is null.");
                        }
                    }
                    else
                    {
                        Debug.WriteLine($"[ContextMenu.Opening] Could not find ancestor ListBox from PlacementTarget.");
                    }
                }
                else
                {
                    Debug.WriteLine($"[ContextMenu.Opening] PlacementTarget is null. Cannot resolve LibraryVM dynamically.");
                }

                // Fallback to the cached _libraryVM if dynamic lookup failed and _libraryVM was set.
                if (resolvedLibraryVM == null && _libraryVM != null)
                {
                    resolvedLibraryVM = _libraryVM;
                    Debug.WriteLine($"[ContextMenu.Opening] Using explicitly set _libraryVM as fallback for song: {songDataContext.Title}.");
                }


                cm.Items.Clear(); // Clear previous items
                if (resolvedLibraryVM != null)
                {
                    cm.DataContext = resolvedLibraryVM;

                    var editMetadataMenuItem = new MenuItem
                    {
                        Header = "Edit Metadata",
                        CommandParameter = songDataContext
                    };
                    editMetadataMenuItem.Bind(MenuItem.CommandProperty, new Binding("EditSongMetadataCommand"));
                    cm.Items.Add(editMetadataMenuItem);
                    Debug.WriteLine($"[ContextMenu.Opening] ContextMenu DataContext set to LibraryVM. Command should bind for song: {songDataContext.Title}.");
                }
                else
                {
                    Debug.WriteLine($"[ContextMenu.Opening] CRITICAL: LibraryViewModel could not be resolved for song: {songDataContext.Title}. ContextMenu will be disabled.");
                    cm.DataContext = null;
                    cm.Items.Add(new MenuItem { Header = "Menu Error: Cannot find ViewModel", IsEnabled = false });
                }
            };

            return contextMenu;
        }


        private void InitializeSongTemplates()
        {
            // Detailed Song Template
            DetailedSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 32, Height = 32, Margin = new Thickness(5, 0, 5, 0), Stretch = Stretch.UniformToFill };
                image.Bind(Image.SourceProperty, new Binding(nameof(Song.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var titleBlock = new TextBlock { FontSize = 14, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 0, 1) };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 11, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)));

                var durationBlock = new TextBlock { FontSize = 11, HorizontalAlignment = HorizontalAlignment.Right, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor };
                durationBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.DurationString)));

                var textStack = new StackPanel { Orientation = Orientation.Vertical, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(8, 0, 0, 0), Children = { titleBlock, artistBlock } };
                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto"), VerticalAlignment = VerticalAlignment.Center, Children = { image, textStack, durationBlock } };
                Grid.SetColumn(image, 0); Grid.SetColumn(textStack, 1); Grid.SetColumn(durationBlock, 2);

                var rootBorder = new Border { Padding = new Thickness(10, 6, 10, 6), MinHeight = 44, Background = Brushes.Transparent, Child = itemGrid };
                rootBorder.ContextMenu = CreateSongContextMenu(dataContext);
                return rootBorder;
            }, supportsRecycling: true);

            // Compact Song Template
            CompactSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) =>
            {
                var titleBlock = new TextBlock { FontSize = 12, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 11, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor, TextTrimming = TextTrimming.CharacterEllipsis, Margin = new Thickness(5, 0, 0, 0) };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)) { StringFormat = " - {0}" });


                var titleArtistPanel = new StackPanel { Orientation = Orientation.Horizontal, VerticalAlignment = VerticalAlignment.Center, Children = { titleBlock, artistBlock } };

                var durationBlock = new TextBlock { FontSize = 11, HorizontalAlignment = HorizontalAlignment.Right, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor, Margin = new Thickness(5, 0, 0, 0) };
                durationBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.DurationString)));

                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("*,Auto"), VerticalAlignment = VerticalAlignment.Center };
                itemGrid.Children.Add(titleArtistPanel); itemGrid.Children.Add(durationBlock);
                Grid.SetColumn(titleArtistPanel, 0); Grid.SetColumn(durationBlock, 1);

                var rootBorder = new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = itemGrid };
                rootBorder.ContextMenu = CreateSongContextMenu(dataContext);
                return rootBorder;
            }, supportsRecycling: true);

            // Grid Song Template
            GridSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 80, Height = 80, Stretch = Stretch.UniformToFill, HorizontalAlignment = HorizontalAlignment.Center };
                image.Bind(Image.SourceProperty, new Binding(nameof(Song.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var titleBlock = new TextBlock
                {
                    FontSize = 12,
                    FontWeight = FontWeight.SemiBold,
                    TextWrapping = TextWrapping.Wrap,
                    Height = 32, // Adjusted height for two lines
                    MaxLines = 2, // Explicitly set max lines
                    TextAlignment = TextAlignment.Center,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 3, 0, 0),
                    VerticalAlignment = VerticalAlignment.Top
                };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 10, Foreground = _theme.B_SecondaryTextColor, TextWrapping = TextWrapping.Wrap, MaxHeight = 15, TextAlignment = TextAlignment.Center, HorizontalAlignment = HorizontalAlignment.Center, Margin = new Thickness(0, 1, 0, 0) };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)));

                var contentStack = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center, Spacing = 2, Children = { image, titleBlock, artistBlock } };

                var rootBorder = new Border { Width = 120, Height = 150, Background = Brushes.Transparent, Padding = new Thickness(5), Child = contentStack, HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Center };
                rootBorder.ContextMenu = CreateSongContextMenu(dataContext);
                return rootBorder;
            }, supportsRecycling: true);
        }

        private void InitializeArtistTemplates()
        {
            DetailedArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 32, Height = 32, Margin = new Thickness(5, 0, 10, 0), Stretch = Stretch.UniformToFill };
                image.Bind(Image.SourceProperty, new Binding(nameof(ArtistViewModel.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var artistNameBlock = new TextBlock { FontSize = 14, VerticalAlignment = VerticalAlignment.Center };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));

                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*"), VerticalAlignment = VerticalAlignment.Center };
                itemGrid.Children.Add(image); itemGrid.Children.Add(artistNameBlock);
                Grid.SetColumn(image, 0); Grid.SetColumn(artistNameBlock, 1);
                return new Border { Padding = new Thickness(10, 8), MinHeight = 44, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            CompactArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var artistNameBlock = new TextBlock { FontSize = 12, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));
                return new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = artistNameBlock };
            }, supportsRecycling: true);

            GridArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 80, Height = 80, Stretch = Stretch.UniformToFill, HorizontalAlignment = HorizontalAlignment.Center };
                image.Bind(Image.SourceProperty, new Binding(nameof(ArtistViewModel.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var artistNameBlock = new TextBlock { FontSize = 12, FontWeight = FontWeight.SemiBold, TextWrapping = TextWrapping.Wrap, MaxHeight = 30, TextAlignment = TextAlignment.Center, HorizontalAlignment = HorizontalAlignment.Center, Margin = new Thickness(0, 3, 0, 0) };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));

                var contentStack = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center, Spacing = 2, Children = { image, artistNameBlock } };
                return new Border { Width = 120, Height = 130, Background = Brushes.Transparent, Padding = new Thickness(5), Child = contentStack, HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Center };
            }, supportsRecycling: true);
        }

        private void InitializeAlbumTemplates()
        {
            DetailedAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var itemGrid = new Grid
                {
                    ColumnDefinitions = new ColumnDefinitions("Auto,*"),
                    VerticalAlignment = VerticalAlignment.Center
                };

                var imageGrid = new Grid
                {
                    Width = 58,
                    Height = 58,
                    Margin = new Thickness(5, 0, 10, 0),
                    ColumnDefinitions = new ColumnDefinitions("*,*"),
                    RowDefinitions = new RowDefinitions("*,*")
                };

                for (int i = 0; i < 4; i++)
                {
                    var img = new Image { Width = 28, Height = 28, Stretch = Stretch.UniformToFill };
                    // Binding to an indexed property of a List<Bitmap?>.
                    // This relies on AlbumViewModel.SongThumbnailsForGrid property itself raising PropertyChanged if the list instance changes,
                    // or if AlbumViewModel.SongThumbnailsForGrid was an ObservableCollection and its items change.
                    // Given current AlbumViewModel setup, this will show initial state.
                    img.Bind(Image.SourceProperty, new Binding($"SongThumbnailsForGrid[{i}]"));
                    RenderOptions.SetBitmapInterpolationMode(img, BitmapInterpolationMode.HighQuality);
                    Grid.SetRow(img, i / 2);
                    Grid.SetColumn(img, i % 2);
                    imageGrid.Children.Add(img);
                }

                Grid.SetColumn(imageGrid, 0);
                itemGrid.Children.Add(imageGrid);

                var albumTitleBlock = new TextBlock { FontSize = 14, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));

                var albumArtistBlock = new TextBlock { FontSize = 11, Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)));

                var textStack = new StackPanel { Orientation = Orientation.Vertical, VerticalAlignment = VerticalAlignment.Center, Children = { albumTitleBlock, albumArtistBlock } };

                Grid.SetColumn(textStack, 1);
                itemGrid.Children.Add(textStack);

                return new Border { Padding = new Thickness(10, 6), MinHeight = 68, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            CompactAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var albumTitleBlock = new TextBlock { FontSize = 12, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));

                var albumArtistBlock = new TextBlock { FontSize = 11, Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis, Margin = new Thickness(5, 0, 0, 0) };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)) { StringFormat = " - {0}" });

                var panel = new StackPanel { Orientation = Orientation.Horizontal, VerticalAlignment = VerticalAlignment.Center, Children = { albumTitleBlock, albumArtistBlock } };
                return new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = panel };
            }, supportsRecycling: true);

            GridAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var contentStack = new StackPanel
                {
                    Orientation = Orientation.Vertical,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Spacing = 3
                };

                // Logic to decide 2x2 or single image based on bound data needs to be cleaner if done in C# template.
                // For simplicity, binding to RepresentativeThumbnail (which AlbumViewModel should prepare).
                // A more complex template might use a ContentControl with a StyleSelector or multiple DataTemplates.

                // Create a placeholder for the image part, could be a Grid or single Image
                var imagePresenter = new Panel { Width = 80, Height = 80, HorizontalAlignment = HorizontalAlignment.Center };


                // Attempting a dynamic switch based on data. This is complex in FuncDataTemplate.
                // A common approach is to have the ViewModel provide a single "display-ready" thumbnail or a type indicator.
                // Here, we'll just bind to RepresentativeThumbnail for grid view.
                // If more complex logic (like showing 2x2) is needed, it should ideally be handled by ViewModel state
                // or a custom control / more sophisticated templating.

                if (dataContext != null && dataContext.SongThumbnailsForGrid != null && dataContext.SongThumbnailsForGrid.Count(t => t != null) > 1)
                {
                    var imageGrid = new Grid
                    {
                        Width = 80, // Keep overall size consistent
                        Height = 80,
                        HorizontalAlignment = HorizontalAlignment.Center,
                        ColumnDefinitions = new ColumnDefinitions("*,*"),
                        RowDefinitions = new RowDefinitions("*,*")
                    };

                    for (int i = 0; i < 4; i++)
                    {
                        var img = new Image { Width = 38, Height = 38, Stretch = Stretch.UniformToFill, Margin = new Thickness(1) }; // Smaller images for grid
                        img.Bind(Image.SourceProperty, new Binding($"SongThumbnailsForGrid[{i}]"));
                        RenderOptions.SetBitmapInterpolationMode(img, BitmapInterpolationMode.HighQuality);
                        Grid.SetRow(img, i / 2);
                        Grid.SetColumn(img, i % 2);
                        imageGrid.Children.Add(img);
                    }
                    imagePresenter.Children.Add(imageGrid);
                }
                else // Show single representative thumbnail
                {
                    var singleImage = new Image
                    {
                        Width = 80,
                        Height = 80,
                        Stretch = Stretch.UniformToFill,
                        HorizontalAlignment = HorizontalAlignment.Center
                    };
                    singleImage.Bind(Image.SourceProperty, new Binding(nameof(AlbumViewModel.RepresentativeThumbnail)));
                    RenderOptions.SetBitmapInterpolationMode(singleImage, BitmapInterpolationMode.HighQuality);
                    imagePresenter.Children.Add(singleImage);
                }
                contentStack.Children.Add(imagePresenter);


                var albumTitleBlock = new TextBlock
                {
                    FontSize = 12,
                    FontWeight = FontWeight.SemiBold,
                    TextWrapping = TextWrapping.Wrap,
                    MaxHeight = 30,
                    TextAlignment = TextAlignment.Center,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 2, 0, 0)
                };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));
                contentStack.Children.Add(albumTitleBlock);

                var albumArtistBlock = new TextBlock
                {
                    FontSize = 10,
                    Foreground = _theme.B_SecondaryTextColor,
                    TextWrapping = TextWrapping.Wrap,
                    MaxHeight = 15,
                    TextAlignment = TextAlignment.Center,
                    HorizontalAlignment = HorizontalAlignment.Center
                };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)));
                contentStack.Children.Add(albumArtistBlock);

                return new Border
                {
                    Width = 120,
                    Height = 150,
                    Background = Brushes.Transparent,
                    Padding = new Thickness(5),
                    Child = contentStack,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
            }, supportsRecycling: true);
        }

        private void InitializePanelTemplates()
        {
            StackPanelItemsPanelTemplate = new FuncTemplate<Panel?>(() => new VirtualizingStackPanel { Orientation = Orientation.Vertical });
            WrapPanelItemsPanelTemplate = new FuncTemplate<Panel?>(() => new WrapPanel { Orientation = Orientation.Horizontal, ItemWidth = 130, ItemHeight = 160 }); // Adjusted ItemWidth/Height for grid items
        }
    }
}
</file>

<file path="Source\Views\MainWindowControls\SongInfoDisplayPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging; // Required for BitmapInterpolationMode
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.MainWindowControls;

public static class SongInfoDisplayPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        var songInfoPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Left,
            Margin = new Thickness(10, 0, 0, 0),
            Spacing = 8,
        };
        songInfoPanel.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        var thumbnailImage = new Image
        {
            Width = 64,
            Height = 64,
            Source = null, // Will be bound
            Stretch = Stretch.UniformToFill,
            VerticalAlignment = VerticalAlignment.Center
        };
        RenderOptions.SetBitmapInterpolationMode(thumbnailImage, BitmapInterpolationMode.HighQuality);
        thumbnailImage.Bind(Image.SourceProperty, new Binding("Playback.CurrentSong.Thumbnail"));

        var textStack = new StackPanel
        {
            Orientation = Orientation.Vertical,
            VerticalAlignment = VerticalAlignment.Center,
            Spacing = 1
        };

        var titleTextBlock = new TextBlock
        {
            Text = "Unknown Title", // Default, will be bound
            FontSize = 14,
            FontWeight = FontWeight.SemiBold,
            Foreground = theme.B_TextColor,
            TextTrimming = TextTrimming.CharacterEllipsis,
            VerticalAlignment = VerticalAlignment.Center,
            MaxWidth = 200
        };
        titleTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentSong.Title"));

        var artistTextBlock = new TextBlock
        {
            Text = "Unknown Artist", // Default, will be bound
            FontSize = 11,
            Foreground = theme.B_SecondaryTextColor,
            TextTrimming = TextTrimming.CharacterEllipsis,
            VerticalAlignment = VerticalAlignment.Center,
            MaxWidth = 200
        };
        artistTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentSong.Artist"));

        textStack.Children.Add(titleTextBlock);
        textStack.Children.Add(artistTextBlock);

        songInfoPanel.Children.Add(thumbnailImage);
        songInfoPanel.Children.Add(textStack);

        return songInfoPanel;
    }
}
</file>

<file path="Source\Views\SettingsWindowControls\DirectoriesSettingsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.SettingsWindowControls;

public static class DirectoriesSettingsPanel
{
    public static StackPanel Create(ThemeColors theme, Window ownerWindow)
    {
        var panel = new StackPanel { Spacing = 10 };

        panel.Children.Add(new TextBlock
        {
            Text = "Music Directories",
            FontSize = 18,
            FontWeight = FontWeight.SemiBold,
            Foreground = theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 10)
        });

        var directoriesManagementPanel = new DockPanel();
        var dirManagementButtons = new StackPanel { Orientation = Orientation.Vertical, Spacing = 5, Margin = new Thickness(0, 0, 10, 0) };
        DockPanel.SetDock(dirManagementButtons, Dock.Right);
        var addButton = new Button { Content = "Add", Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor, HorizontalAlignment = HorizontalAlignment.Stretch };
        addButton.Bind(Button.CommandProperty, new Binding("AddDirectoryCommand"));
        addButton.CommandParameter = ownerWindow; // Pass the owner window for the dialog

        var removeButton = new Button { Content = "Remove", Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor, HorizontalAlignment = HorizontalAlignment.Stretch };
        removeButton.Bind(Button.CommandProperty, new Binding("RemoveDirectoryCommand"));
        removeButton.Bind(Button.IsEnabledProperty, new Binding("CanRemoveDirectory"));
        dirManagementButtons.Children.Add(addButton);
        dirManagementButtons.Children.Add(removeButton);

        var directoryListBox = new ListBox
        {
            Background = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            BorderBrush = theme.B_SecondaryTextColor,
            Foreground = theme.B_TextColor,
            Height = 150,
            MaxHeight = 200
        };
        directoryListBox.Bind(ItemsControl.ItemsSourceProperty, new Binding("MusicDirectories"));
        directoryListBox.Bind(ListBox.SelectedItemProperty, new Binding("SelectedDirectory", BindingMode.TwoWay));
        directoriesManagementPanel.Children.Add(dirManagementButtons);
        directoriesManagementPanel.Children.Add(directoryListBox);

        panel.Children.Add(directoriesManagementPanel);
        return panel;
    }
}
</file>

<file path="Source\Views\SettingsWindowControls\ScrobblingSettingsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // Required for NumericUpDown
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media; // Required for Brushes
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.SettingsWindowControls;

public static class ScrobblingSettingsPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        var panel = new StackPanel { Spacing = 10 };

        panel.Children.Add(new TextBlock
        {
            Text = "Last.fm Scrobbling",
            FontSize = 18,
            FontWeight = FontWeight.SemiBold,
            Foreground = theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 5)
        });

        var scrobblingEnableCheckBox = new CheckBox
        {
            Content = "Enable Scrobbling",
            Foreground = theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 10)
        };
        scrobblingEnableCheckBox.Bind(ToggleButton.IsCheckedProperty, new Binding("LastfmSettings.LastfmScrobblingEnabled", BindingMode.TwoWay));
        panel.Children.Add(scrobblingEnableCheckBox);

        var usernameLabel = new TextBlock { Text = "Username:", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 10, 5) };
        var usernameTextBox = new TextBox
        {
            Background = theme.B_ControlBackgroundColor,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_SecondaryTextColor,
            Watermark = "Last.fm Username",
            Margin = new Thickness(0, 0, 0, 5)
        };
        usernameTextBox.Bind(TextBox.TextProperty, new Binding("LastfmSettings.LastfmUsername", BindingMode.TwoWay));

        var passwordLabel = new TextBlock { Text = "Password:", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 10, 0) };
        var passwordTextBox = new TextBox
        {
            Background = theme.B_ControlBackgroundColor,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_SecondaryTextColor,
            PasswordChar = '•',
            Watermark = "Last.fm Password (if changing)"
        };
        passwordTextBox.Bind(TextBox.TextProperty, new Binding("LastfmSettings.LastfmPassword", BindingMode.TwoWay));

        var scrobblingGrid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitions("Auto,*"),
            RowDefinitions = new RowDefinitions("Auto,Auto"),
            Margin = new Thickness(0, 0, 0, 10)
        };
        Grid.SetRow(usernameLabel, 0); Grid.SetColumn(usernameLabel, 0);
        Grid.SetRow(usernameTextBox, 0); Grid.SetColumn(usernameTextBox, 1);
        Grid.SetRow(passwordLabel, 1); Grid.SetColumn(passwordLabel, 0);
        Grid.SetRow(passwordTextBox, 1); Grid.SetColumn(passwordTextBox, 1);
        scrobblingGrid.Children.Add(usernameLabel);
        scrobblingGrid.Children.Add(usernameTextBox);
        scrobblingGrid.Children.Add(passwordLabel);
        scrobblingGrid.Children.Add(passwordTextBox);
        panel.Children.Add(scrobblingGrid);

        var criteriaPanel = new StackPanel { Orientation = Orientation.Vertical, Spacing = 8, Margin = new Thickness(0, 10, 0, 5) };
        var percentagePanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 5 };
        var percentageLabel = new TextBlock { Text = "Scrobble if played for at least ", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        var percentageUpDown = new NumericUpDown { Minimum = 1, Maximum = 100, Increment = 1, Width = 120, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor, BorderBrush = theme.B_SecondaryTextColor }; // Increased width
        percentageUpDown.Bind(NumericUpDown.ValueProperty, new Binding("LastfmSettings.ScrobbleThresholdPercentage", BindingMode.TwoWay));
        var percentageUnitLabel = new TextBlock { Text = "% of duration", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        percentagePanel.Children.Add(percentageLabel); percentagePanel.Children.Add(percentageUpDown); percentagePanel.Children.Add(percentageUnitLabel);

        var absolutePanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 5 };
        var absoluteLabel = new TextBlock { Text = "OR Scrobble if played for at least ", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        var absoluteUpDown = new NumericUpDown { Minimum = 10, Maximum = 600, Increment = 10, Width = 130, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor, BorderBrush = theme.B_SecondaryTextColor }; // Increased width
        absoluteUpDown.Bind(NumericUpDown.ValueProperty, new Binding("LastfmSettings.ScrobbleThresholdAbsoluteSeconds", BindingMode.TwoWay));
        var absoluteUnitLabel = new TextBlock { Text = "seconds", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        absolutePanel.Children.Add(absoluteLabel); absolutePanel.Children.Add(absoluteUpDown); absolutePanel.Children.Add(absoluteUnitLabel);

        var criteriaExplanation = new TextBlock { Text = "(Whichever threshold is met first, and track is > 30s)", FontSize = 10, Foreground = theme.B_SecondaryTextColor, FontStyle = FontStyle.Italic, TextWrapping = TextWrapping.Wrap };
        criteriaPanel.Children.Add(percentagePanel); criteriaPanel.Children.Add(absolutePanel); criteriaPanel.Children.Add(criteriaExplanation);
        panel.Children.Add(criteriaPanel);

        panel.Children.Add(new TextBlock
        {
            Text = "Password stored locally only until a session key is obtained. Authentication happens when Sonorize starts or when settings are saved.",
            FontSize = 10,
            Foreground = theme.B_SecondaryTextColor,
            FontStyle = FontStyle.Italic,
            Margin = new Thickness(0, 15, 0, 0),
            TextWrapping = TextWrapping.Wrap
        });

        return panel;
    }
}
</file>

<file path="Source\Views\SettingsWindowControls\SettingsButtonPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Layout;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // For SettingsViewModel

namespace Sonorize.Views.SettingsWindowControls;

public static class SettingsButtonPanel
{
    public static StackPanel Create(ThemeColors theme, Window ownerWindow)
    {
        var buttonsPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            HorizontalAlignment = HorizontalAlignment.Right,
            Spacing = 10,
            Margin = new Thickness(15) // Consistent margin
        };

        var saveButton = new Button { Content = "Save & Close", Background = theme.B_AccentColor, Foreground = theme.B_AccentForeground, Padding = new Thickness(15, 8), CornerRadius = new CornerRadius(3) };
        saveButton.Click += (s, e) =>
        {
            if (ownerWindow.DataContext is SettingsViewModel vm)
            {
                vm.SaveAndCloseCommand.Execute(null);
            }
            ownerWindow.Close();
        };

        var cancelButton = new Button { Content = "Cancel", Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor, Padding = new Thickness(15, 8), CornerRadius = new CornerRadius(3) };
        cancelButton.Click += (s, e) => ownerWindow.Close();

        buttonsPanel.Children.Add(saveButton);
        buttonsPanel.Children.Add(cancelButton);
        return buttonsPanel;
    }
}
</file>

<file path="Source\Views\SettingsWindowControls\SettingsMenuPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Layout;
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.SettingsWindowControls;

public static class SettingsMenuPanel
{
    public static Border Create(ThemeColors theme)
    {
        var menuStackPanel = new StackPanel
        {
            Spacing = 5
        };

        var directoriesButton = new Button { Content = "Directories", HorizontalAlignment = HorizontalAlignment.Stretch, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        directoriesButton.Bind(Button.CommandProperty, new Binding("ShowDirectoriesSettingsCommand"));

        var themeButton = new Button { Content = "Theme", HorizontalAlignment = HorizontalAlignment.Stretch, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        themeButton.Bind(Button.CommandProperty, new Binding("ShowThemeSettingsCommand"));

        var scrobblingButton = new Button { Content = "Scrobbling", HorizontalAlignment = HorizontalAlignment.Stretch, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        scrobblingButton.Bind(Button.CommandProperty, new Binding("ShowScrobblingSettingsCommand"));

        menuStackPanel.Children.Add(directoriesButton);
        menuStackPanel.Children.Add(themeButton);
        menuStackPanel.Children.Add(scrobblingButton);

        var menuBorder = new Border
        {
            Background = theme.B_BackgroundColor,
            Padding = new Thickness(10),
            Child = menuStackPanel
        };

        return menuBorder;
    }
}
</file>

<file path="Source\Views\SettingsWindowControls\ThemeSettingsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media; // Required for FontStyle, TextWrapping
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.SettingsWindowControls;

public static class ThemeSettingsPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        var panel = new StackPanel { Spacing = 10 };
        panel.Children.Add(new TextBlock
        {
            Text = "Application Theme",
            FontSize = 18,
            FontWeight = FontWeight.SemiBold,
            Foreground = theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 10)
        });

        var themeComboBox = new ComboBox
        {
            HorizontalAlignment = HorizontalAlignment.Stretch,
            Background = theme.B_ControlBackgroundColor,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_SecondaryTextColor
        };
        themeComboBox.Bind(ItemsControl.ItemsSourceProperty, new Binding("AvailableThemes"));
        themeComboBox.Bind(ComboBox.SelectedItemProperty, new Binding("SelectedThemeFile", BindingMode.TwoWay));
        panel.Children.Add(themeComboBox);

        panel.Children.Add(new TextBlock
        {
            Text = "A restart is required for theme changes to take full effect.",
            FontSize = 10,
            Foreground = theme.B_SecondaryTextColor,
            FontStyle = FontStyle.Italic,
            Margin = new Thickness(0, 5, 0, 0),
            TextWrapping = TextWrapping.Wrap
        });
        return panel;
    }
}
</file>

