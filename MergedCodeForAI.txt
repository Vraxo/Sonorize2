<file path="App.cs">
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Styling;
using Sonorize.ViewModels;
using Sonorize.Views;
using Sonorize.Services;
using Sonorize.Models;
using Avalonia.Themes.Fluent;
using Avalonia.Media;
using System.Diagnostics;

namespace Sonorize;

public class App : Application
{
    public override void Initialize()
    {
        // Delay adding FluentTheme until OnFrameworkInitializationCompleted
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            var settingsService = new SettingsService();
            var appSettings = settingsService.LoadSettings();

            var themeService = new ThemeService(appSettings.PreferredThemeFileName);
            ThemeColors currentCustomTheme = themeService.CurrentTheme;

            var fluentTheme = new FluentTheme();
            Styles.Add(fluentTheme);
            RequestedThemeVariant = ThemeVariant.Dark;
            Debug.WriteLine($"[App] RequestedThemeVariant set to: {RequestedThemeVariant}");

            if (currentCustomTheme.B_AccentColor is ISolidColorBrush accentSolidBrush &&
                currentCustomTheme.B_AccentForeground is ISolidColorBrush accentForegroundSolidBrush)
            {
                Color accentColor = accentSolidBrush.Color;
                Color accentForegroundColor = accentForegroundSolidBrush.Color;
                Debug.WriteLine($"[App] Overriding FluentTheme accent resources. Accent: {accentColor}, AccentFG: {accentForegroundColor}");
                Resources["SystemAccentColor"] = accentColor;
                Resources["SystemAccentColorLight1"] = accentColor.ChangeLightness(0.15);
                Resources["SystemAccentColorLight2"] = accentColor.ChangeLightness(0.30);
                Resources["SystemAccentColorLight3"] = accentColor.ChangeLightness(0.45);
                Resources["SystemAccentColorDark1"] = accentColor.ChangeLightness(-0.15);
                Resources["SystemAccentColorDark2"] = accentColor.ChangeLightness(-0.30);
                Resources["SystemAccentColorDark3"] = accentColor.ChangeLightness(-0.45);
                Resources["AccentFillColorDefaultBrush"] = new SolidColorBrush(accentColor);
                Resources["AccentFillColorSecondaryBrush"] = new SolidColorBrush(accentColor.ChangeLightness(0.15).WithAlpha(204));
                Resources["AccentFillColorTertiaryBrush"] = new SolidColorBrush(accentColor.ChangeLightness(0.30).WithAlpha(153));
                Resources["AccentFillColorDisabledBrush"] = new SolidColorBrush(accentColor.WithAlpha(51));
                Resources["AccentFillColorSelectedTextBackgroundBrush"] = new SolidColorBrush(accentColor);
                Resources["TextOnAccentFillColorPrimaryBrush"] = new SolidColorBrush(accentForegroundColor);
                Resources["TextOnAccentFillColorSecondaryBrush"] = new SolidColorBrush(accentForegroundColor.WithAlpha(178));
                Resources["TextOnAccentFillColorDisabledBrush"] = new SolidColorBrush(accentForegroundColor.WithAlpha(127));
                Resources["AccentControlBackgroundBrush"] = new SolidColorBrush(accentColor);
            }
            else
            {
                Debug.WriteLine("[App] Warning: Custom theme AccentColor or AccentForeground is not a SolidColorBrush. Cannot fully override Fluent accent system.");
            }

            var scrobblingService = new ScrobblingService(settingsService); // Create ScrobblingService
            var playbackService = new PlaybackService(scrobblingService); // Pass ScrobblingService
            var loopDataService = new LoopDataService();
            var musicLibraryService = new MusicLibraryService(loopDataService);
            var waveformService = new WaveformService();

            var mainWindowViewModel = new MainWindowViewModel(
                settingsService,
                musicLibraryService,
                playbackService,
                currentCustomTheme,
                waveformService,
                loopDataService,
                scrobblingService); // Pass ScrobblingService

            desktop.MainWindow = new MainWindow(currentCustomTheme)
            {
                DataContext = mainWindowViewModel
            };

            mainWindowViewModel.LoadInitialDataCommand.Execute(null);
        }

        base.OnFrameworkInitializationCompleted();
    }
}

public static class ColorManipulationExtensions
{
    public static Color WithAlpha(this Color color, byte alpha)
    {
        return new Color(alpha, color.R, color.G, color.B);
    }
}

public static class ColorExtensions
{
    public static Color ChangeLightness(this Color color, double factor)
    {
        var hsl = color.ToHsl();
        double newL = System.Math.Clamp(hsl.L + factor, 0.0, 1.0);
        return HslColor.FromAhsl(hsl.A, hsl.H, hsl.S, newL).ToRgb();
    }
}
</file>

<file path="Program.cs">
using Avalonia;
using System;
using NAudio.MediaFoundation; // Required for MediaFoundationApi

namespace Sonorize;

class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args)
    {
        // Initialize Media Foundation
        try
        {
            MediaFoundationApi.Startup();
            Console.WriteLine("[Program] MediaFoundationApi.Startup() called successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Program] CRITICAL ERROR: MediaFoundationApi.Startup() failed: {ex.Message}");
            // Optionally, prevent the app from starting or notify the user,
            // as MF features will likely not work.
        }

        try
        {
            BuildAvaloniaApp().StartWithClassicDesktopLifetime(args);
        }
        finally
        {
            // Shutdown Media Foundation
            try
            {
                MediaFoundationApi.Shutdown();
                Console.WriteLine("[Program] MediaFoundationApi.Shutdown() called successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Program] ERROR: MediaFoundationApi.Shutdown() failed: {ex.Message}");
            }
        }
    }

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .LogToTrace();
}
</file>

<file path="Source\Controls\WaveformDisplayControl.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Input;
using System;
using System.Collections.Generic;
using System.Linq; // Required for Enumerable.Empty
using Sonorize.Models; // For LoopRegion
using Sonorize.Services; // For WaveformPoint

namespace Sonorize.Controls;

public class WaveformDisplayControl : Control
{
    // Background Property
    public static readonly StyledProperty<IBrush?> BackgroundProperty =
        Border.BackgroundProperty.AddOwner<WaveformDisplayControl>();

    public IBrush? Background
    {
        get => GetValue(BackgroundProperty);
        set => SetValue(BackgroundProperty, value);
    }

    // Corrected to use IEnumerable<WaveformPoint>
    public static readonly StyledProperty<IEnumerable<WaveformPoint>> WaveformPointsProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IEnumerable<WaveformPoint>>(
            nameof(WaveformPoints),
            defaultValue: Enumerable.Empty<WaveformPoint>()); // Default to an empty enumerable

    public IEnumerable<WaveformPoint> WaveformPoints
    {
        get => GetValue(WaveformPointsProperty);
        set => SetValue(WaveformPointsProperty, value);
    }

    public static readonly StyledProperty<TimeSpan> CurrentPositionProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, TimeSpan>(nameof(CurrentPosition));

    public TimeSpan CurrentPosition
    {
        get => GetValue(CurrentPositionProperty);
        set => SetValue(CurrentPositionProperty, value);
    }

    public static readonly StyledProperty<TimeSpan> DurationProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, TimeSpan>(nameof(Duration), TimeSpan.FromSeconds(1));

    public TimeSpan Duration
    {
        get => GetValue(DurationProperty);
        set => SetValue(DurationProperty, value);
    }

    public static readonly StyledProperty<LoopRegion?> ActiveLoopProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, LoopRegion?>(nameof(ActiveLoop));

    public LoopRegion? ActiveLoop
    {
        get => GetValue(ActiveLoopProperty);
        set => SetValue(ActiveLoopProperty, value);
    }

    public static readonly StyledProperty<IBrush> WaveformBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(WaveformBrush), Brushes.DodgerBlue);
    public IBrush WaveformBrush { get => GetValue(WaveformBrushProperty); set => SetValue(WaveformBrushProperty, value); }

    public static readonly StyledProperty<IBrush> PositionMarkerBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(PositionMarkerBrush), Brushes.Red);
    public IBrush PositionMarkerBrush { get => GetValue(PositionMarkerBrushProperty); set => SetValue(PositionMarkerBrushProperty, value); }

    public static readonly StyledProperty<IBrush> LoopRegionBrushProperty =
        AvaloniaProperty.Register<WaveformDisplayControl, IBrush>(nameof(LoopRegionBrush), new SolidColorBrush(Colors.Orange, 0.3));
    public IBrush LoopRegionBrush { get => GetValue(LoopRegionBrushProperty); set => SetValue(LoopRegionBrushProperty, value); }


    public event EventHandler<TimeSpan>? SeekRequested;

    static WaveformDisplayControl()
    {
        AffectsRender<WaveformDisplayControl>(BackgroundProperty, WaveformPointsProperty, CurrentPositionProperty, DurationProperty, ActiveLoopProperty, WaveformBrushProperty, PositionMarkerBrushProperty, LoopRegionBrushProperty);
    }

    public WaveformDisplayControl()
    {
        ClipToBounds = true;
    }

    protected override void OnPointerPressed(PointerPressedEventArgs e)
    {
        base.OnPointerPressed(e);
        if (Duration.TotalSeconds > 0 && e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
        {
            var position = e.GetPosition(this);
            var relativeX = position.X / Bounds.Width;
            var seekTime = TimeSpan.FromSeconds(relativeX * Duration.TotalSeconds);
            SeekRequested?.Invoke(this, seekTime);
        }
    }

    public override void Render(DrawingContext context)
    {
        base.Render(context);
        var width = Bounds.Width;
        var height = Bounds.Height;

        if (width <= 0 || height <= 0) return;

        // Draw Background
        if (Background != null)
        {
            context.FillRectangle(Background, Bounds);
        }

        var waveformPen = new Pen(WaveformBrush, 1);
        var positionPen = new Pen(PositionMarkerBrush, 1.5);

        // WaveformPoints is now IEnumerable<WaveformPoint>
        if (WaveformPoints != null && WaveformPoints.Any()) // Use .Any() for IEnumerable
        {
            // If we need Count or indexed access, we might need to ToList() it here,
            // but for simple iteration, this is fine.
            // For performance with potentially large IEnumerable, if Count is needed multiple times,
            // convert to List once.
            var pointsList = WaveformPoints as List<WaveformPoint> ?? WaveformPoints.ToList();
            if (pointsList.Count > 1)
            {
                for (int i = 0; i < pointsList.Count; i++)
                {
                    var point = pointsList[i];
                    var x = point.X * width;
                    var yPeakValue = point.YPeak * (height / 2);
                    context.DrawLine(waveformPen, new Point(x, height / 2 - yPeakValue), new Point(x, height / 2 + yPeakValue));
                }
            }
            else if (pointsList.Count == 1) // Draw a small vertical line for a single point
            {
                var point = pointsList[0];
                var x = point.X * width;
                var yPeakValue = point.YPeak * (height / 2);
                context.DrawLine(waveformPen, new Point(x, height / 2 - yPeakValue), new Point(x, height / 2 + yPeakValue));
            }
            else // No points but not null (e.g., empty collection)
            {
                context.DrawLine(waveformPen, new Point(0, height / 2), new Point(width, height / 2));
            }
        }
        else // WaveformPoints is null or empty
        {
            context.DrawLine(waveformPen, new Point(0, height / 2), new Point(width, height / 2));
        }

        if (ActiveLoop != null && Duration.TotalSeconds > 0)
        {
            var loopStartRatio = ActiveLoop.Start.TotalSeconds / Duration.TotalSeconds;
            var loopEndRatio = ActiveLoop.End.TotalSeconds / Duration.TotalSeconds;
            var loopStartX = loopStartRatio * width;
            var loopEndX = loopEndRatio * width;
            if (loopEndX > loopStartX)
            {
                context.FillRectangle(LoopRegionBrush, new Rect(loopStartX, 0, loopEndX - loopStartX, height));
            }
        }

        if (Duration.TotalSeconds > 0)
        {
            var currentX = (CurrentPosition.TotalSeconds / Duration.TotalSeconds) * width;
            currentX = Math.Clamp(currentX, 0, width);
            context.DrawLine(positionPen, new Point(currentX, 0), new Point(currentX, height));
        }
    }
}
</file>

<file path="Source\Converters\BooleanToPlayPauseIconConverter.cs">
using System;
using Avalonia.Data.Converters;
using System.Globalization;

namespace Sonorize.Converters
{
    public class BooleanToPlayPauseIconConverter : IValueConverter
    {
        public static readonly BooleanToPlayPauseIconConverter Instance = new();

        private const string PlayIcon = "▶"; // U+25B6
        private const string PauseIcon = "||"; // U+2016 (Double Vertical Line)

        public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            if (value is bool isPlaying)
            {
                return isPlaying ? PauseIcon : PlayIcon;
            }
            return PlayIcon; // Default to Play icon if value is not a bool
        }

        public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
</file>

<file path="Source\Converters\BooleanToPlayPauseTextConverter.cs">
// Path: Source/Views/MainView.cs
using System;
using Avalonia.Data.Converters;

namespace Sonorize.Converters;

public class BooleanToPlayPauseTextConverter : IValueConverter
{
    public static readonly BooleanToPlayPauseTextConverter Instance = new();

    public object Convert(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
    {
        if (value is bool isPlaying) return isPlaying ? "Pause" : "Play";
        return "Play";
    }
    public object ConvertBack(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
        => throw new NotSupportedException();
}
</file>

<file path="Source\Converters\BooleanToShuffleIconConverter.cs">
using System;
using Avalonia.Data.Converters;
using System.Globalization;
using System.Diagnostics; // Added for Debug

namespace Sonorize.Converters
{
    public class BooleanToShuffleIconConverter : IValueConverter
    {
        public static readonly BooleanToShuffleIconConverter Instance = new();

        private const string ShuffleActiveIcon = "🔀"; // U+1F500 Twisted Arrows Right and Left
        private const string ShuffleInactiveIcon = "↔"; // U+2194 Left Right Arrow

        public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            // Add debug logging here
            Debug.WriteLine($"[Converter] BooleanToShuffleIconConverter Convert called. Value: {value}, TargetType: {targetType}");
            if (value is bool isShuffleEnabled)
            {
                Debug.WriteLine($"[Converter] isShuffleEnabled: {isShuffleEnabled}. Returning: {(isShuffleEnabled ? ShuffleActiveIcon : ShuffleInactiveIcon)}");
                return isShuffleEnabled ? ShuffleActiveIcon : ShuffleInactiveIcon;
            }
            Debug.WriteLine($"[Converter] Value is not bool ({value?.GetType().Name ?? "null"}). Returning: {ShuffleInactiveIcon}");
            return ShuffleInactiveIcon; // Default
        }

        public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
</file>

<file path="Source\Converters\NotNullToBooleanConverter.cs">
using System;
using System.Globalization;
using Avalonia.Data.Converters;

namespace Sonorize.Converters;

public class NotNullToBooleanConverter : IValueConverter
{
    public static readonly NotNullToBooleanConverter Instance = new();

    public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        return value != null;
    }

    public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
    {
        throw new NotSupportedException();
    }
}
</file>

<file path="Source\Converters\SliderFillWidthConverter.cs">
using Avalonia;
using System;

namespace Sonorize.Converters;

public class SliderFillWidthConverter : Avalonia.Data.Converters.IMultiValueConverter
{
    public object Convert(System.Collections.Generic.IList<object> values, Type targetType, object parameter, System.Globalization.CultureInfo culture)
    {
        if (values.Count == 3 &&
            values[0] is double value &&
            values[1] is double max &&
            values[2] is Rect bounds &&
            max > 0)
        {
            return bounds.Width * (value / max);
        }

        return 0.0;
    }

    public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)
    {
        throw new NotSupportedException();
    }
}
</file>

<file path="Source\Models\AppSettings.cs">
using System.Collections.Generic;
using Sonorize.ViewModels;

namespace Sonorize.Models;

public class AppSettings
{
    public List<string> MusicDirectories { get; set; } = [];
    public string? PreferredThemeFileName { get; set; }

    public string LibraryViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();
    public string ArtistViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();
    public string AlbumViewModePreference { get; set; } = SongDisplayMode.Detailed.ToString();

    // Last.fm Settings
    public bool LastfmScrobblingEnabled { get; set; } = false;
    public string? LastfmUsername { get; set; }
    public string? LastfmPassword { get; set; } // Used for initial authentication to get a session key.
    public string? LastfmSessionKey { get; set; } // Stores the authenticated session key.

    public int ScrobbleThresholdPercentage { get; set; } = 50; // Default to 50%
    public int ScrobbleThresholdAbsoluteSeconds { get; set; } = 240; // Default to 240 seconds (4 minutes)
}
</file>

<file path="Source\Models\LoopRegion.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Sonorize.Models;

public class LoopRegion(TimeSpan start, TimeSpan end, string name = "Loop") : INotifyPropertyChanged
{
    private TimeSpan end = end;

    public string Name
    {
        get;

        set
        {
            SetProperty(ref field, value);
        }
    } = name;

    public TimeSpan Start
    {
        get;
        
        set
        {
            SetProperty(ref field, value);
        }
    } = start;

    public TimeSpan End
    {
        get => end;
        set => end = value;
    }

    public string DisplayText => $"({Start:mm\\:ss} - {End:mm\\:ss})";

    public event PropertyChangedEventHandler? PropertyChanged;
    
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value))
        {
            return false;
        }

        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }

    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new(propertyName));
    }
}
</file>

<file path="Source\Models\LoopStorageData.cs">
using System;

namespace Sonorize.Models;

public record LoopStorageData(TimeSpan Start, TimeSpan End, bool IsActive);
</file>

<file path="Source\Models\Song.cs">
using Avalonia.Media.Imaging;
using Sonorize.ViewModels; // For ViewModelBase
using System;
using System.ComponentModel;
using System.Diagnostics; // For INotifyPropertyChanged

namespace Sonorize.Models;

public class Song : ViewModelBase
{
    private string _filePath = string.Empty;
    public string FilePath { get => _filePath; set => SetProperty(ref _filePath, value); }

    private string _title = "Unknown Title";
    public string Title { get => _title; set => SetProperty(ref _title, value); }

    private string _artist = "Unknown Artist";
    public string Artist { get => _artist; set => SetProperty(ref _artist, value); }

    private string _album = "Unknown Album";
    public string Album { get => _album; set => SetProperty(ref _album, value); }

    private TimeSpan _duration;
    public TimeSpan Duration { get => _duration; set => SetProperty(ref _duration, value); }
    public string DurationString => $"{Duration:mm\\:ss}";

    private Bitmap? _thumbnail;
    public Bitmap? Thumbnail { get => _thumbnail; set => SetProperty(ref _thumbnail, value); }

    private LoopRegion? _savedLoop;
    public LoopRegion? SavedLoop
    {
        get => _savedLoop;
        set => SetProperty(ref _savedLoop, value);
    }

    private bool _isLoopActive;
    public bool IsLoopActive
    {
        get => _isLoopActive;
        set
        {
            // SetProperty handles OnPropertyChanged
            if (SetProperty(ref _isLoopActive, value))
            {
                // The ViewModel will observe this change and trigger persistence
                Debug.WriteLine($"[SongModel] {Title} - IsLoopActive set to: {value}");
            }
        }
    }
}
</file>

<file path="Source\Models\ThemeColors.cs">
using Avalonia.Media;
using System.Text.Json.Serialization;

namespace Sonorize.Models;

public class ThemeColors
{
    // --- Main UI Colors ---
    public string BackgroundColor { get; set; } = "#FF1E1E1E";
    public string SlightlyLighterBackground { get; set; } = "#FF2D2D30";
    public string ControlBackgroundColor { get; set; } = "#FF3C3C3C";
    public string TextColor { get; set; } = "#FFF1F1F1";
    public string SecondaryTextColor { get; set; } = "#FFAAAAAA";
    public string AccentColor { get; set; } = "#FF007ACC";
    public string AccentForeground { get; set; } = "#FFFFFFFF";

    // --- ListBox Specific Colors ---
    public string ListBoxBackground { get; set; } = "#FF2D2D30"; // Default: Same as SlightlyLighterBackground

    // --- Brush Properties ---
    [JsonIgnore] public IBrush B_BackgroundColor => SolidColorBrush.Parse(BackgroundColor);
    [JsonIgnore] public IBrush B_SlightlyLighterBackground => SolidColorBrush.Parse(SlightlyLighterBackground);
    [JsonIgnore] public IBrush B_ControlBackgroundColor => SolidColorBrush.Parse(ControlBackgroundColor);
    [JsonIgnore] public IBrush B_TextColor => SolidColorBrush.Parse(TextColor);
    [JsonIgnore] public IBrush B_SecondaryTextColor => SolidColorBrush.Parse(SecondaryTextColor);
    [JsonIgnore] public IBrush B_AccentColor => SolidColorBrush.Parse(AccentColor);
    [JsonIgnore] public IBrush B_AccentForeground => SolidColorBrush.Parse(AccentForeground);
    [JsonIgnore] public IBrush B_ListBoxBackground => SolidColorBrush.Parse(ListBoxBackground);

    public static ThemeColors CreateAmoledSpotifyTheme()
    {
        return new()
        {
            BackgroundColor = "#FF000000",
            SlightlyLighterBackground = "#FF121212",
            ControlBackgroundColor = "#FF181818",
            TextColor = "#FFFFFFFF",
            SecondaryTextColor = "#FFB3B3B3",
            AccentColor = "#FF1DB954",      // Spotify Green
            AccentForeground = "#FF000000",  // Black text on green buttons
            ListBoxBackground = "#FF000000"   // <<< CRUCIAL FOR AMOLED LIST ITEMS (unselected)
        };
    }
}
</file>

<file path="Source\Services\LoopDataService.cs">
// Path: Source/Services/LoopDataService.cs
using Sonorize.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Diagnostics;

namespace Sonorize.Services;

public class LoopDataService
{
    private readonly string _loopDataFilePath;
    private Dictionary<string, LoopStorageData> _loopDataStore = new();
    private readonly object _lock = new object();

    public LoopDataService()
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        Directory.CreateDirectory(sonorizeAppDataPath);
        _loopDataFilePath = Path.Combine(sonorizeAppDataPath, "loopdata.json");
        LoadLoopData();
        Debug.WriteLine($"[LoopDataService] Initialized. Data loaded from: {_loopDataFilePath}");
    }

    private void LoadLoopData()
    {
        lock (_lock)
        {
            try
            {
                if (File.Exists(_loopDataFilePath))
                {
                    var json = File.ReadAllText(_loopDataFilePath);
                    // Handle potential old format without IsActive gracefully
                    var tempStore = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);
                    _loopDataStore = new Dictionary<string, LoopStorageData>();
                    if (tempStore != null)
                    {
                        foreach (var kvp in tempStore)
                        {
                            try
                            {
                                // Try to deserialize to the new record type
                                _loopDataStore[kvp.Key] = kvp.Value.Deserialize<LoopStorageData>()!;
                            }
                            catch (JsonException) // If it fails, it might be the old format
                            {
                                try
                                {
                                    // Old format: record LoopStorageData(TimeSpan Start, TimeSpan End);
                                    var oldLoop = kvp.Value.Deserialize<OldLoopStorageDataTemp>();
                                    if (oldLoop != null)
                                    {
                                        _loopDataStore[kvp.Key] = new LoopStorageData(oldLoop.Start, oldLoop.End, false); // Default IsActive to false for old data
                                        Debug.WriteLine($"[LoopDataService] Migrated old loop format for {Path.GetFileName(kvp.Key)}");
                                    }
                                }
                                catch (Exception exMigrate)
                                {
                                    Debug.WriteLine($"[LoopDataService] Failed to migrate or deserialize loop for {Path.GetFileName(kvp.Key)}: {exMigrate.Message}");
                                }
                            }
                        }
                    }
                    Debug.WriteLine($"[LoopDataService] Successfully loaded/migrated {_loopDataStore.Count} loop entries.");
                }
                else
                {
                    _loopDataStore = new Dictionary<string, LoopStorageData>();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LoopDataService] Error loading loop data: {ex.Message}. Initializing with empty store.");
                _loopDataStore = new Dictionary<string, LoopStorageData>();
            }
        }
    }
    // Temporary record for migration from old format
    private record OldLoopStorageDataTemp(TimeSpan Start, TimeSpan End);


    private void SaveLoopData()
    {
        lock (_lock)
        {
            try
            {
                var options = new JsonSerializerOptions { WriteIndented = true };
                var json = JsonSerializer.Serialize(_loopDataStore, options);
                File.WriteAllText(_loopDataFilePath, json);
                Debug.WriteLine($"[LoopDataService] Successfully saved {_loopDataStore.Count} loop entries to {_loopDataFilePath}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LoopDataService] Error saving loop data: {ex.Message}");
            }
        }
    }

    public LoopStorageData? GetLoop(string filePath)
    {
        if (string.IsNullOrEmpty(filePath)) return null;
        lock (_lock)
        {
            _loopDataStore.TryGetValue(filePath, out var loopData);
            return loopData;
        }
    }

    // Modified to accept isActive
    public void SetLoop(string filePath, TimeSpan start, TimeSpan end, bool isActive)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        var loopData = new LoopStorageData(start, end, isActive);
        lock (_lock)
        {
            _loopDataStore[filePath] = loopData;
        }
        Debug.WriteLine($"[LoopDataService] SetLoop for \"{Path.GetFileName(filePath)}\": Start={start}, End={end}, IsActive={isActive}. Triggering save.");
        SaveLoopData();
    }

    public void UpdateLoopActiveState(string filePath, bool isActive)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        lock (_lock)
        {
            if (_loopDataStore.TryGetValue(filePath, out var existingLoop))
            {
                _loopDataStore[filePath] = existingLoop with { IsActive = isActive }; // Using record 'with' expression
                Debug.WriteLine($"[LoopDataService] UpdateLoopActiveState for \"{Path.GetFileName(filePath)}\" to IsActive={isActive}. Triggering save.");
                SaveLoopData();
            }
            else
            {
                Debug.WriteLine($"[LoopDataService] UpdateLoopActiveState: No loop definition found for \"{Path.GetFileName(filePath)}\" to update active state.");
            }
        }
    }

    public void ClearLoop(string filePath)
    {
        if (string.IsNullOrEmpty(filePath)) return;
        bool removed = false;
        lock (_lock)
        {
            if (_loopDataStore.ContainsKey(filePath))
            {
                removed = _loopDataStore.Remove(filePath);
            }
        }
        if (removed)
        {
            Debug.WriteLine($"[LoopDataService] ClearLoop for \"{Path.GetFileName(filePath)}\". Triggering save.");
            SaveLoopData();
        }
    }
}
</file>

<file path="Source\Services\MusicLibraryService.cs">
using Avalonia;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Platform;
using Avalonia.Threading;
using Sonorize.Models;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using TagLib;

namespace Sonorize.Services;

public class MusicLibraryService
{
    private Bitmap? _defaultThumbnail;
    private readonly LoopDataService _loopDataService;
    private const int UI_UPDATE_BATCH_SIZE = 50;

    private readonly ConcurrentQueue<Song> _thumbnailQueue = new();
    private readonly SemaphoreSlim _thumbnailWorkers = new(4); // Limit concurrent thumbnail loads
    private bool _isThumbnailProcessingRunning = false;

    public event Action<Song>? SongThumbnailUpdated;


    public MusicLibraryService(LoopDataService loopDataService)
    {
        _loopDataService = loopDataService;
        Debug.WriteLine("[MusicLibService] Constructor called.");
        _defaultThumbnail = CreateDefaultMusicalNoteIcon();
        if (_defaultThumbnail == null)
        {
            Debug.WriteLine("[MusicLibService] CRITICAL: Failed to create default thumbnail in constructor.");
        }
        else
        {
            Debug.WriteLine("[MusicLibService] Default thumbnail created successfully in constructor.");
        }
    }

    private Bitmap? CreateDefaultMusicalNoteIcon()
    {
        Debug.WriteLine("[ThumbGen] CreateDefaultMusicalNoteIcon called.");
        try
        {
            var pixelSize = new PixelSize(96, 96);
            var dpi = new Vector(96, 96);

            using var renderTarget = new RenderTargetBitmap(pixelSize, dpi);
            using (DrawingContext context = renderTarget.CreateDrawingContext())
            {
                var backgroundBrush = new SolidColorBrush(Colors.DimGray);
                var foregroundBrush = Brushes.WhiteSmoke;
                var bounds = new Rect(new Size(pixelSize.Width, pixelSize.Height));

                context.FillRectangle(backgroundBrush, bounds);

                var formattedText = new FormattedText(
                    "♫",
                    CultureInfo.CurrentCulture,
                    FlowDirection.LeftToRight,
                    Typeface.Default,
                    pixelSize.Width / 2,
                    foregroundBrush);

                var textOrigin = new Point(
                    (bounds.Width - formattedText.Width) / 2,
                    (bounds.Height - formattedText.Height) / 2);

                context.DrawText(formattedText, textOrigin);
            }

            using var memoryStream = new MemoryStream();
            renderTarget.Save(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            return memoryStream.Length > 0 ? new Bitmap(memoryStream) : null;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ThumbGen] CRITICAL EXCEPTION creating default icon: {ex}");
            return null;
        }
    }

    public Bitmap? GetDefaultThumbnail() => _defaultThumbnail;

    private async Task<Bitmap?> LoadAlbumArtAsync(string filePath)
    {
        try
        {
            return await Task.Run(() =>
            {
                using var tagFile = TagLib.File.Create(filePath);
                if (tagFile.Tag.Pictures.Length > 0)
                {
                    IPicture pic = tagFile.Tag.Pictures[0];
                    using var ms = new MemoryStream(pic.Data.Data);
                    if (ms.Length > 0)
                    {
                        using var originalBitmap = new Bitmap(ms);
                        var targetSize = new PixelSize(128, 128);
                        return originalBitmap.CreateScaledBitmap(targetSize, BitmapInterpolationMode.HighQuality);
                    }
                }
                return null;
            });
        }
        catch (CorruptFileException) { Debug.WriteLine($"[AlbumArtAsync] Corrupt file: {Path.GetFileName(filePath)}"); }
        catch (UnsupportedFormatException) { Debug.WriteLine($"[AlbumArtAsync] Unsupported format: {Path.GetFileName(filePath)}"); }
        catch (Exception ex) { Debug.WriteLine($"[AlbumArtAsync] Error: {Path.GetFileName(filePath)} - {ex.Message}"); }
        return null;
    }

    public async Task LoadMusicFromDirectoriesAsync(
        IEnumerable<string> directories,
        Action<Song> songAddedCallback,
        Action<string> statusUpdateCallback)
    {
        Debug.WriteLine("[MusicLibService] LoadMusicFromDirectoriesAsync");
        var supportedExtensions = new[] { ".mp3", ".wav", ".flac", ".m4a", ".ogg" };
        Bitmap? defaultIcon = GetDefaultThumbnail();
        int filesProcessed = 0;

        foreach (var dir in directories)
        {
            if (!Directory.Exists(dir))
            {
                Debug.WriteLine($"[LibScan] Directory not found: {dir}");
                await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Directory not found: {dir}"));
                continue;
            }

            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Scanning: {Path.GetFileName(dir)}..."));

            List<string> filesInDir;
            try
            {
                filesInDir = Directory.EnumerateFiles(dir, "*.*", SearchOption.AllDirectories)
                    .Where(f => supportedExtensions.Any(ext => f.EndsWith(ext, StringComparison.OrdinalIgnoreCase)))
                    .ToList();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[LibScan] Error enumerating files: {dir} - {ex.Message}");
                await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Error scanning {Path.GetFileName(dir)}"));
                continue;
            }

            foreach (var file in filesInDir)
            {
                var song = new Song
                {
                    FilePath = file,
                    Title = Path.GetFileNameWithoutExtension(file),
                    Artist = "Unknown Artist",
                    Album = "Unknown Album",
                    Duration = TimeSpan.Zero,
                    Thumbnail = defaultIcon
                };

                try
                {
                    using var tagFile = TagLib.File.Create(file);
                    if (!string.IsNullOrWhiteSpace(tagFile.Tag.Title)) song.Title = tagFile.Tag.Title;
                    if (tagFile.Tag.Performers.Length > 0 && !string.IsNullOrWhiteSpace(tagFile.Tag.Performers[0]))
                        song.Artist = tagFile.Tag.Performers[0];
                    else if (tagFile.Tag.AlbumArtists.Length > 0 && !string.IsNullOrWhiteSpace(tagFile.Tag.AlbumArtists[0]))
                        song.Artist = tagFile.Tag.AlbumArtists[0];
                    if (!string.IsNullOrWhiteSpace(tagFile.Tag.Album)) song.Album = tagFile.Tag.Album;
                    if (tagFile.Properties.Duration > TimeSpan.Zero) song.Duration = tagFile.Properties.Duration;
                }
                catch (Exception) { }

                var storedLoopData = _loopDataService.GetLoop(song.FilePath);
                if (storedLoopData != null)
                {
                    song.SavedLoop = new LoopRegion(storedLoopData.Start, storedLoopData.End);
                    song.IsLoopActive = storedLoopData.IsActive;
                }

                await Dispatcher.UIThread.InvokeAsync(() => songAddedCallback(song));

                _thumbnailQueue.Enqueue(song);
                StartThumbnailProcessing();

                filesProcessed++;
                if (filesProcessed % (UI_UPDATE_BATCH_SIZE * 2) == 0)
                {
                    await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Loaded {filesProcessed} songs..."));
                }
            }
        }

        await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback($"Metadata scan complete. {filesProcessed} songs found. Loading thumbnails in background..."));
    }

    private void StartThumbnailProcessing()
    {
        if (_isThumbnailProcessingRunning)
            return;

        _isThumbnailProcessingRunning = true;

        Task.Run(async () =>
        {
            while (_thumbnailQueue.TryDequeue(out var song))
            {
                await _thumbnailWorkers.WaitAsync();

                _ = Task.Run(async () =>
                {
                    try
                    {
                        var actualThumbnail = await LoadAlbumArtAsync(song.FilePath);
                        if (actualThumbnail != null)
                        {
                            await Dispatcher.UIThread.InvokeAsync(() =>
                            {
                                song.Thumbnail = actualThumbnail;
                                SongThumbnailUpdated?.Invoke(song); // Invoke event after thumbnail is set
                            });
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[MusicLibService] Thumbnail error for {song.Title}: {ex.Message}");
                    }
                    finally
                    {
                        _thumbnailWorkers.Release();
                    }
                });
            }

            _isThumbnailProcessingRunning = false;
        });
    }
}
</file>

<file path="Source\Services\NextTrackSelectorService.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Sonorize.Models;
using Sonorize.ViewModels;

namespace Sonorize.Services;

public class NextTrackSelectorService(Random shuffleRandom)
{
    private readonly Random _shuffleRandom = shuffleRandom ?? throw new ArgumentNullException(nameof(shuffleRandom));

    public Song? GetNextSong(Song? currentSong, List<Song> currentList, RepeatMode repeatMode, bool shuffleEnabled)
    {
        if (currentSong is null || currentList.Count == 0)
        {
            Debug.WriteLine("[NextTrackSelector] No current song or list is empty. No next song.");
            return null;
        }

        if (repeatMode == RepeatMode.RepeatOne)
        {
            Debug.WriteLine($"[NextTrackSelector] Repeat Mode is RepeatOne. Next song is current: {currentSong.Title}");
            return currentSong;
        }

        if (repeatMode == RepeatMode.None)
        {
            Debug.WriteLine("[NextTrackSelector] Repeat Mode is None. No next song.");
            return null;
        }

        return shuffleEnabled
            ? GetNextSongShuffle(currentSong, currentList, repeatMode)
            : GetNextSongSequential(currentSong, currentList, repeatMode);
    }

    private Song? GetNextSongShuffle(Song currentSong, List<Song> currentList, RepeatMode repeatMode)
    {
        Debug.WriteLine("[NextTrackSelector] Shuffle is Enabled.");
        
        Song? nextSong = null;

        if (currentList.Count == 0)
        {
            Debug.WriteLine("[NextTrackSelector] Shuffle enabled, but list is empty.");
            return null;
        }

        List<Song> potentialNextSongs = currentList.Where(s => s != currentSong).ToList();

        if (potentialNextSongs.Count != 0)
        {
            int nextIndex = _shuffleRandom.Next(potentialNextSongs.Count);
            nextSong = potentialNextSongs[nextIndex];

            Debug.WriteLine($"[NextTrackSelector] Shuffle pick: {nextSong?.Title ?? "null"}");
        }
        else if (currentList.Count == 1)
        {
            if (repeatMode == RepeatMode.RepeatAll)
            {
                Debug.WriteLine($"[NextTrackSelector] Shuffle enabled, one song in list, RepeatAll active. Replaying: {currentSong.Title}");
                nextSong = currentSong;
            }
            else
            {
                Debug.WriteLine($"[NextTrackSelector] Shuffle enabled, only one song ({currentSong.Title}) in list, not RepeatAll. No next song.");
                nextSong = null;
            }
        }
        else
        {
            Debug.WriteLine("[NextTrackSelector] Shuffle enabled, logical error: no potential next songs from a multi-item list. No next song.");
            nextSong = null;
        }

        return nextSong;
    }

    private static Song? GetNextSongSequential(Song currentSong, List<Song> currentList, RepeatMode repeatMode)
    {
        Debug.WriteLine("[NextTrackSelector] Shuffle is Disabled (Sequential).");
        int currentIndex = currentList.IndexOf(currentSong);

        if (currentIndex == -1)
        {
            Debug.WriteLine("[NextTrackSelector] Sequential: Current song not found in list. No next song.");
            return null;
        }

        Song? nextSong;

        if (currentIndex < currentList.Count - 1)
        {
            nextSong = currentList[currentIndex + 1];
            Debug.WriteLine($"[NextTrackSelector] Sequential next: {nextSong?.Title ?? "null"}");
        }
        else
        {
            Debug.WriteLine("[NextTrackSelector] End of sequential list reached.");

            if (repeatMode == RepeatMode.RepeatAll && currentList.Count != 0)
            {
                nextSong = currentList.First(); // Wrap around
                Debug.WriteLine($"[NextTrackSelector] RepeatAll active, wrapping around to first: {nextSong.Title}");
            }
            else
            {
                Debug.WriteLine($"[NextTrackSelector] RepeatMode is {repeatMode} (not RepeatAll), end of list reached. No next song.");
                nextSong = null;
            }
        }

        return nextSong;
    }
}
</file>

<file path="Source\Services\ScrobblingService.cs">
using Sonorize.Models;
using System.Diagnostics;
using System.Threading.Tasks;
using System;
using IF.Lastfm.Core.Api;
using IF.Lastfm.Core.Objects; // Added for service classes like Track, Auth

namespace Sonorize.Services;

public class ScrobblingService
{
    private readonly SettingsService _settingsService;
    private AppSettings _currentSettings;

    // !!! IMPORTANT: Replace these with your actual API key and secret from Last.fm !!!
    private const string LastfmApiKey = "d623e7a246a80c3bd60819e86c7b5ee1";
    private const string LastfmApiSecret = "9414a77c9b7f8c361d96d4575ccd97f0";
    private const int MinTrackLengthForScrobbleSeconds = 30;

    private string? _cachedSessionKey; // Cache session key for the current app session

    public bool IsScrobblingEnabled => _currentSettings.LastfmScrobblingEnabled;

    // Credentials are now configured if we have a session key, or if we have username/password to attempt to get one.
    public bool AreCredentialsEffectivelyConfigured => !string.IsNullOrEmpty(_cachedSessionKey) ||
                                                      (!string.IsNullOrEmpty(_currentSettings.LastfmUsername) &&
                                                       !string.IsNullOrEmpty(_currentSettings.LastfmPassword));

    public ScrobblingService(SettingsService settingsService)
    {
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
        RefreshSettings(); // Initial load of settings and session key
        Debug.WriteLine($"[ScrobblingService] Initialized. Scrobbling Enabled: {IsScrobblingEnabled}, SessionKey Cached: {!string.IsNullOrEmpty(_cachedSessionKey)}");
    }

    public void RefreshSettings()
    {
        _currentSettings = _settingsService.LoadSettings();
        _cachedSessionKey = _currentSettings.LastfmSessionKey; // Load session key from settings
        Debug.WriteLine($"[ScrobblingService] Settings refreshed. Scrobbling Enabled: {IsScrobblingEnabled}, SessionKey Cached: {!string.IsNullOrEmpty(_cachedSessionKey)}, Thresholds: {_currentSettings.ScrobbleThresholdPercentage}% / {_currentSettings.ScrobbleThresholdAbsoluteSeconds}s");
    }

    private async Task<LastfmClient?> GetClientAsync()
    {
        if (string.IsNullOrEmpty(LastfmApiKey) || LastfmApiKey == "YOUR_LASTFM_API_KEY" ||
            string.IsNullOrEmpty(LastfmApiSecret) || LastfmApiSecret == "YOUR_LASTFM_API_SECRET")
        {
            Debug.WriteLine("[ScrobblingService] CRITICAL: Last.fm API Key or Secret is not configured. Aborting.");
            return null;
        }

        RefreshSettings(); // reload the latest settings from disk

        if (!string.IsNullOrEmpty(_cachedSessionKey))
        {
            // We already have a valid session key from a previous run.
            var auth = new LastAuth(LastfmApiKey, LastfmApiSecret);
            // Tell LastAuth to “use” the saved session key:
            auth.LoadSession(new LastUserSession { Token = _cachedSessionKey });
            return new LastfmClient(auth);
        }

        // No cached session key—attempt to authenticate with username/password
        if (!string.IsNullOrEmpty(_currentSettings.LastfmUsername) &&
            !string.IsNullOrEmpty(_currentSettings.LastfmPassword))
        {
            Debug.WriteLine($"[ScrobblingService] No session key; attempting login for '{_currentSettings.LastfmUsername}'…");
            var auth = new LastAuth(LastfmApiKey, LastfmApiSecret);

            try
            {
                var response = await auth.GetSessionTokenAsync(
                    _currentSettings.LastfmUsername,
                    _currentSettings.LastfmPassword
                );

                if (response.Success && auth.Authenticated)
                {
                    // Pull the just-obtained session out of auth.Session:
                    var session = auth.UserSession;           // UserSession
                    _cachedSessionKey = session.Token;      // The actual session key string
                    _currentSettings.LastfmSessionKey = session.Token;
                    _settingsService.SaveSettings(_currentSettings);

                    Debug.WriteLine($"[ScrobblingService] Successfully obtained session key for '{_currentSettings.LastfmUsername}'.");

                    // Return a new client that’s now “logged in” with the session key
                    var authenticatedAuth = new LastAuth(LastfmApiKey, LastfmApiSecret);
                    authenticatedAuth.LoadSession(session);
                    return new LastfmClient(authenticatedAuth);
                }
                else
                {
                    Debug.WriteLine($"[ScrobblingService] Authentication failed. " +
                                    $"Success={response.Success}, HasAuthenticated={auth.Authenticated}.");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ScrobblingService] Exception during Last.fm login: {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine("[ScrobblingService] Cannot login: username/password not set in settings.");
        }

        Debug.WriteLine("[ScrobblingService] GetClientAsync: Could not obtain a Last.fm client.");
        return null;
    }



    public bool ShouldScrobble(Song song, TimeSpan playedDuration)
    {
        RefreshSettings();

        if (song == null || song.Duration.TotalSeconds <= MinTrackLengthForScrobbleSeconds)
        {
            Debug.WriteLine($"[ScrobblingService] ShouldScrobble: Song '{song?.Title ?? "null"}' is null or too short ({song?.Duration.TotalSeconds ?? 0}s). Min required: {MinTrackLengthForScrobbleSeconds}s. Returning false.");
            return false;
        }

        double percentagePlayed = (playedDuration.TotalSeconds / song.Duration.TotalSeconds) * 100.0;
        double requiredPlaybackFromPercentage = song.Duration.TotalSeconds * (_currentSettings.ScrobbleThresholdPercentage / 100.0);
        double requiredPlaybackAbsolute = _currentSettings.ScrobbleThresholdAbsoluteSeconds;
        double effectiveRequiredSeconds = Math.Min(requiredPlaybackFromPercentage, requiredPlaybackAbsolute);
        bool conditionMet = playedDuration.TotalSeconds >= effectiveRequiredSeconds;

        Debug.WriteLine($"[ScrobblingService] ShouldScrobble for '{song.Title}': " +
                        $"Played: {playedDuration.TotalSeconds:F1}s ({percentagePlayed:F1}%), " +
                        $"Song Duration: {song.Duration.TotalSeconds:F1}s. " +
                        $"Configured Thresholds: {_currentSettings.ScrobbleThresholdPercentage}% (gives {requiredPlaybackFromPercentage:F1}s) OR {_currentSettings.ScrobbleThresholdAbsoluteSeconds}s. " +
                        $"Effective Threshold: {effectiveRequiredSeconds:F1}s. Met: {conditionMet}");
        return conditionMet;
    }


    public async Task UpdateNowPlayingAsync(Song song)
    {
        RefreshSettings();
        if (!IsScrobblingEnabled || song == null)
        {
            Debug.WriteLine($"[ScrobblingService] UpdateNowPlayingAsync skipped. Enabled: {IsScrobblingEnabled}, Song: {song?.Title ?? "null"}");
            return;
        }

        var client = await GetClientAsync();
        if (client == null)
        {
            Debug.WriteLine("[ScrobblingService] UpdateNowPlayingAsync: No authenticated client. Skipping.");
            return;
        }

        try
        {
            Debug.WriteLine($"[ScrobblingService] Sending UpdateNowPlaying for: {song.Title} by {song.Artist}");
            var trackInfo = new LastTrack { Name = song.Title, ArtistName = song.Artist, AlbumName = song.Album };
            // Duration should be provided if known
            if (song.Duration.TotalSeconds > 0)
            {
                trackInfo.Duration = song.Duration;
            }

            var scrobble = new Scrobble(song.Artist, song.Album, song.Title, DateTimeOffset.Now);
            var response = await client.Track.UpdateNowPlayingAsync(scrobble);

            if (response.Success)
            {
                Debug.WriteLine($"[ScrobblingService] UpdateNowPlaying successful for: {song.Title}");
            }
            else
            {
                Debug.WriteLine($"[ScrobblingService] UpdateNowPlaying FAILED for: {song.Title}. Error: {response.Status} - {response.Error}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ScrobblingService] CRITICAL EXCEPTION during UpdateNowPlaying for {song.Title}: {ex.Message}");
        }
    }

    public async Task ScrobbleAsync(Song song, DateTime timePlayed)
    {
        // ShouldScrobble check is done by PlaybackService before calling this.
        // We still need to check IsScrobblingEnabled and if we can get a client.
        RefreshSettings();
        if (!IsScrobblingEnabled || song == null)
        {
            Debug.WriteLine($"[ScrobblingService] ScrobbleAsync skipped. Enabled: {IsScrobblingEnabled}, Song: {song?.Title ?? "null"}");
            return;
        }

        var client = await GetClientAsync();
        if (client == null)
        {
            Debug.WriteLine("[ScrobblingService] ScrobbleAsync: No authenticated client. Skipping.");
            return;
        }

        try
        {
            Debug.WriteLine($"[ScrobblingService] Sending Scrobble for: {song.Title} by {song.Artist}, TimePlayed: {timePlayed}");

            var scrobble = new Scrobble(song.Artist, song.Album, song.Title, timePlayed);

            if (song.Duration.TotalSeconds > 0)
            {
                // While Inflatable.Lastfm ScrobbleEntry doesn't directly take duration,
                // it's good practice to have it if other libraries/APIs use it.
                // The API itself determines duration from its metadata if not provided with now playing.
            }

            var response = await client.Track.ScrobbleAsync(scrobble);

            if (response.Success)
            {
                //Debug.WriteLine($"[ScrobblingService] Scrobble successful for: {song.Title}. Accepted: {response.Scrobbles?.AcceptedCount}, Ignored: {response.Scrobbles?.IgnoredCount}");
            }
            else
            {
                Debug.WriteLine($"[ScrobblingService] Scrobble FAILED for: {song.Title}. Error: {response.Status} - {response.Error}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ScrobblingService] CRITICAL EXCEPTION during Scrobble for {song.Title}: {ex.Message}");
        }
    }
}
</file>

<file path="Source\Services\SettingsService.cs">
using Sonorize.Models;
using System;
using System.IO;
using System.Text.Json;

namespace Sonorize.Services;

public class SettingsService
{
    private readonly string _settingsFilePath;

    public SettingsService()
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        Directory.CreateDirectory(sonorizeAppDataPath); // Ensure directory exists
        _settingsFilePath = Path.Combine(sonorizeAppDataPath, "settings.json");
    }

    public AppSettings LoadSettings()
    {
        try
        {
            if (File.Exists(_settingsFilePath))
            {
                var json = File.ReadAllText(_settingsFilePath);
                return JsonSerializer.Deserialize<AppSettings>(json) ?? new AppSettings();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
            // Fallback to default settings
        }
        return new AppSettings();
    }

    public void SaveSettings(AppSettings settings)
    {
        try
        {
            var json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(_settingsFilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings: {ex.Message}");
        }
    }
}
</file>

<file path="Source\Services\ThemeService.cs">
using Sonorize.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Diagnostics;

namespace Sonorize.Services;

public class ThemeService
{
    private readonly string _themesDirectory;
    public ThemeColors CurrentTheme { get; private set; }

    public const string DefaultThemeFileName = "DefaultTheme.json"; // Made public const
    private const string AmoledSpotifyThemeFileName = "AmoledSpotify.json";


    public ThemeService(string? preferredThemeNameFromSettings)
    {
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var sonorizeAppDataPath = Path.Combine(appDataPath, "Sonorize");
        _themesDirectory = Path.Combine(sonorizeAppDataPath, "Themes");
        Directory.CreateDirectory(_themesDirectory);

        EnsureDefaultThemesExist();

        string themeToLoad = DefaultThemeFileName; // Default to this one first

        if (!string.IsNullOrEmpty(preferredThemeNameFromSettings))
        {
            // Check if preferred theme exists
            if (File.Exists(Path.Combine(_themesDirectory, preferredThemeNameFromSettings)))
            {
                themeToLoad = preferredThemeNameFromSettings;
            }
            else
            {
                Debug.WriteLine($"[ThemeService] Preferred theme '{preferredThemeNameFromSettings}' not found. Falling back to default.");
            }
        }

        CurrentTheme = LoadThemeFromFile(themeToLoad);
        if (CurrentTheme == null) // If chosen (or default) theme failed, use hardcoded
        {
            Debug.WriteLine($"[ThemeService] Theme '{themeToLoad}' failed to load. Using hardcoded fallback (standard dark).");
            CurrentTheme = new ThemeColors(); // Hardcoded fallback (standard dark)
        }
        Debug.WriteLine($"[ThemeService] Current theme loaded: {themeToLoad} (BG: {CurrentTheme.BackgroundColor}, Accent: {CurrentTheme.AccentColor})");
    }

    private void EnsureDefaultThemesExist()
    {
        string defaultThemePath = Path.Combine(_themesDirectory, DefaultThemeFileName);
        if (!File.Exists(defaultThemePath))
        {
            SaveThemeToFile(new ThemeColors(), DefaultThemeFileName);
        }

        string amoledSpotifyThemePath = Path.Combine(_themesDirectory, AmoledSpotifyThemeFileName);
        if (!File.Exists(amoledSpotifyThemePath))
        {
            SaveThemeToFile(ThemeColors.CreateAmoledSpotifyTheme(), AmoledSpotifyThemeFileName);
        }
    }

    public ThemeColors? LoadThemeFromFile(string themeFileName)
    {
        // ... (LoadThemeFromFile remains the same as previous correct version) ...
        string filePath = Path.Combine(_themesDirectory, themeFileName);
        Debug.WriteLine($"[ThemeService] Attempting to load theme from: {filePath}");
        if (File.Exists(filePath))
        {
            try
            {
                var json = File.ReadAllText(filePath);
                var theme = JsonSerializer.Deserialize<ThemeColors>(json);
                if (theme != null)
                {
                    Debug.WriteLine($"[ThemeService] Theme '{themeFileName}' loaded successfully.");
                    return theme;
                }
                Debug.WriteLine($"[ThemeService] Failed to deserialize theme '{themeFileName}'. Json content was: {json.Substring(0, Math.Min(json.Length, 200))}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ThemeService] Error loading theme '{themeFileName}': {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine($"[ThemeService] Theme file not found: {filePath}");
        }
        return null;
    }

    public void SaveThemeToFile(ThemeColors theme, string themeFileName)
    {
        // ... (SaveThemeToFile remains the same as previous correct version) ...
        string filePath = Path.Combine(_themesDirectory, themeFileName);
        try
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var json = JsonSerializer.Serialize(theme, options);
            File.WriteAllText(filePath, json);
            Debug.WriteLine($"[ThemeService] Theme '{themeFileName}' saved to: {filePath}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[ThemeService] Error saving theme '{themeFileName}': {ex.Message}");
        }
    }

    public List<string> GetAvailableThemeFiles()
    {
        if (!Directory.Exists(_themesDirectory))
        {
            return new List<string>();
        }
        return Directory.GetFiles(_themesDirectory, "*.json")
                        .Select(Path.GetFileName)
                        .Where(f => f != null) // Path.GetFileName can return null
                        .ToList()!; // Non-null asserted as we filter nulls
    }
}
</file>

<file path="Source\Services\WaveFormService.cs">
using NAudio.Wave;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO; // Required for Path.GetFileName

namespace Sonorize.Services;

// Represents a simplified data point for the waveform
public record WaveformPoint(double X, double YPeak);

public class WaveformService
{
    // Cache for waveform data to avoid reprocessing
    private readonly Dictionary<string, List<WaveformPoint>> _waveformCache = new();

    public async Task<List<WaveformPoint>> GetWaveformAsync(string filePath, int targetPoints)
    {
        if (string.IsNullOrEmpty(filePath) || targetPoints <= 0)
        {
            Debug.WriteLine($"[WaveformService] Invalid input: filePath is null/empty or targetPoints <= 0. File: '{filePath}', Points: {targetPoints}");
            return [];
        }

        // For debugging, temporarily disable cache to ensure fresh generation
        // if (_waveformCache.ContainsKey(filePath)) _waveformCache.Remove(filePath);

        if (_waveformCache.TryGetValue(filePath, out var cachedData))
        {
            Debug.WriteLine($"[WaveformService] Returning cached waveform for \"{Path.GetFileName(filePath)}\". Points: {cachedData.Count}");
            return cachedData;
        }

        Debug.WriteLine($"[WaveformService] Generating waveform for \"{Path.GetFileName(filePath)}\". Target points: {targetPoints}.");
        List<WaveformPoint> points = [];

        try
        {
            await Task.Run(() =>
            {
                using var reader = new AudioFileReader(filePath);
                Debug.WriteLine($"[WaveformServiceReader] File: \"{Path.GetFileName(filePath)}\", TotalTime: {reader.TotalTime}, Channels: {reader.WaveFormat.Channels}, SampleRate: {reader.WaveFormat.SampleRate}, BitsPerSample: {reader.WaveFormat.BitsPerSample}, Encoding: {reader.WaveFormat.Encoding}, BlockAlign: {reader.WaveFormat.BlockAlign}, Length (bytes): {reader.Length}");

                if (reader.WaveFormat.BlockAlign == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] File \"{Path.GetFileName(filePath)}\" has BlockAlign = 0. Cannot calculate total sample frames.");
                    return;
                }

                long totalSampleFrames = reader.Length / reader.WaveFormat.BlockAlign;

                if (totalSampleFrames == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] File \"{Path.GetFileName(filePath)}\" has 0 sample frames (Length: {reader.Length}, BlockAlign: {reader.WaveFormat.BlockAlign}). Cannot generate waveform.");
                    return;
                }

                var samplesPerFrameToProcessPerPoint = (int)Math.Max(1, totalSampleFrames / targetPoints);
                var bufferSizeInSamples = samplesPerFrameToProcessPerPoint * reader.WaveFormat.Channels;

                if (bufferSizeInSamples == 0)
                {
                    Debug.WriteLine($"[WaveformServiceReader] Calculated bufferSizeInSamples is 0 for \"{Path.GetFileName(filePath)}\". TotalSampleFrames: {totalSampleFrames}, TargetPoints: {targetPoints}, Channels: {reader.WaveFormat.Channels}, SamplesPerFrameToProcessPerPoint: {samplesPerFrameToProcessPerPoint}. Cannot generate.");
                    return;
                }

                var buffer = new float[bufferSizeInSamples];
                int samplesReadFromAudioFile;
                double currentX = 0;
                double xIncrement = 1.0 / targetPoints;
                int pointsGeneratedCount = 0;

                Debug.WriteLine($"[WaveformServiceReader] Processing \"{Path.GetFileName(filePath)}\": TotalSampleFrames: {totalSampleFrames}, TargetPoints: {targetPoints}, SamplesPerFrameToProcessPerPoint: {samplesPerFrameToProcessPerPoint}, BufferSizeInFloats: {bufferSizeInSamples}");

                for (int i = 0; i < targetPoints; i++)
                {
                    float maxPeakInChunk = 0f;

                    samplesReadFromAudioFile = reader.Read(buffer, 0, buffer.Length);

                    if (samplesReadFromAudioFile == 0)
                    {
                        Debug.WriteLine($"[WaveformServiceReader] Read 0 samples at waveform point index {i} (target: {targetPoints}) for \"{Path.GetFileName(filePath)}\". End of audio stream reached.");
                        break;
                    }

                    for (int n = 0; n < samplesReadFromAudioFile; n++)
                    {
                        maxPeakInChunk = Math.Max(maxPeakInChunk, Math.Abs(buffer[n]));
                    }

                    points.Add(new WaveformPoint(currentX, maxPeakInChunk));
                    pointsGeneratedCount++;

                    if (i < 5 || (i > 0 && i % (targetPoints / 10) == 0) || i == targetPoints - 1)
                    {
                        Debug.WriteLine($"[WaveformServiceReader] Point {i}: X={currentX:F3}, Calculated YPeak={maxPeakInChunk:F4}, SamplesInThisChunk={samplesReadFromAudioFile}");
                    }

                    currentX += xIncrement;
                    if (currentX > 1.0) currentX = 1.0;
                }
                Debug.WriteLine($"[WaveformServiceReader] Loop finished for \"{Path.GetFileName(filePath)}\". Total waveform points generated: {pointsGeneratedCount}. (Target was {targetPoints})");
            });

            if (points.Any())
            {
                _waveformCache[filePath] = points;
                Debug.WriteLine($"[WaveformService] Waveform generated and cached for \"{Path.GetFileName(filePath)}\", {points.Count} points. First point YPeak: {points[0].YPeak:F4}. Approx mid point YPeak: {points[points.Count / 2].YPeak:F4}. Last point YPeak: {points.Last().YPeak:F4}");
            }
            else
            {
                Debug.WriteLine($"[WaveformService] No points generated for \"{Path.GetFileName(filePath)}\". It might be too short, silent, or an issue with reading audio data.");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[WaveformService] CRITICAL Error generating waveform for \"{Path.GetFileName(filePath)}\": {ex.ToString()}");
            return [];
        }
        return points;
    }

    public void ClearCache()
    {
        _waveformCache.Clear();
        Debug.WriteLine("[WaveformService] Cache cleared.");
    }
}
</file>

<file path="Source\Utils\AlbumArtistTupleComparer.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Sonorize.Utils;

public class AlbumArtistTupleComparer : IEqualityComparer<(string Album, string Artist)>
{
    public bool Equals((string Album, string Artist) x, (string Album, string Artist) y)
    {
        return string.Equals(x.Album, y.Album, StringComparison.OrdinalIgnoreCase) &&
               string.Equals(x.Artist, y.Artist, StringComparison.OrdinalIgnoreCase);
    }

    public int GetHashCode([DisallowNull] (string Album, string Artist) obj)
    {
        int albumHashCode = obj.Album?.ToLowerInvariant().GetHashCode() ?? 0;
        int artistHashCode = obj.Artist?.ToLowerInvariant().GetHashCode() ?? 0;
        return HashCode.Combine(albumHashCode, artistHashCode);
    }

    public static readonly AlbumArtistTupleComparer Instance = new();
}
</file>

<file path="Source\ViewModels\AlbumViewModel.cs">
using Avalonia.Media.Imaging;
using System.Collections.Generic; // For List
// Removed System.Collections.ObjectModel as List is sufficient here and ViewModelBase handles INPC

namespace Sonorize.ViewModels;

public class AlbumViewModel : ViewModelBase
{
    public string? Title { get; set; }
    public string? Artist { get; set; }
    public List<Bitmap?> SongThumbnailsForGrid
    {
        get;
        // Setter might be used by LibraryVM during initialization
        set => SetProperty(ref field, value);
    } = new List<Bitmap?>(new Bitmap?[4]);

    public Bitmap? RepresentativeThumbnail
    {
        get;
        set => SetProperty(ref field, value);
    }

    public string DisplayText => $"{Title} - {Artist}";
}
</file>

<file path="Source\ViewModels\ArtistViewModel.cs">
using Avalonia.Media.Imaging;

namespace Sonorize.ViewModels;

public class ArtistViewModel : ViewModelBase // Inherit from ViewModelBase
{
    public string? Name { get; set; } // Name can remain simple if not changed after creation

    private Bitmap? _thumbnail;
    public Bitmap? Thumbnail
    {
        get => _thumbnail;
        set => SetProperty(ref _thumbnail, value); // Use SetProperty for INotifyPropertyChanged
    }
    // You could add more properties later, like SongCount or AlbumCount
}
</file>

<file path="Source\ViewModels\LibraryViewModel.cs">
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.ViewModels.LibraryManagement;

namespace Sonorize.ViewModels;

public class LibraryViewModel : ViewModelBase
{
    private readonly SettingsService _settingsService;
    private readonly MusicLibraryService _musicLibraryService;
    private readonly LoopDataService _loopDataService;
    private readonly MainWindowViewModel _parentViewModel;
    private readonly ArtistAlbumCollectionManager _artistAlbumManager;
    private readonly SongFilteringService _songFilteringService;
    private readonly LibraryStatusTextGenerator _statusTextGenerator;
    private readonly LibraryDataOrchestrator _libraryDataOrchestrator;
    private readonly TrackNavigationManager _trackNavigationManager; // Added manager

    private readonly ObservableCollection<Song> _allSongs = [];

    public ObservableCollection<Song> FilteredSongs { get; } = [];
    public ObservableCollection<ArtistViewModel> Artists { get; } = [];
    public ObservableCollection<AlbumViewModel> Albums { get; } = [];

    public ICommand SetDisplayModeCommand { get; }
    // Navigation commands are now exposed from TrackNavigationManager
    public ICommand PreviousTrackCommand => _trackNavigationManager.PreviousTrackCommand;
    public ICommand NextTrackCommand => _trackNavigationManager.NextTrackCommand;

    public string SearchQuery
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }
            ApplyFilter();
        }
    } = string.Empty;

    public Song? SelectedSong
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
                // Navigation command CanExecute is now handled by TrackNavigationManager
            }

            Debug.WriteLine($"[LibraryVM] SelectedSong changed to: {value?.Title ?? "null"}");
            _trackNavigationManager.UpdateSelectedSong(value); // Inform the manager
        }
    }

    public ArtistViewModel? SelectedArtist
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            if (value != null)
            {
                OnArtistSelected(value);
            }
            else
            {
                ApplyFilter();
            }
        }
    }

    public AlbumViewModel? SelectedAlbum
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            if (value != null)
            {
                OnAlbumSelected(value);
            }
            else
            {
                ApplyFilter();
            }
        }
    }

    public bool IsLoadingLibrary
    {
        get;

        private set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            RaiseLibraryCommandsCanExecuteChanged();
        }
    } = false;

    public string LibraryStatusText
    {
        get => _libraryStatusText;
        private set => SetProperty(ref _libraryStatusText, value);
    }
    private string _libraryStatusText = "";


    public SongDisplayMode LibraryViewMode
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            AppSettings settings = _settingsService.LoadSettings();
            settings.LibraryViewModePreference = value.ToString();
            _settingsService.SaveSettings(settings);
        }
    }

    public SongDisplayMode ArtistViewMode
    {
        get;
        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            AppSettings settings = _settingsService.LoadSettings();
            settings.ArtistViewModePreference = value.ToString();
            _settingsService.SaveSettings(settings);
        }
    }

    public SongDisplayMode AlbumViewMode
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }

            AppSettings settings = _settingsService.LoadSettings();
            settings.AlbumViewModePreference = value.ToString();
            _settingsService.SaveSettings(settings);
        }
    }

    public LibraryViewModel(MainWindowViewModel parentViewModel, SettingsService settingsService, MusicLibraryService musicLibraryService, LoopDataService loopDataService)
    {
        _parentViewModel = parentViewModel ?? throw new ArgumentNullException(nameof(parentViewModel));
        _settingsService = settingsService;
        _musicLibraryService = musicLibraryService;
        _loopDataService = loopDataService;

        FilteredSongs = new ObservableCollection<Song>(); // Ensure it's initialized before passing
        _trackNavigationManager = new TrackNavigationManager(FilteredSongs);
        // If TrackNavigationManager needs to change LibraryViewModel.SelectedSong, subscribe to an event from it:
        // _trackNavigationManager.ManagedSelectionChanged += (newSelection) => SelectedSong = newSelection;


        _artistAlbumManager = new ArtistAlbumCollectionManager(Artists, Albums, _musicLibraryService);
        _songFilteringService = new SongFilteringService();
        _statusTextGenerator = new LibraryStatusTextGenerator();
        _libraryDataOrchestrator = new LibraryDataOrchestrator(_musicLibraryService, _artistAlbumManager, _settingsService);

        _musicLibraryService.SongThumbnailUpdated += MusicLibraryService_SongThumbnailUpdated;

        AppSettings appSettings = _settingsService.LoadSettings();

        LibraryViewMode = Enum.TryParse<SongDisplayMode>(appSettings.LibraryViewModePreference, out var libMode)
            ? libMode
            : SongDisplayMode.Detailed;

        ArtistViewMode = Enum.TryParse<SongDisplayMode>(appSettings.ArtistViewModePreference, out var artMode)
            ? artMode
            : SongDisplayMode.Detailed;

        AlbumViewMode = Enum.TryParse<SongDisplayMode>(appSettings.AlbumViewModePreference, out var albMode)
            ? albMode
            : SongDisplayMode.Detailed;


        SetDisplayModeCommand = new RelayCommand(
            param =>
            {
                if (param is not (string targetView, SongDisplayMode mode))
                {
                    return;
                }

                switch (targetView)
                {
                    case "Library": LibraryViewMode = mode; break;
                    case "Artists": ArtistViewMode = mode; break;
                    case "Albums": AlbumViewMode = mode; break;
                }
            },
            _ => true
        );

        // Previous/Next track commands are now handled by _trackNavigationManager
        // FilteredSongs.CollectionChanged still needs to inform TrackNavigationManager
        // This is handled inside TrackNavigationManager's constructor.

        UpdateStatusBarText();
    }

    private async void MusicLibraryService_SongThumbnailUpdated(Song updatedSong)
    {
        await Dispatcher.UIThread.InvokeAsync(() =>
        {
            _artistAlbumManager.UpdateCollectionsForSongThumbnail(updatedSong, _allSongs);
            OnPropertyChanged(nameof(Artists));
            OnPropertyChanged(nameof(Albums));
        });
    }

    public async Task LoadLibraryAsync()
    {
        if (IsLoadingLibrary)
        {
            return;
        }

        IsLoadingLibrary = true;
        SearchQuery = string.Empty;
        SelectedArtist = null;
        SelectedAlbum = null;
        // SelectedSong will be set to null as part of ApplyFilter if it's no longer in the filtered list,
        // or explicitly set to null here if we want to ensure it's cleared before loading.
        SelectedSong = null; // Explicitly clear selection before load

        await Dispatcher.UIThread.InvokeAsync(() => {
            // SelectedSong already cleared
            _allSongs.Clear();
            FilteredSongs.Clear(); // TrackNavigationManager will see this change
            Artists.Clear();
            Albums.Clear();
            LibraryStatusText = "Preparing to load music...";
        });

        Action<Song> songAddedCallback = song => _allSongs.Add(song);
        Action<string> statusUpdateCallback = status => LibraryStatusText = status;

        await _libraryDataOrchestrator.LoadAndProcessLibraryDataAsync(statusUpdateCallback, songAddedCallback);

        await Dispatcher.UIThread.InvokeAsync(() => {
            OnPropertyChanged(nameof(Artists));
            OnPropertyChanged(nameof(Albums));
            ApplyFilter();
        });

        IsLoadingLibrary = false;
        UpdateStatusBarText();
    }

    private void OnArtistSelected(ArtistViewModel artist)
    {
        if (artist?.Name is null)
        {
            return;
        }

        Debug.WriteLine($"[LibraryVM] Artist selected: {artist.Name}");

        SelectedAlbum = null;
        OnPropertyChanged(nameof(SelectedAlbum));
        SearchQuery = artist.Name;

        _parentViewModel.ActiveTabIndex = 0;
    }

    private void OnAlbumSelected(AlbumViewModel album)
    {
        if (album?.Title == null || album.Artist == null)
        {
            return;
        }

        Debug.WriteLine($"[LibraryVM] Album selected: {album.Title} by {album.Artist}");

        SelectedArtist = null;
        OnPropertyChanged(nameof(SelectedArtist));
        SearchQuery = album.Title;

        _parentViewModel.ActiveTabIndex = 0;
    }

    private void ApplyFilter()
    {
        var currentSelectedSongBeforeFilter = SelectedSong; // Preserve current selection

        FilteredSongs.Clear(); // This will notify TrackNavigationManager
        var filtered = _songFilteringService.ApplyFilter(_allSongs, SearchQuery, SelectedArtist, SelectedAlbum);
        foreach (var song in filtered)
        {
            FilteredSongs.Add(song); // This will notify TrackNavigationManager
        }

        // Restore selection if still valid, or clear it
        if (currentSelectedSongBeforeFilter != null && FilteredSongs.Contains(currentSelectedSongBeforeFilter))
        {
            // If the setter for SelectedSong doesn't re-notify _trackNavigationManager when value is the same,
            // we might need to manually ensure _trackNavigationManager is synced.
            // However, our current SelectedSong setter will re-notify if `value` is different from `_selectedSong`.
            // If `_selectedSong` was already `currentSelectedSongBeforeFilter`, no notification happens.
            // So, we need to explicitly update the manager if the song instance is the same but list context changed.
            SelectedSong = currentSelectedSongBeforeFilter; // Ensure TrackNavigationManager is aware
        }
        else if (currentSelectedSongBeforeFilter != null) // Was selected, but no longer in list
        {
            Debug.WriteLine($"[LibraryVM] Selected song '{currentSelectedSongBeforeFilter.Title}' is no longer in the filtered list. Clearing selection.");
            SelectedSong = null;
        }
        else // Was not selected, or selection was cleared
        {
            // Ensure TrackNavigationManager knows selection is null if it wasn't already
            if (SelectedSong != null) SelectedSong = null;
            else _trackNavigationManager.UpdateSelectedSong(null);
        }
        UpdateStatusBarText();
    }

    public void UpdateStatusBarText()
    {
        if (!IsLoadingLibrary)
        {
            LibraryStatusText = _statusTextGenerator.GenerateStatusText(
                IsLoadingLibrary,
                _allSongs.Count,
                FilteredSongs.Count,
                SelectedArtist,
                SelectedAlbum,
                SearchQuery,
                _settingsService
            );
        }
    }


    public void RaiseLibraryCommandsCanExecuteChanged()
    {
        (SetDisplayModeCommand as RelayCommand)?.RaiseCanExecuteChanged();
        // Navigation commands are handled by TrackNavigationManager
    }

    // This method is no longer strictly needed here if TrackNavigationManager handles its own commands
    // public void RaiseNavigationCommandsCanExecuteChanged()
    // {
    //     _trackNavigationManager.RaiseCanExecuteChangedForAllCommands();
    // }

    public void Dispose()
    {
        if (_musicLibraryService != null)
        {
            _musicLibraryService.SongThumbnailUpdated -= MusicLibraryService_SongThumbnailUpdated;
        }
        // If TrackNavigationManager subscribed to events or needs disposal, handle here
        // e.g., _trackNavigationManager.Dispose(); (if it implements IDisposable)
    }
}
</file>

<file path="Source\ViewModels\LoopEditorViewModel.cs">
using Sonorize.Models;
using Sonorize.Services;
using System;
using System.Diagnostics;
using System.Windows.Input;
using Avalonia.Threading; // Required for Dispatcher

namespace Sonorize.ViewModels;

public class LoopEditorViewModel : ViewModelBase
{
    private readonly PlaybackService _playbackService;
    private readonly LoopDataService _loopDataService;
    private Song? _currentSongInternal; // Holds the Song instance from PlaybackService.CurrentSong

    public TimeSpan? NewLoopStartCandidate
    {
        get;
        set { SetProperty(ref field, value); OnPropertyChanged(nameof(CanSaveLoopRegion)); OnPropertyChanged(nameof(NewLoopStartCandidateDisplay)); }
    }

    public TimeSpan? NewLoopEndCandidate
    {
        get;
        set { SetProperty(ref field, value); OnPropertyChanged(nameof(CanSaveLoopRegion)); OnPropertyChanged(nameof(NewLoopEndCandidateDisplay)); }
    }

    public string NewLoopStartCandidateDisplay => NewLoopStartCandidate.HasValue ? $"{NewLoopStartCandidate.Value:mm\\:ss\\.ff}" : "Not set";
    public string NewLoopEndCandidateDisplay => NewLoopEndCandidate.HasValue ? $"{NewLoopEndCandidate.Value:mm\\:ss\\.ff}" : "Not set";

    private string _activeLoopDisplayText = "No loop defined.";
    public string ActiveLoopDisplayText { get => _activeLoopDisplayText; set => SetProperty(ref _activeLoopDisplayText, value); }

    private bool _isCurrentLoopActiveUiBinding;
    public bool IsCurrentLoopActiveUiBinding
    {
        get => _isCurrentLoopActiveUiBinding;
        set
        {
            // Only set if different to avoid unnecessary property changed events and potential recursion
            if (SetProperty(ref _isCurrentLoopActiveUiBinding, value))
            {
                if (_currentSongInternal != null && _currentSongInternal.SavedLoop != null)
                {
                    // Update the underlying model property. The model's PropertyChanged handler
                    // will trigger persistence logic in the main VM or here if needed.
                    _currentSongInternal.IsLoopActive = value;
                    Debug.WriteLine($"[LoopEdVM] UI binding set IsLoopActive on Song '{_currentSongInternal.Title}' to: {value}");
                }
                else if (_currentSongInternal != null && _currentSongInternal.SavedLoop == null && value == true)
                {
                    // Prevent activating loop if none is defined, revert UI state
                    _isCurrentLoopActiveUiBinding = false;
                    OnPropertyChanged(nameof(IsCurrentLoopActiveUiBinding)); // Notify UI to revert
                    Debug.WriteLine($"[LoopEdVM] Attempted to activate loop via UI, but no loop is defined for {_currentSongInternal.Title}.");
                }
                // If _currentSongInternal is null, setting _isCurrentLoopActiveUiBinding to false is handled by UpdateStateForCurrentSong(null)
            }
        }
    }


    public bool CanSaveLoopRegion => _currentSongInternal != null
                                     && NewLoopStartCandidate.HasValue
                                     && NewLoopEndCandidate.HasValue
                                     && NewLoopEndCandidate.Value > NewLoopStartCandidate.Value
                                     && _currentSongInternal.Duration.TotalSeconds > 0 // Need duration for comparison
                                     && NewLoopEndCandidate.Value <= _currentSongInternal.Duration
                                     && NewLoopStartCandidate.Value >= TimeSpan.Zero;

    public ICommand CaptureLoopStartCandidateCommand { get; }
    public ICommand CaptureLoopEndCandidateCommand { get; }
    public ICommand SaveLoopCommand { get; }
    public ICommand ClearLoopCommand { get; }
    public ICommand ToggleLoopActiveCommand { get; }
    public ICommand WaveformSeekCommand { get; }


    public LoopEditorViewModel(PlaybackService playbackService, LoopDataService loopDataService)
    {
        _playbackService = playbackService;
        _loopDataService = loopDataService;

        CaptureLoopStartCandidateCommand = new RelayCommand(
            _ => NewLoopStartCandidate = _playbackService.CurrentPosition,
            _ => _currentSongInternal != null && _playbackService.CurrentPlaybackStatus != PlaybackStateStatus.Stopped);

        CaptureLoopEndCandidateCommand = new RelayCommand(
            _ => NewLoopEndCandidate = _playbackService.CurrentPosition,
            _ => _currentSongInternal != null && _playbackService.CurrentPlaybackStatus != PlaybackStateStatus.Stopped);

        SaveLoopCommand = new RelayCommand(SaveLoopAction, _ => CanSaveLoopRegion);

        ClearLoopCommand = new RelayCommand(ClearSavedLoopAction, _ => _currentSongInternal?.SavedLoop != null);

        ToggleLoopActiveCommand = new RelayCommand(ToggleCurrentSongLoopActive, _ => _currentSongInternal?.SavedLoop != null);

        // WaveformSeekCommand is needed here as it interacts directly with the playback position based on a UI event
        WaveformSeekCommand = new RelayCommand(
            timeSpanObj => { if (timeSpanObj is TimeSpan ts && _currentSongInternal != null) _playbackService.Seek(ts); },
            _ => _currentSongInternal != null);


        // Listen to PlaybackService property changes relevant to loop editing state
        _playbackService.PropertyChanged += PlaybackService_PropertyChanged;

        // Initial state update
        UpdateStateForCurrentSong(_playbackService.CurrentSong);
    }

    private void PlaybackService_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            switch (e.PropertyName)
            {
                case nameof(PlaybackService.CurrentSong):
                    Debug.WriteLine($"[LoopEdVM] PlaybackService.CurrentSong changed to: {_playbackService.CurrentSong?.Title ?? "null"}. Updating loop state.");
                    // Remove handler from old song
                    if (_currentSongInternal != null)
                    {
                        _currentSongInternal.PropertyChanged -= CurrentSong_PropertyChanged;
                    }
                    // Update internal song reference
                    _currentSongInternal = _playbackService.CurrentSong;
                    // Add handler to new song if not null
                    if (_currentSongInternal != null)
                    {
                        _currentSongInternal.PropertyChanged += CurrentSong_PropertyChanged;
                    }
                    UpdateStateForCurrentSong(_currentSongInternal);
                    break;
                case nameof(PlaybackService.CurrentPosition):
                case nameof(PlaybackService.CurrentSongDuration):
                    // These affect CanSaveLoopRegion and command CanExecute states
                    OnPropertyChanged(nameof(CanSaveLoopRegion));
                    RaiseLoopCommandCanExecuteChanged();
                    // Also need to update loop display text if CurrentSong or its Loop property isn't triggering it
                    UpdateActiveLoopDisplayText(); // Ensure text reflects active loop status
                    break;
                case nameof(PlaybackService.CurrentPlaybackStatus):
                    // Affects Capture command CanExecute
                    RaiseLoopCommandCanExecuteChanged();
                    break;
            }
        });
    }

    private void CurrentSong_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            // Listen for changes on the *Song model itself* relevant to loop state
            if (sender is Song song && song == _currentSongInternal)
            {
                switch (e.PropertyName)
                {
                    case nameof(Song.SavedLoop):
                        Debug.WriteLine($"[LoopEdVM] CurrentSong.SavedLoop changed for {song.Title}. Updating loop state.");
                        UpdateStateForCurrentSong(song); // Fully refresh state based on the new loop
                        break;
                    case nameof(Song.IsLoopActive):
                        Debug.WriteLine($"[LoopEdVM] CurrentSong.IsLoopActive changed to {song.IsLoopActive} for {song.Title}. Updating UI binding and persisting.");
                        // Update the UI binding property if it's out of sync
                        if (_isCurrentLoopActiveUiBinding != song.IsLoopActive)
                        {
                            _isCurrentLoopActiveUiBinding = song.IsLoopActive;
                            OnPropertyChanged(nameof(IsCurrentLoopActiveUiBinding));
                        }
                        // Persist the active state change
                        if (song.SavedLoop != null)
                        {
                            _loopDataService.UpdateLoopActiveState(song.FilePath, song.IsLoopActive);
                        }
                        UpdateActiveLoopDisplayText(); // Update the display text
                        break;
                        // Add other relevant song properties if they affect loop state UI
                }
            }
        });
    }

    private void UpdateStateForCurrentSong(Song? song)
    {
        // This method syncs the LoopEditorViewModel's state with the current song's state
        Debug.WriteLine($"[LoopEdVM] UpdateStateForCurrentSong called for: {song?.Title ?? "null"}");
        if (song?.SavedLoop != null)
        {
            NewLoopStartCandidate = song.SavedLoop.Start;
            NewLoopEndCandidate = song.SavedLoop.End;
            IsCurrentLoopActiveUiBinding = song.IsLoopActive; // Sync UI binding
        }
        else
        {
            NewLoopStartCandidate = null;
            NewLoopEndCandidate = null;
            IsCurrentLoopActiveUiBinding = false; // Ensure binding is false when no loop
        }
        UpdateActiveLoopDisplayText();
        OnPropertyChanged(nameof(CanSaveLoopRegion));
        RaiseLoopCommandCanExecuteChanged();
    }

    private void ClearLoopCandidateInputs()
    {
        NewLoopStartCandidate = null;
        NewLoopEndCandidate = null;
        Debug.WriteLine("[LoopEdVM] Loop candidates cleared.");
    }

    private void SaveLoopAction(object? param)
    {
        var currentSong = _currentSongInternal;
        if (!CanSaveLoopRegion || currentSong == null || !NewLoopStartCandidate.HasValue || !NewLoopEndCandidate.HasValue)
        {
            Debug.WriteLine("[LoopEdVM] SaveLoopAction skipped: conditions not met.");
            return;
        }

        var newLoop = new LoopRegion(NewLoopStartCandidate.Value, NewLoopEndCandidate.Value, "User Loop");

        // Determine the desired active state for the new loop:
        // - If there was a loop before and it was active, the new one should also be active.
        // - If there was no loop before, setting a new one implies it should be active.
        // - If there was a loop before and it was *in*active, keep the new one inactive initially.
        bool shouldBeActive = (currentSong.SavedLoop != null && currentSong.IsLoopActive) || currentSong.SavedLoop == null;

        currentSong.SavedLoop = newLoop; // This might trigger Song's PropertyChanged -> LoopEditorViewModel.CurrentSong_PropertyChanged -> UpdateStateForCurrentSong

        // Set IsLoopActive *after* setting SavedLoop to potentially trigger the right logic flow
        // If the desired state is different from the current Song.IsLoopActive, set it.
        // If it's the same, explicitly trigger the persistence call as the Song.IsLoopActive setter might not fire PropertyChanged
        if (currentSong.IsLoopActive != shouldBeActive)
        {
            currentSong.IsLoopActive = shouldBeActive; // This should trigger persistence via CurrentSong_PropertyChanged
        }
        else
        {
            // State is the same, manually trigger persistence
            _loopDataService.SetLoop(currentSong.FilePath, newLoop.Start, newLoop.End, currentSong.IsLoopActive);
        }

        Debug.WriteLine($"[LoopEdVM] Loop saved for {currentSong.Title}. Start: {newLoop.Start}, End: {newLoop.End}, Active: {currentSong.IsLoopActive}");

        // Update UI state might be redundant if triggered by CurrentSong_PropertyChanged, but safe
        UpdateStateForCurrentSong(currentSong);
    }


    private void ClearSavedLoopAction(object? param)
    {
        var currentSong = _currentSongInternal;
        if (currentSong != null)
        {
            var filePath = currentSong.FilePath;
            Debug.WriteLine($"[LoopEdVM] Clearing loop for {currentSong.Title}.");
            currentSong.SavedLoop = null; // This might trigger Song's PropertyChanged
            currentSong.IsLoopActive = false; // This might trigger Song's PropertyChanged
            if (!string.IsNullOrEmpty(filePath))
            {
                _loopDataService.ClearLoop(filePath);
            }
        }
        ClearLoopCandidateInputs();
        UpdateStateForCurrentSong(currentSong); // Ensure UI syncs after clearing
    }

    private void ToggleCurrentSongLoopActive(object? parameter)
    {
        if (_currentSongInternal != null && _currentSongInternal.SavedLoop != null)
        {
            Debug.WriteLine($"[LoopEdVM] Toggling loop active state for {_currentSongInternal.Title}. Current: {_currentSongInternal.IsLoopActive}");
            // Toggling IsCurrentLoopActiveUiBinding will flow back through its setter
            IsCurrentLoopActiveUiBinding = !_isCurrentLoopActiveUiBinding;
        }
    }

    private void UpdateActiveLoopDisplayText()
    {
        var currentSong = _currentSongInternal;
        if (currentSong?.SavedLoop != null)
        {
            var loop = currentSong.SavedLoop;
            string activeStatus = currentSong.IsLoopActive ? " (Active)" : " (Inactive)";
            ActiveLoopDisplayText = $"Loop: {loop.Start:mm\\:ss\\.f} - {loop.End:mm\\:ss\\.f}{activeStatus}";
        }
        else
        {
            ActiveLoopDisplayText = "No loop defined.";
        }
    }

    public void RaiseLoopCommandCanExecuteChanged()
    {
        (CaptureLoopStartCandidateCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (CaptureLoopEndCandidateCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (SaveLoopCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ClearLoopCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ToggleLoopActiveCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (WaveformSeekCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }
}
</file>

<file path="Source\ViewModels\MainWindowViewModel.cs">
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO; // Required for Path.GetFullPath, Directory.Exists
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;

namespace Sonorize.ViewModels;

public class MainWindowViewModel : ViewModelBase
{
    private readonly SettingsService _settingsService;
    private readonly MusicLibraryService _musicLibraryService;
    private readonly WaveformService _waveformService;
    private readonly LoopDataService _loopDataService;
    private readonly ScrobblingService _scrobblingService;
    private readonly NextTrackSelectorService _nextTrackSelectorService;

    // Expose the Services directly for child VMs or public properties
    public PlaybackService PlaybackService { get; }
    public ThemeColors CurrentTheme { get; }

    // Expose the child ViewModels
    public LibraryViewModel Library { get; set; }
    public LoopEditorViewModel LoopEditor { get; }
    public PlaybackViewModel Playback { get; }
    public string StatusBarText { get => field; set => SetProperty(ref field, value); } = "Welcome to Sonorize!";

    // Property to control the selected tab index in the main TabControl
    public int ActiveTabIndex { get => field; set => SetProperty(ref field, value); } = 0;


    // IsLoadingLibrary is a proxy to Library's state
    public bool IsLoadingLibrary { get => Library.IsLoadingLibrary; }

    public bool IsAdvancedPanelVisible { get => field; set { if (SetProperty(ref field, value)) OnAdvancedPanelVisibleChanged(); } }

    // Top-level commands
    public ICommand LoadInitialDataCommand { get; }
    public ICommand OpenSettingsCommand { get; }
    public ICommand ExitCommand { get; }
    public ICommand AddDirectoryAndRefreshCommand { get; }
    public ICommand ToggleAdvancedPanelCommand { get; }

    private readonly Random _shuffleRandom = new();

    public MainWindowViewModel(
        SettingsService settingsService,
        MusicLibraryService musicLibraryService,
        PlaybackService playbackService,
        ThemeColors theme,
        WaveformService waveformService,
        LoopDataService loopDataService,
        ScrobblingService scrobblingService)
    {
        _settingsService = settingsService;
        _musicLibraryService = musicLibraryService;
        PlaybackService = playbackService;
        CurrentTheme = theme;
        _waveformService = waveformService;
        _loopDataService = loopDataService;
        _scrobblingService = scrobblingService;
        _nextTrackSelectorService = new NextTrackSelectorService(_shuffleRandom);

        Library = new LibraryViewModel(this, _settingsService, _musicLibraryService, _loopDataService);
        Playback = new PlaybackViewModel(PlaybackService, _waveformService);
        LoopEditor = new LoopEditorViewModel(PlaybackService, _loopDataService);


        Library.PropertyChanged += Library_PropertyChanged;
        Playback.PropertyChanged += Playback_PropertyChanged;

        PlaybackService.PlaybackEndedNaturally += PlaybackService_PlaybackEndedNaturally;

        LoadInitialDataCommand = new RelayCommand(async _ => await Library.LoadLibraryAsync(), _ => !Library.IsLoadingLibrary);
        OpenSettingsCommand = new RelayCommand(async owner => await OpenSettingsDialog(owner), _ => !Library.IsLoadingLibrary);
        ExitCommand = new RelayCommand(_ => Environment.Exit(0));
        AddDirectoryAndRefreshCommand = new RelayCommand(async owner => await AddMusicDirectoryAndRefresh(owner), _ => !Library.IsLoadingLibrary);

        ToggleAdvancedPanelCommand = new RelayCommand(
            _ => IsAdvancedPanelVisible = !IsAdvancedPanelVisible,
            _ => Playback.HasCurrentSong && !Library.IsLoadingLibrary);


        UpdateAllUIDependentStates();
    }

    private void PlaybackService_PlaybackEndedNaturally(object? sender, EventArgs e)
    {
        Debug.WriteLine("[MainVM] PlaybackService_PlaybackEndedNaturally event received.");

        var currentSong = Library.SelectedSong;
        var currentList = Library.FilteredSongs.ToList();
        var repeatMode = Playback.RepeatMode;
        var shuffleEnabled = Playback.ShuffleEnabled;

        Song? nextSong = _nextTrackSelectorService.GetNextSong(currentSong, currentList, repeatMode, shuffleEnabled);

        if (nextSong != null)
        {
            Debug.WriteLine($"[MainVM] Next song determined by NextTrackSelectorService: {nextSong.Title}. Setting Library.SelectedSong.");
            Library.SelectedSong = nextSong;
        }
        else
        {
            Debug.WriteLine("[MainVM] No next song determined by NextTrackSelectorService. Calling PlaybackService.Stop().");
            PlaybackService.Stop();
        }

        Debug.WriteLine("[MainVM] PlaybackService_PlaybackEndedNaturally handler completed.");
    }

    private void Library_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            switch (e.PropertyName)
            {
                case nameof(Library.SelectedSong):
                    Debug.WriteLine($"[MainVM_LibChanged] Library.SelectedSong changed to: {Library.SelectedSong?.Title ?? "null"}. Instance: {Library.SelectedSong?.GetHashCode() ?? 0}");

                    if (Library.SelectedSong != null && PlaybackService.CurrentSong != Library.SelectedSong)
                    {
                        Debug.WriteLine($"[MainVM_LibChanged] Library.SelectedSong changed to a *different* song ({Library.SelectedSong.Title}) than PlaybackService.CurrentSong ({PlaybackService.CurrentSong?.Title ?? "null"}). Calling PlaybackService.Play().");
                        PlaybackService.Play(Library.SelectedSong);
                    }
                    else if (Library.SelectedSong != null && PlaybackService.CurrentSong == Library.SelectedSong)
                    {
                        Debug.WriteLine($"[MainVM_LibChanged] Library.SelectedSong changed but is the SAME song instance as PlaybackService.CurrentSong ({Library.SelectedSong.Title}). Assuming RepeatOne handled it or user re-clicked already playing song. No Play call needed here.");
                    }
                    else if (Library.SelectedSong == null)
                    {
                        Debug.WriteLine("[MainVM_LibChanged] Library.SelectedSong is null. No Play call needed here. PlaybackService.Stop might have been called.");
                    }

                    RaiseAllCommandsCanExecuteChanged(); // Still relevant for commands MainWindowViewModel owns.
                    break;
                case nameof(Library.IsLoadingLibrary):
                    OnPropertyChanged(nameof(IsLoadingLibrary));
                    RaiseAllCommandsCanExecuteChanged();
                    UpdateStatusBarText();
                    break;
                case nameof(Library.LibraryStatusText):
                    UpdateStatusBarText();
                    break;
            }
        });
    }

    private void Playback_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            switch (e.PropertyName)
            {
                case nameof(PlaybackViewModel.CurrentSong):
                    OnPropertyChanged(nameof(Playback.CurrentSong));
                    OnPropertyChanged(nameof(Playback.HasCurrentSong));
                    RaiseAllCommandsCanExecuteChanged();

                    if (!Playback.HasCurrentSong && Library.SelectedSong != null)
                    {
                        Debug.WriteLine("[MainVM_PlaybackChanged] PlaybackService has no current song. Clearing Library selection.");
                        Library.SelectedSong = null;
                    }

                    if (Playback.CurrentSong != null && IsAdvancedPanelVisible)
                    {
                        Debug.WriteLine("[MainVM_PlaybackChanged] Playback has current song, advanced panel is visible. Requesting waveform load.");
                        _ = Playback.LoadWaveformForCurrentSongAsync();
                    }

                    UpdateStatusBarText();
                    OnPropertyChanged(nameof(Playback.CurrentTimeDisplay));
                    OnPropertyChanged(nameof(Playback.TotalTimeDisplay));
                    RaiseAllCommandsCanExecuteChanged();

                    break;
                case nameof(PlaybackViewModel.CurrentPlaybackStatus):
                    OnPropertyChanged(nameof(Playback.CurrentPlaybackStatus));
                    OnPropertyChanged(nameof(Playback.IsPlaying));
                    UpdateStatusBarText();
                    RaiseAllCommandsCanExecuteChanged();
                    break;
                case nameof(PlaybackViewModel.CurrentPosition):
                    OnPropertyChanged(nameof(Playback.CurrentPosition));
                    OnPropertyChanged(nameof(Playback.CurrentPositionSeconds));
                    OnPropertyChanged(nameof(Playback.CurrentTimeDisplay));
                    break;
                case nameof(PlaybackViewModel.CurrentSongDuration):
                    OnPropertyChanged(nameof(Playback.CurrentSongDuration));
                    OnPropertyChanged(nameof(Playback.CurrentSongDurationSeconds));
                    OnPropertyChanged(nameof(Playback.TotalTimeDisplay));
                    RaiseAllCommandsCanExecuteChanged();
                    break;
                case nameof(PlaybackViewModel.IsWaveformLoading):
                    OnPropertyChanged(nameof(Playback.IsWaveformLoading));
                    break;
                case nameof(PlaybackViewModel.WaveformRenderData):
                    OnPropertyChanged(nameof(Playback.WaveformRenderData));
                    break;
                case nameof(PlaybackViewModel.ShuffleEnabled):
                case nameof(PlaybackViewModel.RepeatMode):
                    Playback.RaisePlaybackCommandCanExecuteChanged();
                    UpdateStatusBarText();
                    break;
            }
        });
    }

    private void OnAdvancedPanelVisibleChanged()
    {
        (ToggleAdvancedPanelCommand as RelayCommand)?.RaiseCanExecuteChanged();
        if (IsAdvancedPanelVisible && Playback.HasCurrentSong && !Playback.WaveformRenderData.Any() && !Playback.IsWaveformLoading)
        {
            Debug.WriteLine("[MainVM] Advanced Panel visible, song is playing, waveform not loaded/loading. Requesting waveform load.");
            _ = Playback.LoadWaveformForCurrentSongAsync();
        }
    }

    private void UpdateAllUIDependentStates()
    {
        OnPropertyChanged(nameof(IsLoadingLibrary));
        OnPropertyChanged(nameof(Playback.CurrentSong));
        OnPropertyChanged(nameof(Playback.HasCurrentSong));
        OnPropertyChanged(nameof(IsAdvancedPanelVisible));
        OnPropertyChanged(nameof(ActiveTabIndex));

        UpdateStatusBarText();
        RaiseAllCommandsCanExecuteChanged();
    }

    public void RaiseAllCommandsCanExecuteChanged()
    {
        (LoadInitialDataCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (OpenSettingsCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ExitCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (AddDirectoryAndRefreshCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ToggleAdvancedPanelCommand as RelayCommand)?.RaiseCanExecuteChanged();

        Library.RaiseLibraryCommandsCanExecuteChanged(); // For LibraryVM's own commands (e.g., SetDisplayMode)
        // Navigation commands are handled by LibraryViewModel's TrackNavigationManager internally.
        // No longer need: Library.RaiseNavigationCommandsCanExecuteChanged(); 
        Playback.RaisePlaybackCommandCanExecuteChanged();
        LoopEditor.RaiseLoopCommandCanExecuteChanged();
    }


    private void UpdateStatusBarText()
    {
        string status;
        if (Playback.HasCurrentSong)
        {
            string stateStr = Playback.CurrentPlaybackStatus switch { PlaybackStateStatus.Playing => "Playing", PlaybackStateStatus.Paused => "Paused", PlaybackStateStatus.Stopped => "Stopped", _ => "Idle" };
            status = $"{stateStr}: {Playback.CurrentSong?.Title ?? "Unknown Song"}";
            if (LoopEditor.IsCurrentLoopActiveUiBinding && Playback.CurrentSong?.SavedLoop != null)
            {
                status += $" (Loop Active)";
            }

            string modeStatus = "";
            if (Playback.ShuffleEnabled)
            {
                modeStatus += " | Shuffle";
            }
            modeStatus += Playback.RepeatMode switch
            {
                RepeatMode.None => " | Do Nothing",
                RepeatMode.PlayOnce => " | Play Once",
                RepeatMode.RepeatOne => " | Repeat Song",
                RepeatMode.RepeatAll => " | Repeat All",
                _ => ""
            };

            if (!string.IsNullOrEmpty(modeStatus))
            {
                status += modeStatus;
            }
        }
        else
        {
            status = Library.LibraryStatusText;
        }
        StatusBarText = status;
    }

    private async Task LoadMusicLibrary()
    {
        await Library.LoadLibraryAsync();
    }

    private async Task OpenSettingsDialog(object? ownerWindow)
    {
        if (ownerWindow is not Window owner || Library.IsLoadingLibrary) return;
        IsAdvancedPanelVisible = false;

        var currentSettingsBeforeDialog = _settingsService.LoadSettings();
        var settingsVM = new SettingsViewModel(_settingsService);
        var settingsDialog = new Sonorize.Views.SettingsWindow(CurrentTheme) { DataContext = settingsVM };

        await settingsDialog.ShowDialog(owner);

        if (settingsVM.SettingsChanged)
        {
            Debug.WriteLine("[MainVM] Settings changed detected after dialog closed.");
            var newSettingsAfterDialog = _settingsService.LoadSettings();
            bool dirsActuallyChanged = !currentSettingsBeforeDialog.MusicDirectories.SequenceEqual(newSettingsAfterDialog.MusicDirectories);
            bool themeActuallyChanged = currentSettingsBeforeDialog.PreferredThemeFileName != newSettingsAfterDialog.PreferredThemeFileName;
            bool scrobbleSettingsActuallyChanged =
                currentSettingsBeforeDialog.LastfmScrobblingEnabled != newSettingsAfterDialog.LastfmScrobblingEnabled ||
                currentSettingsBeforeDialog.LastfmUsername != newSettingsAfterDialog.LastfmUsername ||
                currentSettingsBeforeDialog.LastfmPassword != newSettingsAfterDialog.LastfmPassword;


            if (dirsActuallyChanged)
            {
                Debug.WriteLine("[MainVM] Music directories changed. Reloading library.");
                await Library.LoadLibraryAsync();
            }

            if (themeActuallyChanged)
            {
                Debug.WriteLine("[MainVM] Theme changed. Restart recommended.");
                StatusBarText = "Theme changed. Please restart Sonorize for the changes to take full effect.";
            }

            if (scrobbleSettingsActuallyChanged)
            {
                Debug.WriteLine("[MainVM] Scrobbling settings changed. Refreshing ScrobblingService.");
                _scrobblingService.RefreshSettings();
                // Optionally, update status bar if scrobbling got enabled/disabled
                if (newSettingsAfterDialog.LastfmScrobblingEnabled && !string.IsNullOrEmpty(newSettingsAfterDialog.LastfmUsername))
                {
                    if (StatusBarText.Contains("restart Sonorize")) {/* Append if needed */} else StatusBarText = "Scrobbling enabled.";
                }
                else if (!newSettingsAfterDialog.LastfmScrobblingEnabled && currentSettingsBeforeDialog.LastfmScrobblingEnabled)
                {
                    if (StatusBarText.Contains("restart Sonorize")) {/* Append if needed */} else StatusBarText = "Scrobbling disabled.";
                }
            }

            if (!themeActuallyChanged && !dirsActuallyChanged && !scrobbleSettingsActuallyChanged)
            {
                UpdateStatusBarText();
            }
        }
        else
        {
            Debug.WriteLine("[MainVM] Settings dialog closed, no changes reported by SettingsViewModel.");
            UpdateStatusBarText();
        }
    }

    private async Task AddMusicDirectoryAndRefresh(object? ownerWindow)
    {
        if (ownerWindow is not Window owner || Library.IsLoadingLibrary) return;
        IsAdvancedPanelVisible = false;

        var result = await owner.StorageProvider.OpenFolderPickerAsync(new FolderPickerOpenOptions { Title = "Select Music Directory", AllowMultiple = false });

        if (result != null && result.Count > 0)
        {
            string? folderPath = null;
            try
            {
                folderPath = Path.GetFullPath(result[0].Path.LocalPath);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[MainVM] Error getting full path for selected directory: {ex.Message}");
                StatusBarText = "Error getting path for selected directory.";
                return;
            }

            if (!string.IsNullOrEmpty(folderPath) && Directory.Exists(folderPath))
            {
                var settings = _settingsService.LoadSettings();
                if (!settings.MusicDirectories.Any(d => string.Equals(d, folderPath, StringComparison.OrdinalIgnoreCase)))
                {
                    settings.MusicDirectories.Add(folderPath);
                    _settingsService.SaveSettings(settings);
                    Debug.WriteLine($"[MainVM] Added new directory: {folderPath}. Reloading library.");
                    await Library.LoadLibraryAsync();
                }
                else
                {
                    Debug.WriteLine($"[MainVM] Directory already exists: {folderPath}");
                    StatusBarText = "Directory already in library.";
                }
            }
            else
            {
                Debug.WriteLine($"[MainVM] Selected directory path is invalid or does not exist: {folderPath}");
                StatusBarText = "Invalid directory selected.";
            }
        }
        else
        {
            Debug.WriteLine("[MainVM] Folder picker cancelled or returned no results.");
            UpdateStatusBarText();
        }
    }
}
</file>

<file path="Source\ViewModels\PlaybackViewModel.cs">
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services; // This using directive makes PlaybackStateStatus from the Service available
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;

namespace Sonorize.ViewModels;

public enum RepeatMode { None, PlayOnce, RepeatOne, RepeatAll }

public class PlaybackViewModel : ViewModelBase
{
    public PlaybackService PlaybackService { get; } // Keep reference to the service
    private readonly WaveformService _waveformService; // Need waveform service here

    // Properties related to playback state, directly from service or derived
    // Public getter for PlaybackService.CurrentSong property
    public Song? CurrentSong => PlaybackService.CurrentSong;
    public bool HasCurrentSong => PlaybackService.CurrentSong != null;

    public TimeSpan CurrentPosition => PlaybackService.CurrentPosition;
    public double CurrentPositionSeconds
    {
        get => PlaybackService.CurrentPositionSeconds;
        set
        {
            // Check if the value actually changed and if a song is loaded
            // Use a small tolerance for double comparison
            if (PlaybackService.CurrentSong == null || Math.Abs(PlaybackService.CurrentPositionSeconds - value) <= 0.01)
            {
                return;
                // After PlaybackService.Seek, it will update its CurrentPosition,
                // which will fire PropertyChanged. This ViewModel's PlaybackService_PropertyChanged
                // handler will then update its own properties (including this one's getter value)
                // and notify the UI.
            }
            // Debug.WriteLine($"[PlaybackVM] CurrentPositionSeconds setter called with: {value}. Current PlaybackService PositionSeconds: {PlaybackService.CurrentPositionSeconds}. Seeking.");
            PlaybackService.Seek(TimeSpan.FromSeconds(value));
            // If value is effectively the same, do nothing to prevent potential feedback loops or unnecessary seeks.
            // If no song is loaded, seeking is not possible/meaningful.
        }
    }

    public TimeSpan CurrentSongDuration => PlaybackService.CurrentSongDuration;
    public double CurrentSongDurationSeconds => PlaybackService.CurrentSongDurationSeconds;

    // Use PlaybackStateStatus from Sonorize.Services via the using directive
    public PlaybackStateStatus CurrentPlaybackStatus => PlaybackService.CurrentPlaybackStatus;
    public bool IsPlaying => PlaybackService.IsPlaying;

    // Properties for playback controls (Speed/Pitch)
    private double _playbackSpeed = 1.0;
    public double PlaybackSpeed { get => _playbackSpeed; set { value = Math.Clamp(value, 0.5, 2.0); if (SetProperty(ref _playbackSpeed, value)) { PlaybackService.PlaybackRate = (float)value; OnPropertyChanged(nameof(PlaybackSpeedDisplay)); } } }
    public string PlaybackSpeedDisplay => $"{PlaybackSpeed:F2}x";

    public double PlaybackPitch 
    {
        get; 
        
        set
        {
            value = double.Round(value * 2, MidpointRounding.AwayFromZero) / 2.0;
            value = double.Clamp(value, -4.0, 4.0);

            if (!SetProperty(ref field, value))
            {
                return;
            }

            PlaybackService.PitchSemitones = (float)field;
            OnPropertyChanged(nameof(PlaybackPitchDisplay));
        }
    } = 0.0;

    public string PlaybackPitchDisplay => $"{PlaybackPitch:+0.0;-0.0;0} st";

    public bool ShuffleEnabled
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
                // Saving preference could happen here
            }

            Debug.WriteLine($"[PlaybackVM] ShuffleEnabled set to: {value}");
        }
    } = false;

    public RepeatMode RepeatMode
    {
        get;
        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }
            Debug.WriteLine($"[PlaybackVM] RepeatMode set to: {value}");
            // Saving preference could happen here
            OnPropertyChanged(nameof(IsRepeatOne));
            OnPropertyChanged(nameof(IsRepeatAll));
            OnPropertyChanged(nameof(IsRepeatActive)); // Notify composite state change
        }
    } = RepeatMode.PlayOnce;

    // Helper properties for UI bindings (e.g., RadioButtons or toggling states) - Renamed
    public bool IsRepeatOne { get => RepeatMode == RepeatMode.RepeatOne; set { if (value) RepeatMode = RepeatMode.RepeatOne; } }
    public bool IsRepeatAll { get => RepeatMode == RepeatMode.RepeatAll; set { if (value) RepeatMode = RepeatMode.RepeatAll; } }
    // Helper for the ToggleButton IsChecked state (active if not None)
    public bool IsRepeatActive => RepeatMode != RepeatMode.None;


    // Commands for UI controls for modes
    public ICommand ToggleShuffleCommand { get; }
    // Renamed command to reflect cycling through repeat modes
    public ICommand CycleRepeatModeCommand { get; } // Cycles through None -> PlayOnce -> RepeatOne -> RepeatAll -> None


    // Waveform data
    public ObservableCollection<WaveformPoint> WaveformRenderData { get; } = new();
    private bool _isWaveformLoading = false;
    // Changed setter to private to enforce internal state management
    public bool IsWaveformLoading { get => _isWaveformLoading; private set => SetProperty(ref _isWaveformLoading, value); }

    // Derived properties for UI display (Split time display)
    public string CurrentTimeDisplay
    {
        get
        {
            if (PlaybackService.CurrentSong != null)
            {
                return $"{PlaybackService.CurrentPosition:mm\\:ss}";
            }
            return "--:--";
        }
    }

    public string TotalTimeDisplay
    {
        get
        {
            if (PlaybackService.CurrentSong != null && PlaybackService.CurrentSongDuration.TotalSeconds > 0)
            {
                return $"{PlaybackService.CurrentSongDuration:mm\\:ss}";
            }
            return "--:--";
        }
    }


    // Commands owned by PlaybackViewModel
    public ICommand PlayPauseResumeCommand { get; } // Renamed from simple Click handler
    public ICommand SeekCommand { get; } // Command for slider/waveform seeking


    public PlaybackViewModel(PlaybackService playbackService, WaveformService waveformService)
    {
        PlaybackService = playbackService;
        _waveformService = waveformService;

        // Initialize playback controls (Speed/Pitch)
        PlaybackSpeed = 1.0; // Sets service value and raises property changed
        PlaybackPitch = 0.0; // Sets service value and raises property changed

        // Initialize playback modes (Defaults)
        ShuffleEnabled = false;
        RepeatMode = RepeatMode.PlayOnce; // Default repeat mode


        // Initialize commands
        PlayPauseResumeCommand = new RelayCommand(
            _ => TogglePlayPauseResume(),
            _ => PlaybackService.CurrentSong != null && !IsWaveformLoading); // Can't control playback while waveform is loading

        SeekCommand = new RelayCommand(
            positionSecondsObj => {
                if (positionSecondsObj is double seconds && PlaybackService.CurrentSongDuration.TotalSeconds > 0)
                {
                    // This command is useful for explicit seek calls, although the slider two-way binding is primary.
                    PlaybackService.Seek(TimeSpan.FromSeconds(seconds));
                }
            },
             _ => PlaybackService.CurrentSong != null && PlaybackService.CurrentSongDuration.TotalSeconds > 0 && !IsWaveformLoading);

        ToggleShuffleCommand = new RelayCommand(
            _ => ShuffleEnabled = !ShuffleEnabled,
             _ => PlaybackService.CurrentSong != null // Can shuffle only if a song is loaded (implies a list exists)
        );

        // Renamed command handler call
        CycleRepeatModeCommand = new RelayCommand(
             _ => CycleRepeatMode(),
             _ => PlaybackService.CurrentSong != null // Can repeat only if a song is loaded
        );


        // Subscribe to PlaybackService property changes
        PlaybackService.PropertyChanged += PlaybackService_PropertyChanged;

        // Subscribe to PlaybackViewModel's own properties that affect command CanExecute
        // ShuffleEnabled, RepeatMode, IsWaveformLoading affect command states.
        // CurrentPosition, CurrentSongDuration affect seek command CanExecute (handled by PS_PropertyChanged)
        PropertyChanged += PlaybackViewModel_PropertyChanged;
    }

    private void TogglePlayPauseResume()
    {
        Debug.WriteLine($"[PlaybackVM] TogglePlayPauseResume called. Current state: {PlaybackService.CurrentPlaybackStatus}");
        if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Playing)
        {
            PlaybackService.Pause();
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Paused)
        {
            PlaybackService.Resume();
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Stopped && PlaybackService.CurrentSong != null)
        {
            // If stopped but a song is loaded (e.g., after ending), resume playing
            PlaybackService.Resume(); // This calls Play(CurrentSong) internally
        }
        else if (PlaybackService.CurrentPlaybackStatus == PlaybackStateStatus.Stopped && PlaybackService.CurrentSong == null)
        {
            // If stopped and no song is loaded, cannot play/resume.
            Debug.WriteLine("[PlaybackVM] TogglePlayPauseResume called in Stopped state with no song. Doing nothing.");
        }
    }

    // Renamed handler and updated cycle logic
    private void CycleRepeatMode()
    {
        RepeatMode = RepeatMode switch
        {
            RepeatMode.None => RepeatMode.PlayOnce,
            RepeatMode.PlayOnce => RepeatMode.RepeatOne,
            RepeatMode.RepeatOne => RepeatMode.RepeatAll,
            RepeatMode.RepeatAll => RepeatMode.None,
            _ => RepeatMode.None // Should not happen
        };
        RaisePlaybackCommandCanExecuteChanged(); // Repeat commands affected
    }

    private void PlaybackService_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            // Propagate relevant PlaybackService changes to PlaybackViewModel properties
            switch (e.PropertyName)
            {
                case nameof(PlaybackService.CurrentSong):
                    OnPropertyChanged(nameof(CurrentSong)); // Propagate the song itself
                    OnPropertyChanged(nameof(HasCurrentSong));
                    // Duration, Position, State will also change, let's handle those explicitly or rely on other cases

                    // If the song becomes null (e.g., after Stop), clear waveform data and loading state
                    if (PlaybackService.CurrentSong == null)
                    {
                        Debug.WriteLine("[PlaybackVM] PlaybackService.CurrentSong is null. Clearing waveform data.");
                        WaveformRenderData.Clear(); OnPropertyChanged(nameof(WaveformRenderData));
                        IsWaveformLoading = false; // Internal setter is fine
                    }

                    // Update time displays when song changes
                    OnPropertyChanged(nameof(CurrentTimeDisplay));
                    OnPropertyChanged(nameof(TotalTimeDisplay));

                    // Commands that require a song to be loaded might be affected
                    RaisePlaybackCommandCanExecuteChanged();
                    break;
                case nameof(PlaybackService.CurrentPosition):
                    OnPropertyChanged(nameof(CurrentPosition));
                    OnPropertyChanged(nameof(CurrentPositionSeconds)); // This will reflect the change from PlaybackService
                    OnPropertyChanged(nameof(CurrentTimeDisplay)); // Update current time display
                    // Seek command might be affected (CanExecute depends on duration > 0, which changes less often)
                    // RaisePlaybackCommandCanExecuteChanged(); // Usually not needed for position change
                    break;
                case nameof(PlaybackService.CurrentSongDuration):
                    OnPropertyChanged(nameof(CurrentSongDuration));
                    OnPropertyChanged(nameof(CurrentSongDurationSeconds));
                    OnPropertyChanged(nameof(TotalTimeDisplay)); // Update total time display
                    RaisePlaybackCommandCanExecuteChanged(); // Seek command's CanExecute depends on duration > 0
                    break;
                case nameof(PlaybackService.CurrentPlaybackStatus):
                    OnPropertyChanged(nameof(CurrentPlaybackStatus));
                    OnPropertyChanged(nameof(IsPlaying)); // Derived from status
                    RaisePlaybackCommandCanExecuteChanged(); // Play/Pause/Resume command is affected
                    break;
                    // Speed and Pitch changes on the service are triggered by the VM setter,
                    // so no need to listen for them here.
            }
        });
    }

    private void PlaybackViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        // Listen to properties *on this ViewModel* that affect command CanExecute
        switch (e.PropertyName)
        {
            case nameof(IsWaveformLoading):
            case nameof(ShuffleEnabled): // Commands might be enabled/disabled based on modes
            case nameof(RepeatMode): // Commands might be enabled/disabled based on modes
                RaisePlaybackCommandCanExecuteChanged();
                // Also update the composite IsRepeatActive property
                OnPropertyChanged(nameof(IsRepeatActive));
                break;
            case nameof(HasCurrentSong):
                RaisePlaybackCommandCanExecuteChanged(); // ToggleShuffle and CycleRepeatMode depend on this
                break;
                // PlaybackSpeed, PlaybackPitch don't inherently affect command CanExecute
        }
    }


    /// <summary>
    /// Loads the waveform data for the currently playing song. Designed to be called by MainWindowViewModel.
    /// </summary>
    public async Task LoadWaveformForCurrentSongAsync()
    {
        var songToLoadWaveformFor = PlaybackService.CurrentSong;
        if (songToLoadWaveformFor == null || string.IsNullOrEmpty(songToLoadWaveformFor.FilePath))
        {
            Debug.WriteLine("[PlaybackVM] LoadWaveformForCurrentSongAsync skipped: No current song or invalid path.");
            // Clearing waveform data and setting loading state to false is handled by PlaybackService_PropertyChanged when CurrentSong becomes null
            return;
        }

        // Check if waveform is already loaded for this song OR currently loading
        // A simple check if there are any points is a rough indicator.
        // A more robust approach would be to store the file path associated with WaveformRenderData.
        // For simplicity, for now, if it has points OR is loading, assume it's for the current song.
        if (WaveformRenderData.Any() || IsWaveformLoading)
        {
            Debug.WriteLine($"[PlaybackVM] Waveform already loaded ({WaveformRenderData.Count} points) or loading ({IsWaveformLoading}) for {songToLoadWaveformFor.Title}. Skipping load.");
            return;
        }


        // Clear existing waveform data immediately to show loading state
        Debug.WriteLine($"[PlaybackVM] Clearing previous waveform data ({WaveformRenderData.Count} points).");
        WaveformRenderData.Clear(); OnPropertyChanged(nameof(WaveformRenderData));
        IsWaveformLoading = true; // Internal setter is fine here

        try
        {
            Debug.WriteLine($"[PlaybackVM] Requesting waveform for: {songToLoadWaveformFor.Title}");
            // Target points should probably be based on control width or a fixed resolution
            // For a fixed 80px height control, 1000 points is likely sufficient detail.
            List<WaveformPoint> points = await _waveformService.GetWaveformAsync(songToLoadWaveformFor.FilePath, 1000);

            // Check if the song is still the same AFTER the async operation before updating the UI
            if (PlaybackService.CurrentSong == songToLoadWaveformFor)
            {
                Debug.WriteLine($"[PlaybackVM] Waveform loaded for: {songToLoadWaveformFor.Title}, {points.Count} points. Updating UI.");
                // Add points on the UI thread
                await Dispatcher.UIThread.InvokeAsync(() => {
                    foreach (var p in points) WaveformRenderData.Add(p);
                    OnPropertyChanged(nameof(WaveformRenderData)); // Notify UI
                });
                // _currentWaveformFilePath = songToLoadWaveformFor.FilePath; // Store the file path of the loaded waveform

            }
            else
            {
                // Song changed during waveform generation, discard the result for the old song.
                Debug.WriteLine($"[PlaybackVM] Waveform for {songToLoadWaveformFor.Title} loaded, but current song is now {PlaybackService.CurrentSong?.Title ?? "null"}. Discarding.");
                // No need to clear WaveformRenderData here; the handler for the new song or null song will handle it.
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[PlaybackVM] CRITICAL Error loading waveform for {songToLoadWaveformFor.Title}: {ex.Message}");
            await Dispatcher.UIThread.InvokeAsync(() => {
                WaveformRenderData.Clear(); OnPropertyChanged(nameof(WaveformRenderData));
                // Optionally set a status text indicating waveform load failed
            });
        }
        finally
        {
            await Dispatcher.UIThread.InvokeAsync(() => {
                IsWaveformLoading = false; // Internal setter is fine here
            });
        }
    }

    /// <summary>
    /// Raises CanExecuteChanged for commands owned by this ViewModel.
    /// </summary>
    public void RaisePlaybackCommandCanExecuteChanged()
    {
        //Debug.WriteLine("[PlaybackVM] Raising playback command CanExecute changed.");
        (PlayPauseResumeCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (SeekCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (ToggleShuffleCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (CycleRepeatModeCommand as RelayCommand)?.RaiseCanExecuteChanged(); // Renamed
    }
}
</file>

<file path="Source\ViewModels\RelayCommand.cs">
using System;
using System.Windows.Input;

namespace Sonorize.ViewModels;

public class RelayCommand : ICommand
{
    private readonly Action<object?> _execute;
    private readonly Predicate<object?>? _canExecute;
    private EventHandler? _canExecuteChanged;

    public event EventHandler? CanExecuteChanged
    {
        add
        {
            // Note: Avalonia doesn't have a global CommandManager.RequerySuggested like WPF.
            // For simplicity, this basic RelayCommand requires manual raising of CanExecuteChanged
            // or relies on UI controls that re-evaluate CanExecute on interactions.
            // For more robust scenarios, integrate with a mechanism that allows VMs to signal changes.
            _canExecuteChanged += value;
        }
        remove
        {
            _canExecuteChanged -= value;
        }
    }

    public void RaiseCanExecuteChanged()
    {
        _canExecuteChanged?.Invoke(this, EventArgs.Empty);
    }

    public RelayCommand(Action<object?> execute, Predicate<object?>? canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public RelayCommand(Action execute, Func<bool>? canExecute = null)
        : this(o => execute(), canExecute == null ? (Predicate<object?>?)null : o => canExecute())
    {
    }


    public bool CanExecute(object? parameter) => _canExecute == null || _canExecute(parameter);
    public void Execute(object? parameter) => _execute(parameter);
}
</file>

<file path="Source\ViewModels\SettingsViewModel.cs">
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Sonorize.Services;
using Sonorize.Models; // Required for AppSettings type

namespace Sonorize.ViewModels;

public class SettingsViewModel : ViewModelBase
{
    private readonly SettingsService _settingsService;
    private readonly ThemeService _themeService;

    public ObservableCollection<string> MusicDirectories { get; } = new();
    public List<string> InitialMusicDirectories { get; private set; }

    public string? SelectedDirectory
    {
        get;

        set => SetProperty(ref field, value, nameof(CanRemoveDirectory));
    }

    public ObservableCollection<string> AvailableThemes { get; } = new();

    public string? SelectedThemeFile
    {
        get;

        set
        {
            if (!SetProperty(ref field, value))
            {
                return;
            }
            MarkSettingsChanged();
        }
    }

    // Last.fm Settings Properties
    private bool _lastfmScrobblingEnabled;
    public bool LastfmScrobblingEnabled
    {
        get => _lastfmScrobblingEnabled;
        set { if (SetProperty(ref _lastfmScrobblingEnabled, value)) MarkSettingsChanged(); }
    }

    private string? _lastfmUsername;
    public string? LastfmUsername
    {
        get => _lastfmUsername;
        set { if (SetProperty(ref _lastfmUsername, value)) MarkSettingsChanged(); }
    }

    private string? _lastfmPassword;
    public string? LastfmPassword
    {
        get => _lastfmPassword;
        set { if (SetProperty(ref _lastfmPassword, value)) MarkSettingsChanged(); }
    }

    private int _scrobbleThresholdPercentage;
    public int ScrobbleThresholdPercentage
    {
        get => _scrobbleThresholdPercentage;
        set { if (SetProperty(ref _scrobbleThresholdPercentage, value)) MarkSettingsChanged(); }
    }

    private int _scrobbleThresholdAbsoluteSeconds;
    public int ScrobbleThresholdAbsoluteSeconds
    {
        get => _scrobbleThresholdAbsoluteSeconds;
        set { if (SetProperty(ref _scrobbleThresholdAbsoluteSeconds, value)) MarkSettingsChanged(); }
    }


    public bool SettingsChanged { get; private set; } = false;

    public ICommand AddDirectoryCommand { get; }
    public ICommand RemoveDirectoryCommand { get; }
    public ICommand SaveAndCloseCommand { get; }

    public bool CanRemoveDirectory => SelectedDirectory != null;

    public SettingsViewModel(SettingsService settingsService)
    {
        _settingsService = settingsService;
        _themeService = new ThemeService(null);

        var settings = _settingsService.LoadSettings();
        InitialMusicDirectories = new List<string>(settings.MusicDirectories);

        foreach (var dir in settings.MusicDirectories)
        {
            MusicDirectories.Add(dir);
        }

        foreach (var themeFile in _themeService.GetAvailableThemeFiles())
        {
            AvailableThemes.Add(themeFile);
        }

        SelectedThemeFile = settings.PreferredThemeFileName ?? ThemeService.DefaultThemeFileName;
        if (!AvailableThemes.Contains(SelectedThemeFile) && AvailableThemes.Any())
        {
            SelectedThemeFile = AvailableThemes.First();
        }

        // Load Last.fm settings
        _lastfmScrobblingEnabled = settings.LastfmScrobblingEnabled;
        _lastfmUsername = settings.LastfmUsername;
        _lastfmPassword = settings.LastfmPassword;
        _scrobbleThresholdPercentage = settings.ScrobbleThresholdPercentage;
        _scrobbleThresholdAbsoluteSeconds = settings.ScrobbleThresholdAbsoluteSeconds;


        SettingsChanged = false;

        AddDirectoryCommand = new RelayCommand(async owner => await AddDirectory(owner as Window));
        RemoveDirectoryCommand = new RelayCommand(RemoveSelectedDirectory, _ => CanRemoveDirectory);
        SaveAndCloseCommand = new RelayCommand(SaveSettings);

        PropertyChanged += (s, e) => {
            if (e.PropertyName == nameof(SelectedDirectory))
            {
                (RemoveDirectoryCommand as RelayCommand)?.RaiseCanExecuteChanged();
            }
        };
        MusicDirectories.CollectionChanged += (s, e) => MarkSettingsChanged();
    }

    private void MarkSettingsChanged()
    {
        if (!SettingsChanged)
        {
            SettingsChanged = true;
            Debug.WriteLine("[SettingsVM] Settings marked as changed.");
        }
    }


    private async Task AddDirectory(Window? owner)
    {
        if (owner?.StorageProvider == null)
        {
            Debug.WriteLine("StorageProvider is not available.");
            return;
        }

        var options = new FolderPickerOpenOptions
        {
            Title = "Select Music Directory",
            AllowMultiple = false
        };

        var result = await owner.StorageProvider.OpenFolderPickerAsync(options);

        if (result != null && result.Count > 0)
        {
            var folder = result.FirstOrDefault();
            if (folder == null) return;

            var path = folder.Path.LocalPath;
            if (string.IsNullOrEmpty(path) || MusicDirectories.Contains(path)) return;

            MusicDirectories.Add(path);
        }
    }

    private void RemoveSelectedDirectory(object? parameter)
    {
        if (SelectedDirectory == null) return;

        MusicDirectories.Remove(SelectedDirectory);
        SelectedDirectory = null;
    }

    private void SaveSettings(object? parameter)
    {
        AppSettings currentSettings = _settingsService.LoadSettings();
        bool actualChangesMade = false;

        if (!InitialMusicDirectories.SequenceEqual(MusicDirectories))
        {
            currentSettings.MusicDirectories = new List<string>(MusicDirectories);
            InitialMusicDirectories = new List<string>(MusicDirectories);
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved directories count: {currentSettings.MusicDirectories.Count}");
        }

        if (currentSettings.PreferredThemeFileName != SelectedThemeFile)
        {
            currentSettings.PreferredThemeFileName = SelectedThemeFile;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved theme: {SelectedThemeFile}");
        }

        if (currentSettings.LastfmScrobblingEnabled != LastfmScrobblingEnabled)
        {
            currentSettings.LastfmScrobblingEnabled = LastfmScrobblingEnabled;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved LastfmScrobblingEnabled: {currentSettings.LastfmScrobblingEnabled}");
        }
        if (currentSettings.LastfmUsername != LastfmUsername)
        {
            currentSettings.LastfmUsername = LastfmUsername;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved LastfmUsername: {currentSettings.LastfmUsername}");
        }
        if (currentSettings.LastfmPassword != LastfmPassword)
        {
            currentSettings.LastfmPassword = LastfmPassword;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved LastfmPassword (length: {currentSettings.LastfmPassword?.Length ?? 0})");
        }
        if (currentSettings.ScrobbleThresholdPercentage != ScrobbleThresholdPercentage)
        {
            currentSettings.ScrobbleThresholdPercentage = ScrobbleThresholdPercentage;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved ScrobbleThresholdPercentage: {currentSettings.ScrobbleThresholdPercentage}");
        }
        if (currentSettings.ScrobbleThresholdAbsoluteSeconds != ScrobbleThresholdAbsoluteSeconds)
        {
            currentSettings.ScrobbleThresholdAbsoluteSeconds = ScrobbleThresholdAbsoluteSeconds;
            actualChangesMade = true;
            Debug.WriteLine($"[SettingsVM] Saved ScrobbleThresholdAbsoluteSeconds: {currentSettings.ScrobbleThresholdAbsoluteSeconds}");
        }

        if (actualChangesMade)
        {
            _settingsService.SaveSettings(currentSettings);
            SettingsChanged = true;
        }
        else
        {
            SettingsChanged = false;
        }
    }
}
</file>

<file path="Source\ViewModels\SongDisplayMode.cs">
namespace Sonorize.ViewModels;

public enum SongDisplayMode
{
    Detailed,
    Compact,
    Grid
}
</file>

<file path="Source\ViewModels\ViewModelBase.cs">
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Sonorize.ViewModels;

public class ViewModelBase : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value))
        {
            return false;
        }

        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }

    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
</file>

<file path="Source\Views\BrushExtensions.cs">
// Path: Source/Views/MainView.cs
using System;
using Avalonia.Media;

namespace Sonorize.Views;

public static class BrushExtensions
{
    public static IBrush Multiply(this IBrush brush, double factor)
    {
        if (brush is ISolidColorBrush solidBrush)
        {
            var c = solidBrush.Color;
            return new SolidColorBrush(Color.FromArgb(c.A, (byte)Math.Clamp(c.R * factor, 0, 255), (byte)Math.Clamp(c.G * factor, 0, 255), (byte)Math.Clamp(c.B * factor, 0, 255)));
        }
        return brush;
    }
}
</file>

<file path="Source\Views\MainWindow.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // For Thumb, ToggleButton
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
// Removed: using Avalonia.Media.Imaging; 
// Removed: using Avalonia.Styling;
// Removed: using Sonorize.Controls;
// Removed: using Sonorize.Converters;
using Sonorize.Models;
// Removed: using Sonorize.Services;
using Sonorize.ViewModels;
using Sonorize.Views.MainWindowControls;
using System; // For EventArgs
using System.ComponentModel; // For PropertyChangedEventArgs
using System.Diagnostics; // For Debug
using Avalonia.Threading; // Required for Dispatcher

namespace Sonorize.Views;
public class MainWindow : Window
{
    private readonly ThemeColors _theme;
    private ListBox _songListBox;
    private ListBox _artistsListBox;
    private ListBox _albumsListBox;
    private LibraryViewModel? _currentLibraryVM;
    private readonly SharedViewTemplates _sharedViewTemplates;
    private readonly MainTabViewControls _mainTabViewControls;


    public MainWindow(ThemeColors theme)
    {
        _theme = theme;
        _sharedViewTemplates = new SharedViewTemplates(_theme);
        _mainTabViewControls = new MainTabViewControls(_theme, _sharedViewTemplates);

        Title = "Sonorize";
        Width = 950;
        Height = 750;
        MinWidth = 700;
        MinHeight = 500;
        WindowStartupLocation = WindowStartupLocation.CenterScreen;
        Background = _theme.B_BackgroundColor;

        var mainGrid = new Grid
        {
            RowDefinitions =
            [
                new(GridLength.Auto),
                new(GridLength.Auto),
                new(GridLength.Star),
                new(GridLength.Auto),
                new(GridLength.Auto),
                new(GridLength.Auto)
            ]
        };

        var menu = MainMenu.Create(_theme, this);
        Grid.SetRow(menu, 0);
        mainGrid.Children.Add(menu);

        var searchBarPanel = SearchBarPanel.Create(_theme);
        Grid.SetRow(searchBarPanel, 1);
        mainGrid.Children.Add(searchBarPanel);

        var tabControl = _mainTabViewControls.CreateMainTabView(out _songListBox, out _artistsListBox, out _albumsListBox);
        Grid.SetRow(tabControl, 2);
        mainGrid.Children.Add(tabControl);

        var advancedPlaybackPanel = AdvancedPlaybackPanelControls.Create(_theme);
        advancedPlaybackPanel.Bind(Visual.IsVisibleProperty, new Binding("IsAdvancedPanelVisible"));
        Grid.SetRow(advancedPlaybackPanel, 3);
        mainGrid.Children.Add(advancedPlaybackPanel);

        var mainPlaybackControls = MainPlaybackControlsPanel.Create(_theme);
        Grid.SetRow(mainPlaybackControls, 4);
        mainGrid.Children.Add(mainPlaybackControls);

        var statusBar = CreateStatusBar();
        Grid.SetRow(statusBar, 5);
        mainGrid.Children.Add(statusBar);

        Content = mainGrid;

        this.DataContextChanged += MainWindow_DataContextChanged;
    }

    private void MainWindow_DataContextChanged(object? sender, EventArgs e)
    {
        if (_currentLibraryVM != null)
        {
            _currentLibraryVM.PropertyChanged -= LibraryViewModel_PropertyChanged;
            _currentLibraryVM = null;
        }

        if (DataContext is MainWindowViewModel vm && vm.Library != null)
        {
            _currentLibraryVM = vm.Library;
            _currentLibraryVM.PropertyChanged += LibraryViewModel_PropertyChanged;

            // Apply initial display modes for each list
            ApplyListViewDisplayMode(_songListBox, _currentLibraryVM.LibraryViewMode, _sharedViewTemplates.DetailedSongTemplate, _sharedViewTemplates.CompactSongTemplate, _sharedViewTemplates.GridSongTemplate);
            ApplyListViewDisplayMode(_artistsListBox, _currentLibraryVM.ArtistViewMode, _sharedViewTemplates.DetailedArtistTemplate, _sharedViewTemplates.CompactArtistTemplate, _sharedViewTemplates.GridArtistTemplate);
            ApplyListViewDisplayMode(_albumsListBox, _currentLibraryVM.AlbumViewMode, _sharedViewTemplates.DetailedAlbumTemplate, _sharedViewTemplates.CompactAlbumTemplate, _sharedViewTemplates.GridAlbumTemplate);
        }
    }

    private void LibraryViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (sender is LibraryViewModel lvm)
        {
            if (e.PropertyName == nameof(LibraryViewModel.LibraryViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_songListBox, lvm.LibraryViewMode, _sharedViewTemplates.DetailedSongTemplate, _sharedViewTemplates.CompactSongTemplate, _sharedViewTemplates.GridSongTemplate));
            }
            else if (e.PropertyName == nameof(LibraryViewModel.ArtistViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_artistsListBox, lvm.ArtistViewMode, _sharedViewTemplates.DetailedArtistTemplate, _sharedViewTemplates.CompactArtistTemplate, _sharedViewTemplates.GridArtistTemplate));
            }
            else if (e.PropertyName == nameof(LibraryViewModel.AlbumViewMode))
            {
                Dispatcher.UIThread.InvokeAsync(() => ApplyListViewDisplayMode(_albumsListBox, lvm.AlbumViewMode, _sharedViewTemplates.DetailedAlbumTemplate, _sharedViewTemplates.CompactAlbumTemplate, _sharedViewTemplates.GridAlbumTemplate));
            }
        }
    }

    // Renamed for clarity
    private void ApplyListViewDisplayMode(ListBox listBox, SongDisplayMode mode, IDataTemplate detailedTemplate, IDataTemplate compactTemplate, IDataTemplate gridTemplate)
    {
        if (listBox == null)
        {
            Debug.WriteLine($"[MainWindow] ApplyListViewDisplayMode called but ListBox target is null. Mode: {mode}");
            return;
        }
        _mainTabViewControls.UpdateListViewMode(mode, listBox, detailedTemplate, compactTemplate, gridTemplate);
    }

    private Border CreateStatusBar()
    {
        var statusBar = new Border { Background = _theme.B_SlightlyLighterBackground, Padding = new Thickness(10, 4), Height = 26 };
        var statusBarText = new TextBlock { Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center, FontSize = 11 };
        statusBarText.Bind(TextBlock.TextProperty, new Binding("StatusBarText"));
        statusBar.Child = statusBarText;
        return statusBar;
    }

    protected override void OnClosed(EventArgs e)
    {
        if (_currentLibraryVM != null)
        {
            _currentLibraryVM.PropertyChanged -= LibraryViewModel_PropertyChanged;
        }
        base.OnClosed(e);
    }
}
</file>

<file path="Source\Views\SettingsWindow.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Data;
using Sonorize.Models;
using Sonorize.ViewModels;
using Avalonia.Styling;
using Avalonia.Controls.Primitives; // Required for Style

namespace Sonorize.Views;

public class SettingsWindow : Window
{
    private readonly ThemeColors _theme;

    public SettingsWindow(ThemeColors currentDisplayTheme)
    {
        _theme = currentDisplayTheme;

        Title = "Sonorize Settings"; Width = 500; Height = 700;
        CanResize = false; WindowStartupLocation = WindowStartupLocation.CenterOwner; Icon = null;
        Background = _theme.B_SlightlyLighterBackground;

        // Style for the TextBox part of NumericUpDown controls in this window
        this.Styles.Add(new Style(s => s.OfType<NumericUpDown>().Descendant().OfType<TextBox>())
        {
            Setters =
            {
                new Setter(TextBox.ForegroundProperty, _theme.B_TextColor),
                new Setter(TextBox.BackgroundProperty, Brushes.Transparent), // Ensure NumericUpDown's background shows through
                new Setter(TextBox.CaretBrushProperty, _theme.B_TextColor), // For when editing
                new Setter(TextBox.BorderThicknessProperty, new Thickness(0)), // Remove internal border if any
                new Setter(TextBox.VerticalContentAlignmentProperty, VerticalAlignment.Center),
                new Setter(TextBox.HorizontalContentAlignmentProperty, HorizontalAlignment.Center), // Center the text
                new Setter(TextBox.PaddingProperty, new Thickness(2,0)) // Minimal padding
            }
        });


        var mainPanel = new DockPanel { Margin = new Thickness(15) };

        // --- Header for Directories ---
        var dirHeaderBlock = new TextBlock
        {
            Text = "Music Directories",
            FontSize = 18,
            FontWeight = FontWeight.SemiBold,
            Foreground = _theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 10)
        };

        // --- Music Directories Section ---
        var directoriesPanel = new DockPanel();
        var dirManagementButtons = new StackPanel { Orientation = Orientation.Vertical, Spacing = 5, Margin = new Thickness(0, 0, 10, 0) };
        DockPanel.SetDock(dirManagementButtons, Dock.Right);
        var addButton = new Button { Content = "Add", Background = _theme.B_ControlBackgroundColor, Foreground = _theme.B_TextColor, HorizontalAlignment = HorizontalAlignment.Stretch };
        addButton.Bind(Button.CommandProperty, new Binding("AddDirectoryCommand")); addButton.CommandParameter = this;
        var removeButton = new Button { Content = "Remove", Background = _theme.B_ControlBackgroundColor, Foreground = _theme.B_TextColor, HorizontalAlignment = HorizontalAlignment.Stretch };
        removeButton.Bind(Button.CommandProperty, new Binding("RemoveDirectoryCommand")); removeButton.Bind(Button.IsEnabledProperty, new Binding("CanRemoveDirectory"));
        dirManagementButtons.Children.Add(addButton); dirManagementButtons.Children.Add(removeButton);
        var directoryListBox = new ListBox { Background = _theme.B_ControlBackgroundColor, BorderThickness = new Thickness(1), BorderBrush = _theme.B_SecondaryTextColor, Foreground = _theme.B_TextColor, Height = 120 };
        directoryListBox.Bind(ItemsControl.ItemsSourceProperty, new Binding("MusicDirectories")); directoryListBox.Bind(ListBox.SelectedItemProperty, new Binding("SelectedDirectory", BindingMode.TwoWay));
        directoriesPanel.Children.Add(dirManagementButtons); directoriesPanel.Children.Add(directoryListBox);

        // --- Theme Selection Section ---
        var themeHeaderBlock = new TextBlock
        {
            Text = "Application Theme",
            FontSize = 16,
            FontWeight = FontWeight.SemiBold,
            Foreground = _theme.B_TextColor,
            Margin = new Thickness(0, 15, 0, 5)
        };

        var themeComboBox = new ComboBox
        {
            HorizontalAlignment = HorizontalAlignment.Stretch,
            Background = _theme.B_ControlBackgroundColor,
            Foreground = _theme.B_TextColor,
            BorderBrush = _theme.B_SecondaryTextColor
        };
        themeComboBox.Bind(ItemsControl.ItemsSourceProperty, new Binding("AvailableThemes"));
        themeComboBox.Bind(ComboBox.SelectedItemProperty, new Binding("SelectedThemeFile", BindingMode.TwoWay));

        var themeRestartNotice = new TextBlock
        {
            Text = "A restart is required for theme changes to take full effect.",
            FontSize = 10,
            Foreground = _theme.B_SecondaryTextColor,
            FontStyle = FontStyle.Italic,
            Margin = new Thickness(0, 5, 0, 0),
            TextWrapping = TextWrapping.Wrap
        };

        // --- Scrobbling Section ---
        var scrobblingHeaderBlock = new TextBlock
        {
            Text = "Last.fm Scrobbling",
            FontSize = 16,
            FontWeight = FontWeight.SemiBold,
            Foreground = _theme.B_TextColor,
            Margin = new Thickness(0, 15, 0, 5)
        };

        var scrobblingEnableCheckBox = new CheckBox
        {
            Content = "Enable Scrobbling",
            Foreground = _theme.B_TextColor,
            Margin = new Thickness(0, 0, 0, 10)
        };
        scrobblingEnableCheckBox.Bind(ToggleButton.IsCheckedProperty, new Binding("LastfmScrobblingEnabled", BindingMode.TwoWay));

        var usernameLabel = new TextBlock { Text = "Username:", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 10, 5) };
        var usernameTextBox = new TextBox
        {
            Background = _theme.B_ControlBackgroundColor,
            Foreground = _theme.B_TextColor,
            BorderBrush = _theme.B_SecondaryTextColor,
            Watermark = "Last.fm Username",
            Margin = new Thickness(0, 0, 0, 5)
        };
        usernameTextBox.Bind(TextBox.TextProperty, new Binding("LastfmUsername", BindingMode.TwoWay));

        var passwordLabel = new TextBlock { Text = "Password:", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 10, 0) };
        var passwordTextBox = new TextBox
        {
            Background = _theme.B_ControlBackgroundColor,
            Foreground = _theme.B_TextColor,
            BorderBrush = _theme.B_SecondaryTextColor,
            PasswordChar = '•',
            Watermark = "Last.fm Password"
        };
        passwordTextBox.Bind(TextBox.TextProperty, new Binding("LastfmPassword", BindingMode.TwoWay));


        var scrobblingGrid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitions("Auto,*"),
            RowDefinitions = new RowDefinitions("Auto,Auto"),
            Margin = new Thickness(0, 0, 0, 10)
        };
        Grid.SetRow(usernameLabel, 0); Grid.SetColumn(usernameLabel, 0);
        Grid.SetRow(usernameTextBox, 0); Grid.SetColumn(usernameTextBox, 1);
        Grid.SetRow(passwordLabel, 1); Grid.SetColumn(passwordLabel, 0);
        Grid.SetRow(passwordTextBox, 1); Grid.SetColumn(passwordTextBox, 1);
        scrobblingGrid.Children.Add(usernameLabel);
        scrobblingGrid.Children.Add(usernameTextBox);
        scrobblingGrid.Children.Add(passwordLabel);
        scrobblingGrid.Children.Add(passwordTextBox);

        // Scrobbling Criteria Settings
        var criteriaPanel = new StackPanel { Orientation = Orientation.Vertical, Spacing = 8, Margin = new Thickness(0, 10, 0, 5) };

        var percentagePanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 5 };
        var percentageLabel = new TextBlock { Text = "Scrobble if played for at least ", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        var percentageUpDown = new NumericUpDown
        {
            Minimum = 1,
            Maximum = 100,
            Increment = 1,
            Width = 90,
            Background = _theme.B_ControlBackgroundColor,
            Foreground = _theme.B_TextColor,
            BorderBrush = _theme.B_SecondaryTextColor
        };
        percentageUpDown.Bind(NumericUpDown.ValueProperty, new Binding("ScrobbleThresholdPercentage", BindingMode.TwoWay));
        var percentageUnitLabel = new TextBlock { Text = "% of duration", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        percentagePanel.Children.Add(percentageLabel); percentagePanel.Children.Add(percentageUpDown); percentagePanel.Children.Add(percentageUnitLabel);

        var absolutePanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 5 };
        var absoluteLabel = new TextBlock { Text = "OR Scrobble if played for at least ", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        var absoluteUpDown = new NumericUpDown
        {
            Minimum = 10,
            Maximum = 600,
            Increment = 10,
            Width = 100, // Lowered Minimum to 10
            Background = _theme.B_ControlBackgroundColor,
            Foreground = _theme.B_TextColor,
            BorderBrush = _theme.B_SecondaryTextColor
        };
        absoluteUpDown.Bind(NumericUpDown.ValueProperty, new Binding("ScrobbleThresholdAbsoluteSeconds", BindingMode.TwoWay));
        var absoluteUnitLabel = new TextBlock { Text = "seconds", Foreground = _theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        absolutePanel.Children.Add(absoluteLabel); absolutePanel.Children.Add(absoluteUpDown); absolutePanel.Children.Add(absoluteUnitLabel);

        var criteriaExplanation = new TextBlock
        {
            Text = "(Whichever threshold is met first, and track is > 30s)",
            FontSize = 10,
            Foreground = _theme.B_SecondaryTextColor,
            FontStyle = FontStyle.Italic,
            TextWrapping = TextWrapping.Wrap
        };

        criteriaPanel.Children.Add(percentagePanel);
        criteriaPanel.Children.Add(absolutePanel);
        criteriaPanel.Children.Add(criteriaExplanation);

        var scrobblingInfoNotice = new TextBlock
        {
            Text = "Requires a Last.fm account. Password stored locally (exercise caution).",
            FontSize = 10,
            Foreground = _theme.B_SecondaryTextColor,
            FontStyle = FontStyle.Italic,
            Margin = new Thickness(0, 15, 0, 0),
            TextWrapping = TextWrapping.Wrap
        };


        // --- Layout using a main StackPanel for sections ---
        var sectionsStackPanel = new StackPanel { Orientation = Orientation.Vertical, Spacing = 5 };
        sectionsStackPanel.Children.Add(dirHeaderBlock);
        sectionsStackPanel.Children.Add(directoriesPanel);
        sectionsStackPanel.Children.Add(themeHeaderBlock);
        sectionsStackPanel.Children.Add(themeComboBox);
        sectionsStackPanel.Children.Add(themeRestartNotice);
        sectionsStackPanel.Children.Add(scrobblingHeaderBlock);
        sectionsStackPanel.Children.Add(scrobblingEnableCheckBox);
        sectionsStackPanel.Children.Add(scrobblingGrid);
        sectionsStackPanel.Children.Add(criteriaPanel);
        sectionsStackPanel.Children.Add(scrobblingInfoNotice);


        // --- Buttons Panel (Bottom) ---
        var buttonsPanel = new StackPanel { Orientation = Orientation.Horizontal, HorizontalAlignment = HorizontalAlignment.Right, Spacing = 10, Margin = new Thickness(0, 20, 0, 0) };
        var saveButton = new Button { Content = "Save & Close", Background = _theme.B_AccentColor, Foreground = _theme.B_AccentForeground, Padding = new Thickness(15, 8), CornerRadius = new CornerRadius(3) };
        saveButton.Click += (s, e) => { if (DataContext is SettingsViewModel vm) { vm.SaveAndCloseCommand.Execute(null); } Close(); };
        var cancelButton = new Button { Content = "Cancel", Background = _theme.B_ControlBackgroundColor, Foreground = _theme.B_TextColor, Padding = new Thickness(15, 8), CornerRadius = new CornerRadius(3) };
        cancelButton.Click += (s, e) => Close();
        buttonsPanel.Children.Add(saveButton); buttonsPanel.Children.Add(cancelButton);

        // Main panel structure
        DockPanel.SetDock(buttonsPanel, Dock.Bottom);
        mainPanel.Children.Add(buttonsPanel);
        mainPanel.Children.Add(new ScrollViewer { Content = sectionsStackPanel, VerticalScrollBarVisibility = ScrollBarVisibility.Auto });

        Content = mainPanel;
    }
}
</file>

<file path="Source\Services\Playback\NAudioEffectsProcessor.cs">
using NAudio.Wave.SampleProviders;
using NAudio.Wave;
using SoundTouch.Net.NAudioSupport;
using System.Diagnostics;
using System;

namespace Sonorize.Services;

public class NAudioEffectsProcessor : IDisposable
{
    private SoundTouchWaveProvider? _soundTouch;
    private SmbPitchShiftingSampleProvider? _pitchShifter;
    private SampleToWaveProvider? _sampleToWaveProvider;

    private ISampleProvider? _outputProvider;

    public ISampleProvider OutputProvider
    {
        get
        {
            if (_outputProvider == null)
            {
                throw new InvalidOperationException("Audio effects processor has not been initialized.");
            }
            return _outputProvider;
        }
    }

    private float _tempo = 1.0f;
    public float Tempo
    {
        get => _tempo;
        set
        {
            if (Math.Abs(_tempo - value) > float.Epsilon)
            {
                _tempo = value;
                if (_soundTouch != null)
                {
                    try
                    {
                        _soundTouch.Tempo = _tempo;
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[EffectsProcessor] Error setting SoundTouch Tempo: {ex.Message}");
                    }
                }
            }
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            if (Math.Abs(_pitchSemitones - value) > float.Epsilon)
            {
                _pitchSemitones = value;
                if (_pitchShifter != null)
                {
                    try
                    {
                        _pitchShifter.PitchFactor = (float)Math.Pow(2, _pitchSemitones / 12.0);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[EffectsProcessor] Error setting PitchShifter PitchFactor: {ex.Message}");
                    }
                }
            }
        }
    }

    public NAudioEffectsProcessor()
    {
    }

    public void Initialize(ISampleProvider sourceProvider)
    {
        Dispose(disposing: true);

        if (sourceProvider == null)
        {
            throw new ArgumentNullException(nameof(sourceProvider));
        }

        try
        {
            ISampleProvider monoSampleProvider = sourceProvider.ToMono();

            _sampleToWaveProvider = new SampleToWaveProvider(monoSampleProvider);

            _soundTouch = new SoundTouchWaveProvider(_sampleToWaveProvider);
            _soundTouch.Tempo = _tempo;
            _soundTouch.Rate = 1.0f;
            _soundTouch.Pitch = 1.0f;

            ISampleProvider soundTouchAsSampleProvider = _soundTouch.ToSampleProvider();

            _pitchShifter = new SmbPitchShiftingSampleProvider(soundTouchAsSampleProvider);
            _pitchShifter.PitchFactor = (float)Math.Pow(2, _pitchSemitones / 12.0);

            _outputProvider = _pitchShifter;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[EffectsProcessor] CRITICAL ERROR during effects pipeline initialization: {ex.ToString()}");
            Dispose(disposing: true);
            _outputProvider = null;
            throw;
        }
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _sampleToWaveProvider = null;
            _soundTouch = null;
            _pitchShifter = null;
            _outputProvider = null;
        }
    }

    ~NAudioEffectsProcessor()
    {
        Dispose(disposing: false);
    }
}
</file>

<file path="Source\Services\Playback\NAudioPlaybackEngine.cs">
using NAudio.Wave;
using System.Diagnostics;
using System.IO;
using System;

namespace Sonorize.Services;

public class NAudioPlaybackEngine : IDisposable
{
    private IWavePlayer? _waveOutDevice;
    private AudioFileReader? audioFileReader;
    private NAudioEffectsProcessor? _effectsProcessor;

    private IWavePlayer? _waveOutDeviceInstanceForEvent;

    public event EventHandler<StoppedEventArgs>? PlaybackStopped;

    public TimeSpan CurrentPosition
    {
        get => audioFileReader?.CurrentTime ?? TimeSpan.Zero;
        set
        {
            if (audioFileReader != null) audioFileReader.CurrentTime = value;
            else Debug.WriteLine("[Engine] Attempted to set CurrentPosition on null audioFileReader.");
        }
    }

    public TimeSpan CurrentSongDuration => audioFileReader?.TotalTime ?? TimeSpan.Zero;

    public PlaybackStateStatus CurrentPlaybackStatus
    {
        get
        {
            if (_waveOutDevice == null) return PlaybackStateStatus.Stopped;
            return _waveOutDevice.PlaybackState switch
            {
                NAudio.Wave.PlaybackState.Playing => PlaybackStateStatus.Playing,
                NAudio.Wave.PlaybackState.Paused => PlaybackStateStatus.Paused,
                NAudio.Wave.PlaybackState.Stopped => PlaybackStateStatus.Stopped,
                _ => PlaybackStateStatus.Stopped
            };
        }
    }

    private float _playbackRate = 1.0f;
    public float PlaybackRate
    {
        get => _playbackRate;
        set
        {
            _playbackRate = value;
            if (_effectsProcessor != null) _effectsProcessor.Tempo = value;
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            _pitchSemitones = value;
            if (_effectsProcessor != null) _effectsProcessor.PitchSemitones = value;
        }
    }


    public NAudioPlaybackEngine()
    {
        Debug.WriteLine("[Engine] Constructor called.");
    }

    public void Load(string filePath)
    {
        Debug.WriteLine($"[Engine] Load called for: {Path.GetFileName(filePath)}");

        if (!File.Exists(filePath))
        {
            Debug.WriteLine($"[Engine] Load failed: File not found at {filePath}");
            throw new FileNotFoundException("Audio file not found.", filePath);
        }

        Dispose(disposing: true);

        try
        {
            audioFileReader = new AudioFileReader(filePath);
            Debug.WriteLine($"[Engine] Loaded AudioFileReader. Channels: {audioFileReader.WaveFormat.Channels}, SampleRate: {audioFileReader.WaveFormat.SampleRate}, Duration: {audioFileReader.TotalTime}");

            _effectsProcessor = new NAudioEffectsProcessor();
            _effectsProcessor.Initialize(audioFileReader.ToSampleProvider());

            _effectsProcessor.Tempo = PlaybackRate;
            _effectsProcessor.PitchSemitones = PitchSemitones;
            Debug.WriteLine($"[Engine] Effects Processor initialized. Applied Tempo: {_effectsProcessor.Tempo}, Pitch: {_effectsProcessor.PitchSemitones}");

            _waveOutDevice = new WaveOutEvent();
            _waveOutDeviceInstanceForEvent = _waveOutDevice;
            _waveOutDevice.PlaybackStopped += OnWaveOutPlaybackStopped;

            _waveOutDevice.Init(_effectsProcessor.OutputProvider.ToWaveProvider());

            Debug.WriteLine($"[Engine] NAudio pipeline loaded successfully for: {Path.GetFileName(filePath)}.");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[Engine] CRITICAL ERROR during NAudio pipeline Load for {Path.GetFileName(filePath)}: {ex.ToString()}");
            Dispose(disposing: true);
            throw new Exception($"Failed to load audio pipeline for {Path.GetFileName(filePath)}", ex);
        }
    }

    public void Play()
    {
        Debug.WriteLine("[Engine] Play requested.");
        if (_waveOutDevice != null && (_waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Paused || _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Stopped))
        {
            Debug.WriteLine("[Engine] Calling device.Play().");
            try
            {
                _waveOutDevice.Play();
                Debug.WriteLine($"[Engine] Playback started/resumed. State: {CurrentPlaybackStatus}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Play(): {ex.Message}");
            }
        }
        else if (_waveOutDevice != null && _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Playing)
        {
            Debug.WriteLine("[Engine] Already playing. Doing nothing.");
        }
        else
        {
            Debug.WriteLine("[Engine] Cannot Play: Device not initialized.");
        }
    }

    public void Pause()
    {
        Debug.WriteLine("[Engine] Pause requested.");
        if (_waveOutDevice != null && _waveOutDevice.PlaybackState == NAudio.Wave.PlaybackState.Playing)
        {
            Debug.WriteLine("[Engine] Calling device.Pause().");
            try
            {
                _waveOutDevice.Pause();
                Debug.WriteLine($"[Engine] Playback paused. State: {CurrentPlaybackStatus}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Pause(): {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine($"[Engine] Cannot Pause: Device state is {_waveOutDevice?.PlaybackState ?? NAudio.Wave.PlaybackState.Stopped}.");
        }
    }

    public void Stop()
    {
        Debug.WriteLine("[Engine] Stop requested.");
        if (_waveOutDevice != null && _waveOutDevice.PlaybackState != NAudio.Wave.PlaybackState.Stopped)
        {
            Debug.WriteLine("[Engine] Calling device.Stop().");
            try
            {
                _waveOutDevice.Stop();
                Debug.WriteLine($"[Engine] Stop initiated. Device state: {_waveOutDevice?.PlaybackState}. PlaybackStopped event should follow.");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during device.Stop(): {ex.Message}. PlaybackStopped event may not fire.");
            }
        }
        else
        {
            Debug.WriteLine("[Engine] Already stopped or not initialized. Doing nothing.");
        }
    }

    public void Seek(TimeSpan position)
    {
        Debug.WriteLine($"[Engine] Seek requested to {position:mm\\:ss\\.ff}.");
        if (audioFileReader != null)
        {
            try
            {
                audioFileReader.CurrentTime = position;
                Debug.WriteLine($"[Engine] Seek successful. Actual position: {audioFileReader.CurrentTime:mm\\:ss\\.ff}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Engine] Error during audioFileReader.CurrentTime = {position:mm\\:ss\\.ff}: {ex.Message}");
            }
        }
        else
        {
            Debug.WriteLine("[Engine] Cannot Seek: AudioFileReader not initialized.");
        }
    }

    private void OnWaveOutPlaybackStopped(object? sender, StoppedEventArgs e)
    {
        if (sender == _waveOutDeviceInstanceForEvent)
        {
            Debug.WriteLine("[Engine] OnWaveOutPlaybackStopped event received from current device.");
            PlaybackStopped?.Invoke(this, e);
        }
        else
        {
            Debug.WriteLine("[Engine] OnWaveOutPlaybackStopped event received from old device instance. Ignoring.");
        }
    }


    public void Dispose()
    {
        Debug.WriteLine("[Engine] Dispose() called.");
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
        Debug.WriteLine("[Engine] Dispose() completed.");
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_waveOutDevice != null && _waveOutDeviceInstanceForEvent == _waveOutDevice)
            {
                _waveOutDevice.PlaybackStopped -= OnWaveOutPlaybackStopped;
                Debug.WriteLine("[Engine] Detached PlaybackStopped handler.");
            }
            _waveOutDeviceInstanceForEvent = null;

            if (_waveOutDevice != null)
            {
                Debug.WriteLine($"[Engine] Disposing WaveOutDevice (State: {_waveOutDevice.PlaybackState}).");
                try { _waveOutDevice.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing WaveOutDevice: {ex.Message}"); }
                _waveOutDevice = null;
            }

            if (_effectsProcessor != null)
            {
                Debug.WriteLine("[Engine] Disposing Effects Processor.");
                try { _effectsProcessor.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing Effects Processor: {ex.Message}"); }
                _effectsProcessor = null;
            }

            if (audioFileReader != null)
            {
                Debug.WriteLine("[Engine] Disposing AudioFileReader.");
                try { audioFileReader.Dispose(); } catch (Exception ex) { Debug.WriteLine($"[Engine] Error disposing AudioFileReader: {ex.Message}"); }
                audioFileReader = null;
            }
        }
    }

    ~NAudioPlaybackEngine()
    {
        Debug.WriteLine("[Engine] Finalizer called for NAudioPlaybackEngine.");
        Dispose(disposing: false);
        Debug.WriteLine("[Engine] Finalizer completed for NAudioPlaybackEngine.");
    }
}
</file>

<file path="Source\Services\Playback\PlaybackLoopHandler.cs">
using Sonorize.Models;
using Sonorize.Services;
using System.Diagnostics;
using System;

namespace Sonorize.Services;

/// <summary>
/// Handles loop region logic for playback, including checking for loop boundaries
/// during playback and adjusting seek positions.
/// </summary>
public class PlaybackLoopHandler : IDisposable // Implementing IDisposable for consistency, though no explicit unmanaged resources are held here.
{
    private readonly PlaybackService _playbackService; // Reference back to the PlaybackService
    private Song? _currentSong; // Keep a reference to the current song

    public PlaybackLoopHandler(PlaybackService playbackService)
    {
        _playbackService = playbackService ?? throw new ArgumentNullException(nameof(playbackService));
        Debug.WriteLine("[LoopHandler] Constructor called.");
        // No need to subscribe to PlaybackService events here; PlaybackService pushes data via method calls.
    }

    /// <summary>
    /// Updates the internal reference to the current song.
    /// Called by PlaybackService when CurrentSong changes.
    /// </summary>
    /// <param name="song">The new current song, or null.</param>
    internal void UpdateCurrentSong(Song? song)
    {
        _currentSong = song;
        Debug.WriteLine($"[LoopHandler] CurrentSong updated to: {_currentSong?.Title ?? "null"}");
        // The handler doesn't need to manage song.IsLoopActive persistence; that's handled by the ViewModel.
        // It just needs to *read* the Song's SavedLoop and IsLoopActive properties.
    }

    /// <summary>
    /// Checks if the current position is within an active loop region and triggers a seek if the end is reached.
    /// Called periodically by the PlaybackService UI update timer.
    /// </summary>
    /// <param name="currentPosition">The current playback position.</param>
    /// <param name="totalDuration">The total duration of the song.</param>
    internal void CheckForLoopSeek(TimeSpan currentPosition, TimeSpan totalDuration)
    {
        // Ensure we have a song, it has a saved loop, and the loop is active
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;

            // Ensure loop end is after loop start and valid within total time
            if (loop.End > loop.Start && loop.End <= totalDuration)
            {
                // Check if current position is at or past the loop end
                // Using a small tolerance (e.g., 50ms) to trigger seek slightly before the exact end,
                // but ensure it's not extremely close to the *total* song duration.
                TimeSpan seekThreshold = loop.End - TimeSpan.FromMilliseconds(50);
                if (currentPosition >= seekThreshold && currentPosition < totalDuration - TimeSpan.FromMilliseconds(200))
                {
                    Debug.WriteLine($"[LoopHandler] Loop active & end reached ({currentPosition:mm\\:ss\\.ff} >= {seekThreshold:mm\\:ss\\.ff}) within file ({totalDuration:mm\\:ss\\.ff}). Requesting seek to loop start: {loop.Start:mm\\:ss\\.ff}");
                    // Request seek back to the loop start via the PlaybackService
                    // This call will come back into PlaybackService.Seek, which will use GetAdjustedSeekPosition,
                    // but since the target is *exactly* loop.Start, GetAdjustedSeekPosition should return loop.Start.
                    _playbackService.Seek(loop.Start);
                    // Note: The Seek method itself has a tolerance to prevent seeking if already very close.
                    // If currentPosition is already at or very near loop.Start (e.g., due to seek tolerance issues),
                    // this check might not trigger a redundant seek.
                }
                // If currentPosition is >= loop.End but also very close to totalDuration,
                // we let the natural end-of-file event trigger (handled by PlaybackService).
            }
            else if (_currentSong.IsLoopActive)
            {
                Debug.WriteLine($"[LoopHandler] Loop active for {_currentSong.Title} but invalid region ({loop.Start:mm\\:ss\\.ff} - {loop.End:mm\\:ss\\.ff}). Loop will not function.");
            }
        }
    }

    /// <summary>
    /// Adjusts a requested seek position based on the currently active loop region.
    /// Called by PlaybackService before performing a seek.
    /// </summary>
    /// <param name="requestedPosition">The position requested by the caller (e.g., UI slider, previous/next logic).</param>
    /// <param name="totalDuration">The total duration of the song.</param>
    /// <returns>The adjusted position, potentially snapped to the loop start.</returns>
    internal TimeSpan GetAdjustedSeekPosition(TimeSpan requestedPosition, TimeSpan totalDuration)
    {
        TimeSpan targetPosition = requestedPosition;

        // Apply loop region constraints if an active loop is defined for the current song.
        // If seeking *into* an active loop from *outside* its start or after its end, snap to start.
        // If seeking *within* an active loop, allow it.
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;
            Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Active loop detected [{loop.Start:mm\\:ss\\.ff}-{loop.End:mm\\:ss\\.ff}). Requested: {requestedPosition:mm\\:ss\\.ff}");

            // Ensure loop end is after loop start and valid within total time
            if (loop.End > loop.Start && loop.End <= totalDuration)
            {
                // If the target position is outside the loop's bounds [loop.Start, loop.End),
                // snap the target position to the loop's start time.
                if (targetPosition < loop.Start || targetPosition >= loop.End)
                {
                    Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Target {targetPosition:mm\\:ss\\.ff} is outside loop bounds. Snapping to loop start: {loop.Start:mm\\:ss\\.ff}.");
                    targetPosition = loop.Start;
                }
                // If targetPosition is within [loop.Start, loop.End), allow normal seek within the loop.
                else
                {
                    Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Target {targetPosition:mm\\:ss\\.ff} is within loop bounds. Allowing seek.");
                }
            }
            else if (_currentSong.IsLoopActive)
            {
                Debug.WriteLine($"[LoopHandler] GetAdjustedSeekPosition: Loop active but invalid region ({loop.Start:mm\\:ss\\.ff} - {loop.End:mm\\:ss\\.ff}). Not applying loop seek constraints.");
            }
        }
        else
        {
            Debug.WriteLine("[LoopHandler] GetAdjustedSeekPosition: No active loop. No adjustment needed.");
        }

        return targetPosition;
    }

    /// <summary>
    /// Determines the initial playback position when a new song is loaded.
    /// Returns the loop start if a loop is active, otherwise returns TimeSpan.Zero.
    /// Called by PlaybackService.Play().
    /// </summary>
    /// <param name="totalDuration">The total duration of the song.</param>
    /// <returns>The initial playback position.</returns>
    internal TimeSpan GetInitialPlaybackPosition(TimeSpan totalDuration)
    {
        if (_currentSong?.SavedLoop != null && _currentSong.IsLoopActive)
        {
            var loop = _currentSong.SavedLoop;
            // Ensure loop start is valid before returning it
            if (loop.Start >= TimeSpan.Zero && loop.Start < totalDuration)
            {
                Debug.WriteLine($"[LoopHandler] GetInitialPlaybackPosition: Active loop found. Starting at loop start: {loop.Start:mm\\:ss\\.ff}");
                return loop.Start;
            }
            else
            {
                Debug.WriteLine($"[LoopHandler] GetInitialPlaybackPosition: Active loop found, but loop start is invalid ({loop.Start >= totalDuration}). Starting from beginning.");
                return TimeSpan.Zero;
            }
        }
        Debug.WriteLine("[LoopHandler] GetInitialPlaybackPosition: No active loop. Starting from beginning.");
        return TimeSpan.Zero; // Start from the beginning if no active loop
    }


    public void Dispose()
    {
        Debug.WriteLine("[LoopHandler] Dispose() called.");
        // This class doesn't currently hold any resources that need explicit disposal.
        // Nullifying the song reference for cleanliness.
        _currentSong = null;
        Debug.WriteLine("[LoopHandler] Dispose() completed.");
    }

    // Finalizer not strictly needed as no unmanaged resources are held,
    // but included for consistency if needed later.
    ~PlaybackLoopHandler()
    {
        Debug.WriteLine("[LoopHandler] Finalizer called.");
        Dispose(false);
        Debug.WriteLine("[LoopHandler] Finalizer completed.");
    }
    // Protected virtual Dispose is standard pattern, though not strictly needed if no unmanaged resources
    protected virtual void Dispose(bool disposing)
    {
        // No specific managed or unmanaged resources to free here.
    }
}
</file>

<file path="Source\Services\Playback\PlaybackService.cs">
using Avalonia.Threading;
using NAudio.Wave;
using Sonorize.Models;
using Sonorize.ViewModels;
using System.Diagnostics;
using System.Threading;
using System;
using System.IO;

namespace Sonorize.Services;

public enum PlaybackStateStatus { Stopped, Playing, Paused }

public class PlaybackService : ViewModelBase, IDisposable
{
    private Song? _currentSong;
    public Song? CurrentSong
    {
        get => _currentSong;
        private set
        {
            if (SetProperty(ref _currentSong, value))
            {
                Debug.WriteLine($"[PlaybackService] CurrentSong property set to: {value?.Title ?? "null"}");
                OnPropertyChanged(nameof(HasCurrentSong));
                CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                IsPlaying = false;
                CurrentPosition = TimeSpan.Zero;
                CurrentSongDuration = TimeSpan.Zero;
                StopUiUpdateTimer();

                // Update the LoopHandler when the current song changes
                _loopHandler.UpdateCurrentSong(value);
            }
        }
    }

    public bool HasCurrentSong => CurrentSong != null;

    private bool _isPlaying;
    public bool IsPlaying
    {
        get => _isPlaying;
        private set => SetProperty(ref _isPlaying, value);
    }

    private PlaybackStateStatus _currentPlaybackStatus = PlaybackStateStatus.Stopped;
    public PlaybackStateStatus CurrentPlaybackStatus
    {
        get => _currentPlaybackStatus;
        private set => SetProperty(ref _currentPlaybackStatus, value);
    }

    private TimeSpan _currentPosition;
    public TimeSpan CurrentPosition
    {
        get => _currentPosition;
        private set
        {
            if (SetProperty(ref _currentPosition, value))
            {
                OnPropertyChanged(nameof(CurrentPositionSeconds));
            }
        }
    }
    public double CurrentPositionSeconds => CurrentPosition.TotalSeconds;

    private TimeSpan _currentSongDuration;
    public TimeSpan CurrentSongDuration
    {
        get => _currentSongDuration;
        private set
        {
            if (SetProperty(ref _currentSongDuration, value))
            {
                OnPropertyChanged(nameof(CurrentSongDurationSeconds));
            }
        }
    }
    public double CurrentSongDurationSeconds => CurrentSongDuration.TotalSeconds > 0 ? CurrentSongDuration.TotalSeconds : 1.0;

    private NAudioPlaybackEngine? _playbackEngine;
    private Timer? uiUpdateTimer;
    private readonly PlaybackLoopHandler _loopHandler; // Instance of the new loop handler
    private readonly ScrobblingService _scrobblingService;


    private volatile bool _explicitStopRequested = false;

    private float _playbackRate = 1.0f;
    public float PlaybackRate
    {
        get => _playbackRate;
        set
        {
            if (SetProperty(ref _playbackRate, value))
            {
                if (_playbackEngine != null) _playbackEngine.PlaybackRate = value;
            }
        }
    }

    private float _pitchSemitones = 0f;
    public float PitchSemitones
    {
        get => _pitchSemitones;
        set
        {
            if (SetProperty(ref _pitchSemitones, value))
            {
                if (_playbackEngine != null) _playbackEngine.PitchSemitones = value;
            }
        }
    }

    public event EventHandler? PlaybackEndedNaturally;

    public PlaybackService(ScrobblingService scrobblingService)
    {
        Debug.WriteLine("[PlaybackService] Constructor called.");
        _scrobblingService = scrobblingService ?? throw new ArgumentNullException(nameof(scrobblingService));
        uiUpdateTimer = new Timer(UpdateUiCallback, null, Timeout.Infinite, Timeout.Infinite);
        _loopHandler = new PlaybackLoopHandler(this); // Initialize the loop handler, injecting this service
    }

    private void UpdateUiCallback(object? state)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            if (_playbackEngine != null && _playbackEngine.CurrentPlaybackStatus == PlaybackStateStatus.Playing && CurrentSong != null)
            {
                TimeSpan currentAudioTime = TimeSpan.Zero;
                TimeSpan songDuration = TimeSpan.Zero;

                try
                {
                    currentAudioTime = _playbackEngine.CurrentPosition;
                    songDuration = _playbackEngine.CurrentSongDuration; // Get duration from engine
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"[PlaybackService] Error getting Engine.CurrentPosition/Duration in timer callback: {ex.Message}. Stopping timer.");
                    StopUiUpdateTimer();
                    return;
                }

                this.CurrentPosition = currentAudioTime;
                this.CurrentSongDuration = songDuration; // Keep VM duration in sync with engine

                // Delegate loop checking to the LoopHandler
                _loopHandler.CheckForLoopSeek(currentAudioTime, songDuration);
            }
            else
            {
                if (_playbackEngine == null || _playbackEngine.CurrentPlaybackStatus != PlaybackStateStatus.Playing)
                {
                    Debug.WriteLine($"[PlaybackService] Timer callback found engine state is not Playing ({_playbackEngine?.CurrentPlaybackStatus}). Stopping timer.");
                    StopUiUpdateTimer();
                }
            }
        });
    }

    private async void TryScrobbleSong(Song? song, TimeSpan playedPosition)
    {
        // Use ScrobblingService to check conditions based on current settings
        if (_scrobblingService.ShouldScrobble(song, playedPosition))
        {
            await _scrobblingService.ScrobbleAsync(song, DateTime.UtcNow);
        }
    }

    public void Play(Song song)
    {
        Debug.WriteLine($"[PlaybackService] Play requested for: {(song?.Title ?? "null song")}");

        Song? oldSong = CurrentSong;
        TimeSpan oldSongPlaybackPosition = _playbackEngine?.CurrentPosition ?? TimeSpan.Zero;

        if (song == null || string.IsNullOrEmpty(song.FilePath) || !File.Exists(song.FilePath))
        {
            Debug.WriteLine("[PlaybackService] Play called with null/invalid/missing file song. Stopping.");
            Stop();
            return;
        }

        if (_playbackEngine != null)
        {
            _playbackEngine.Stop();
            _playbackEngine.PlaybackStopped -= OnEnginePlaybackStopped;
            _playbackEngine.Dispose();
            _playbackEngine = null;
            Debug.WriteLine("[PlaybackService] Disposed existing playback engine.");
        }

        CurrentSong = song;
        _explicitStopRequested = false;

        try
        {
            _playbackEngine = new NAudioPlaybackEngine();
            _playbackEngine.PlaybackStopped += OnEnginePlaybackStopped;

            _playbackEngine.PlaybackRate = PlaybackRate;
            _playbackEngine.PitchSemitones = PitchSemitones;

            _playbackEngine.Load(song.FilePath);

            CurrentSongDuration = _playbackEngine.CurrentSongDuration;
            this.CurrentPosition = TimeSpan.Zero;

            TimeSpan startPosition = _loopHandler.GetInitialPlaybackPosition(_playbackEngine.CurrentSongDuration);
            if (startPosition != TimeSpan.Zero)
            {
                _playbackEngine.Seek(startPosition);
                this.CurrentPosition = _playbackEngine.CurrentPosition;
            }

            _playbackEngine.Play();

            IsPlaying = true;
            CurrentPlaybackStatus = PlaybackStateStatus.Playing;
            StartUiUpdateTimer();
            Debug.WriteLine($"[PlaybackService] Playback started for: {CurrentSong.Title}. State: {CurrentPlaybackStatus}");

            _ = _scrobblingService.UpdateNowPlayingAsync(CurrentSong);

        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[PlaybackService] CRITICAL ERROR during playback initiation for {Path.GetFileName(song.FilePath)}: {ex.ToString()}");
            Stop();
        }
    }

    public void Pause()
    {
        Debug.WriteLine($"[PlaybackService] Pause requested. Current state: {CurrentPlaybackStatus}");
        if (_playbackEngine != null && IsPlaying)
        {
            _playbackEngine.Pause();
            IsPlaying = false;
            CurrentPlaybackStatus = PlaybackStateStatus.Paused;
            StopUiUpdateTimer();
        }
    }

    public void Resume()
    {
        Debug.WriteLine($"[PlaybackService] Resume requested. Current Status: {CurrentPlaybackStatus}, HasSong: {HasCurrentSong}");

        if (CurrentSong == null)
        {
            Debug.WriteLine("[PlaybackService] Resume requested but no CurrentSong is set. Cannot resume.");
            return;
        }

        if (_playbackEngine != null && CurrentPlaybackStatus == PlaybackStateStatus.Paused)
        {
            Debug.WriteLine("[PlaybackService] Resume requested from Paused state. Resuming engine.");
            _playbackEngine.Play();
            IsPlaying = true;
            CurrentPlaybackStatus = PlaybackStateStatus.Playing;
            StartUiUpdateTimer();
            _ = _scrobblingService.UpdateNowPlayingAsync(CurrentSong);
        }
        else if (_playbackEngine != null && CurrentPlaybackStatus == PlaybackStateStatus.Stopped)
        {
            Debug.WriteLine("[PlaybackService] Resume requested from Stopped state. Re-playing current song via engine.");
            Play(CurrentSong);
        }
        else
        {
            Debug.WriteLine($"[PlaybackService] Resume requested but conditions not met. Current Status: {CurrentPlaybackStatus}. Doing nothing.");
        }
    }

    public void Stop()
    {
        Debug.WriteLine("[PlaybackService] Public Stop() called.");
        _explicitStopRequested = true;
        if (_playbackEngine != null)
        {
            _playbackEngine.Stop();
        }
        else
        {
            Song? songToClear = CurrentSong;
            TimeSpan lastKnownPosition = CurrentPosition;

            IsPlaying = false;
            CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
            this.CurrentPosition = TimeSpan.Zero;
            CurrentSongDuration = TimeSpan.Zero;
            CurrentSong = null;
            _explicitStopRequested = false;

            TryScrobbleSong(songToClear, lastKnownPosition);
        }
    }

    public void Seek(TimeSpan requestedPosition)
    {
        if (_playbackEngine == null || CurrentSong == null)
        {
            Debug.WriteLine($"[PlaybackService] Seek ignored: No active engine or current song. Engine: {_playbackEngine != null}, Song: {CurrentSong != null}");
            return;
        }

        TimeSpan targetPosition = _loopHandler.GetAdjustedSeekPosition(requestedPosition, _playbackEngine.CurrentSongDuration);

        var totalMs = _playbackEngine.CurrentSongDuration.TotalMilliseconds;
        var seekMarginMs = totalMs > 200 ? 100 : (totalMs > 0 ? Math.Min(totalMs / 2, 50) : 0);
        var maxSeekablePosition = TimeSpan.FromMilliseconds(totalMs - seekMarginMs);
        if (maxSeekablePosition < TimeSpan.Zero) maxSeekablePosition = TimeSpan.Zero;

        targetPosition = TimeSpan.FromSeconds(Math.Clamp(targetPosition.TotalSeconds, 0, maxSeekablePosition.TotalSeconds));

        double positionToleranceSeconds = 0.3;

        try
        {
            TimeSpan currentAudioTimeForToleranceCheck = _playbackEngine.CurrentPosition;
            if (Math.Abs(currentAudioTimeForToleranceCheck.TotalSeconds - targetPosition.TotalSeconds) < positionToleranceSeconds)
            {
                Debug.WriteLine($"[PlaybackService] Seek target {targetPosition:mm\\:ss\\.ff} is very close to current position {currentAudioTimeForToleranceCheck:mm\\:ss\\.ff} (within {positionToleranceSeconds}s), ignoring seek.");
                return;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[PlaybackService] Error checking current position for seek tolerance: {ex.Message}. Proceeding with seek.");
        }

        Debug.WriteLine($"[PlaybackService] Seeking engine to: {targetPosition:mm\\:ss\\.ff}");
        try
        {
            _playbackEngine.Seek(targetPosition);
            this.CurrentPosition = _playbackEngine.CurrentPosition;
            Debug.WriteLine($"[PlaybackService] Seek executed. Engine Time after seek: {_playbackEngine.CurrentPosition:mm\\:ss\\.ff}. VM Position: {this.CurrentPosition:mm\\:ss\\.ff}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[PlaybackService] CRITICAL Error during Engine Seek to {targetPosition:mm\\:ss\\.ff}: {ex.Message}");
            if (_playbackEngine != null)
            {
                try { this.CurrentPosition = _playbackEngine.CurrentPosition; }
                catch (Exception readEx) { Debug.WriteLine($"[PlaybackService] Error reading position after failed seek: {readEx.Message}"); }
            }
            else
            {
                this.CurrentPosition = TimeSpan.Zero;
            }
        }
    }

    private void OnEnginePlaybackStopped(object? sender, StoppedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() =>
        {
            Debug.WriteLine($"[PlaybackService] === OnEnginePlaybackStopped START === (UI Thread)");
            Song? songThatStopped = CurrentSong;
            TimeSpan stoppedPosition = _playbackEngine?.CurrentPosition ?? CurrentPosition;
            TimeSpan stoppedSongDuration = _playbackEngine?.CurrentSongDuration ?? CurrentSongDuration;

            StopUiUpdateTimer();

            if (e.Exception != null)
            {
                Debug.WriteLine($"[PlaybackService] Playback stopped due to error: {e.Exception.Message}. Finalizing state to Stopped.");
                IsPlaying = false;
                CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                this.CurrentPosition = TimeSpan.Zero;
                CurrentSongDuration = TimeSpan.Zero;
                CurrentSong = null;
            }
            else
            {
                bool isNearEndOfFile = stoppedPosition >= stoppedSongDuration - TimeSpan.FromMilliseconds(500);
                Debug.WriteLine($"[PlaybackService] Clean Stop. ExplicitStop: {_explicitStopRequested}. NearEnd: {isNearEndOfFile}. Pos: {stoppedPosition:mm\\:ss\\.ff}, Dur: {stoppedSongDuration:mm\\:ss\\.ff}");

                if (_explicitStopRequested)
                {
                    Debug.WriteLine("[PlaybackService] Playback stopped by explicit user/app command (event). Finalizing state to Stopped.");
                    TryScrobbleSong(songThatStopped, stoppedPosition);
                    IsPlaying = false;
                    CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                    this.CurrentPosition = TimeSpan.Zero;
                    CurrentSongDuration = TimeSpan.Zero;
                    CurrentSong = null;
                }
                else if (isNearEndOfFile)
                {
                    Debug.WriteLine("[PlaybackService] Playback stopped naturally (event). Raising PlaybackEndedNaturally event.");
                    TryScrobbleSong(songThatStopped, stoppedSongDuration);
                    this.CurrentPosition = TimeSpan.Zero;
                    IsPlaying = false;
                    CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                    PlaybackEndedNaturally?.Invoke(this, EventArgs.Empty);
                }
                else
                {
                    Debug.WriteLine("[PlaybackService] Playback interrupted (likely new song played). Scrobbling previous if conditions met.");
                    TryScrobbleSong(songThatStopped, stoppedPosition);
                    if (CurrentSong == songThatStopped)
                    {
                        IsPlaying = false;
                        CurrentPlaybackStatus = PlaybackStateStatus.Stopped;
                    }
                }
            }
            _explicitStopRequested = false;
            Debug.WriteLine($"[PlaybackService] OnEnginePlaybackStopped handler finishes. CurrentSong: {CurrentSong?.Title ?? "null"}");
        });
    }


    private void StartUiUpdateTimer()
    {
        uiUpdateTimer?.Change(TimeSpan.Zero, TimeSpan.FromMilliseconds(100));
        Debug.WriteLine("[PlaybackService] UI Update Timer Started.");
    }

    private void StopUiUpdateTimer()
    {
        uiUpdateTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        Debug.WriteLine("[PlaybackService] UI Update Timer Stopped.");
    }

    public void Dispose()
    {
        Debug.WriteLine("[PlaybackService] Dispose() called.");
        uiUpdateTimer?.Dispose();
        uiUpdateTimer = null;

        Song? songAtDispose = CurrentSong;
        TimeSpan positionAtDispose = _playbackEngine?.CurrentPosition ?? CurrentPosition;

        if (_playbackEngine != null)
        {
            _playbackEngine.PlaybackStopped -= OnEnginePlaybackStopped;
            _playbackEngine.Dispose();
            _playbackEngine = null;
            Debug.WriteLine("[PlaybackService] Disposed playback engine during service dispose.");
        }

        TryScrobbleSong(songAtDispose, positionAtDispose);


        _explicitStopRequested = false;
        CurrentSong = null;
        CurrentSongDuration = TimeSpan.Zero;
        this.CurrentPosition = TimeSpan.Zero;
        IsPlaying = false;
        CurrentPlaybackStatus = PlaybackStateStatus.Stopped;

        _loopHandler.Dispose();

        GC.SuppressFinalize(this);
        Debug.WriteLine("[PlaybackService] Dispose() completed.");
    }

    ~PlaybackService()
    {
        Debug.WriteLine("[PlaybackService] Finalizer called for PlaybackService.");
        Dispose();
        Debug.WriteLine("[PlaybackService] Finalizer completed for PlaybackService.");
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\ArtistAlbumCollectionManager.cs">
using Avalonia.Media.Imaging;
using Sonorize.Models;
using Sonorize.Services;
using Sonorize.Utils; // For AlbumArtistTupleComparer
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Sonorize.ViewModels.LibraryManagement;

public class ArtistAlbumCollectionManager
{
    private readonly ObservableCollection<ArtistViewModel> _artistsCollection;
    private readonly ObservableCollection<AlbumViewModel> _albumsCollection;
    private readonly MusicLibraryService _musicLibraryService; // For default thumbnail

    public ArtistAlbumCollectionManager(
        ObservableCollection<ArtistViewModel> artistsCollection,
        ObservableCollection<AlbumViewModel> albumsCollection,
        MusicLibraryService musicLibraryService)
    {
        _artistsCollection = artistsCollection ?? throw new ArgumentNullException(nameof(artistsCollection));
        _albumsCollection = albumsCollection ?? throw new ArgumentNullException(nameof(albumsCollection));
        _musicLibraryService = musicLibraryService ?? throw new ArgumentNullException(nameof(musicLibraryService));
    }

    public void PopulateCollections(IEnumerable<Song> allSongs)
    {
        _artistsCollection.Clear();
        var uniqueArtistNames = allSongs
            .Where(s => !string.IsNullOrWhiteSpace(s.Artist))
            .Select(s => s.Artist!)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(a => a, StringComparer.OrdinalIgnoreCase)
            .ToList();

        Bitmap? defaultSongThumbnail = _musicLibraryService.GetDefaultThumbnail();
        foreach (string? artistName in uniqueArtistNames)
        {
            Bitmap? repThumb = allSongs.FirstOrDefault(s =>
                                   (s.Artist?.Equals(artistName, StringComparison.OrdinalIgnoreCase) ?? false) &&
                                   s.Thumbnail != null && s.Thumbnail != defaultSongThumbnail)?.Thumbnail
                               ?? defaultSongThumbnail;
            _artistsCollection.Add(new ArtistViewModel { Name = artistName, Thumbnail = repThumb });
        }

        _albumsCollection.Clear();
        Func<Song, (string Album, string Artist)> keySelector = s => (s.Album?.Trim() ?? string.Empty, s.Artist?.Trim() ?? string.Empty);
        var uniqueAlbumsData = allSongs
            .Where(s => !string.IsNullOrWhiteSpace(s.Album) && !string.IsNullOrWhiteSpace(s.Artist))
            .GroupBy(keySelector, AlbumArtistTupleComparer.Instance)
            .Select(g => new
            {
                AlbumTitle = g.Key.Item1,
                ArtistName = g.Key.Item2,
                SongsInAlbum = g.ToList()
            })
            .OrderBy(a => a.ArtistName, StringComparer.OrdinalIgnoreCase).ThenBy(a => a.AlbumTitle, StringComparer.OrdinalIgnoreCase)
            .ToList();

        foreach (var albumData in uniqueAlbumsData)
        {
            AlbumViewModel albumVM = new()
            {
                Title = albumData.AlbumTitle,
                Artist = albumData.ArtistName
            };

            List<Bitmap?> songThumbnailsForGrid = new(new Bitmap?[4]);
            List<Bitmap?> distinctSongThumbs = albumData.SongsInAlbum
                                                 .Select(s => s.Thumbnail ?? defaultSongThumbnail)
                                                 .Distinct()
                                                 .Take(4)
                                                 .ToList();

            for (int i = 0; i < distinctSongThumbs.Count; i++)
            {
                songThumbnailsForGrid[i] = distinctSongThumbs[i];
            }

            albumVM.SongThumbnailsForGrid = songThumbnailsForGrid;
            albumVM.RepresentativeThumbnail = songThumbnailsForGrid.FirstOrDefault(t => t != null) ?? defaultSongThumbnail;

            _albumsCollection.Add(albumVM);
        }
    }

    public void UpdateCollectionsForSongThumbnail(Song updatedSong, IEnumerable<Song> allSongs)
    {
        // Update ArtistViewModel
        var artistVM = _artistsCollection.FirstOrDefault(a => a.Name == updatedSong.Artist);
        if (artistVM != null)
        {
            var firstSongOfArtistWithThumbnail = allSongs.FirstOrDefault(s =>
                (s.Artist?.Equals(artistVM.Name, StringComparison.OrdinalIgnoreCase) ?? false) && s.Thumbnail != _musicLibraryService.GetDefaultThumbnail());

            Bitmap? newArtistThumbnail = (firstSongOfArtistWithThumbnail?.Thumbnail ?? _musicLibraryService.GetDefaultThumbnail());
            if (artistVM.Thumbnail != newArtistThumbnail) // Only update if changed to avoid needless notifications
            {
                artistVM.Thumbnail = newArtistThumbnail;
            }
        }

        // Update AlbumViewModel
        var albumVM = _albumsCollection.FirstOrDefault(al => al.Title == updatedSong.Album && al.Artist == updatedSong.Artist);
        if (albumVM != null)
        {
            var songsInAlbum = allSongs.Where(s => (s.Album?.Equals(albumVM.Title, StringComparison.OrdinalIgnoreCase) ?? false) &&
                                                    (s.Artist?.Equals(albumVM.Artist, StringComparison.OrdinalIgnoreCase) ?? false))
                                         .ToList();

            Bitmap? defaultSongThumbnail = _musicLibraryService.GetDefaultThumbnail();
            List<Bitmap?> newSongThumbnailsForGrid = new List<Bitmap?>(new Bitmap?[4]);
            List<Bitmap?> distinctSongThumbs = songsInAlbum
                                                 .Select(s => s.Thumbnail ?? defaultSongThumbnail)
                                                 .Distinct()
                                                 .Take(4)
                                                 .ToList();

            for (int i = 0; i < distinctSongThumbs.Count; i++)
            {
                newSongThumbnailsForGrid[i] = distinctSongThumbs[i];
            }

            // Check if the grid thumbnails actually changed before assigning to avoid unnecessary UI updates.
            if (!albumVM.SongThumbnailsForGrid.SequenceEqual(newSongThumbnailsForGrid))
            {
                albumVM.SongThumbnailsForGrid = newSongThumbnailsForGrid;
            }

            Bitmap? newRepresentativeThumbnail = newSongThumbnailsForGrid.FirstOrDefault(t => t != null) ?? defaultSongThumbnail;
            if (albumVM.RepresentativeThumbnail != newRepresentativeThumbnail)
            {
                albumVM.RepresentativeThumbnail = newRepresentativeThumbnail;
            }
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\LibraryDataOrchestrator.cs">
using Avalonia.Threading;
using Sonorize.Models;
using Sonorize.Services;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel; // Required for ObservableCollection
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Sonorize.ViewModels.LibraryManagement;

public class LibraryDataOrchestrator
{
    private readonly MusicLibraryService _musicLibraryService;
    private readonly ArtistAlbumCollectionManager _artistAlbumManager;
    private readonly SettingsService _settingsService;

    public LibraryDataOrchestrator(
        MusicLibraryService musicLibraryService,
        ArtistAlbumCollectionManager artistAlbumManager,
        SettingsService settingsService)
    {
        _musicLibraryService = musicLibraryService ?? throw new ArgumentNullException(nameof(musicLibraryService));
        _artistAlbumManager = artistAlbumManager ?? throw new ArgumentNullException(nameof(artistAlbumManager));
        _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));
    }

    public async Task<List<Song>> LoadAndProcessLibraryDataAsync(
        Action<string> statusUpdateCallback,
        Action<Song> songAddedToRawListCallback)
    {
        var rawSongs = new List<Song>(); // Temporary list to gather songs from MusicLibraryService

        AppSettings settings = _settingsService.LoadSettings();
        if (!settings.MusicDirectories.Any())
        {
            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback("No music directories configured."));
            return rawSongs; // Return empty list
        }

        try
        {
            // Phase 1: Load raw song metadata and thumbnails (thumbnails load in background via MusicLibraryService)
            await _musicLibraryService.LoadMusicFromDirectoriesAsync(
                settings.MusicDirectories,
                song =>
                {
                    // This callback is invoked on UI thread by MusicLibraryService
                    rawSongs.Add(song);
                    songAddedToRawListCallback(song); // Notify caller (LibraryViewModel) to add to its _allSongs
                },
                status => Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback(status)) // Pass status updates
            );

            // Phase 2: Populate Artist and Album collections using the fully gathered rawSongs list
            // This is done after all songs are initially processed by MusicLibraryService.
            // The ArtistAlbumCollectionManager operates on the collections passed to its constructor,
            // so this call effectively updates the Artists and Albums collections in LibraryViewModel.
            // Ensure this runs on UI thread if ArtistAlbumCollectionManager modifies UI-bound collections directly.
            // ArtistAlbumCollectionManager is designed to populate ObservableCollections, which should be UI thread safe if modified there.
            await Dispatcher.UIThread.InvokeAsync(() =>
            {
                _artistAlbumManager.PopulateCollections(rawSongs);
            });

            return rawSongs; // Return the populated list of all songs
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[LibraryDataOrchestrator] Error loading and processing library data: {ex}");
            await Dispatcher.UIThread.InvokeAsync(() => statusUpdateCallback("Error loading music library."));
            return new List<Song>(); // Return empty list on error
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\LibraryStatusTextGenerator.cs">
using Sonorize.Models;
using Sonorize.Services; // For AppSettings in case it's needed indirectly
using System.Linq;

namespace Sonorize.ViewModels.LibraryManagement;

public class LibraryStatusTextGenerator
{
    public string GenerateStatusText(
        bool isLoadingLibrary,
        int allSongsCount,
        int filteredSongsCount,
        ArtistViewModel? selectedArtist,
        AlbumViewModel? selectedAlbum,
        string? searchQuery,
        SettingsService settingsService) // Pass SettingsService to check for configured directories
    {
        if (isLoadingLibrary)
        {
            // During loading, LibraryViewModel's LibraryStatusText is updated by MusicLibraryService callbacks.
            // This generator is primarily for post-loading or idle states.
            // However, if called during loading, we might return a generic loading message
            // or expect the caller (LibraryViewModel) to handle this case.
            // For now, assume this is called when not actively in the middle of the LoadMusicFromDirectoriesAsync song processing loop.
            return "Loading library..."; // Or whatever the current LibraryStatusText is if passed in.
        }

        if (allSongsCount == 0)
        {
            AppSettings settings = settingsService.LoadSettings();
            if (!settings.MusicDirectories.Any())
            {
                return "Library empty. Add directories via File menu.";
            }
            else
            {
                return "No songs found in configured directories.";
            }
        }

        // Album selection takes precedence for status text
        if (selectedAlbum?.Title != null && selectedAlbum.Artist != null)
        {
            return $"Showing songs from {selectedAlbum.Title} by {selectedAlbum.Artist}: {filteredSongsCount} of {allSongsCount} total songs.";
        }
        // Then artist selection
        else if (selectedArtist?.Name != null)
        {
            return $"Showing songs by {selectedArtist.Name}: {filteredSongsCount} of {allSongsCount} total songs.";
        }
        else if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            return $"{filteredSongsCount} of {allSongsCount} songs matching search.";
        }
        else // No specific view, no search query - showing all songs
        {
            return $"{allSongsCount} songs in library.";
        }
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\SongFilteringService.cs">
using Sonorize.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Sonorize.ViewModels.LibraryManagement;

public class SongFilteringService
{
    public IEnumerable<Song> ApplyFilter(
        IEnumerable<Song> allSongs,
        string? searchQuery,
        ArtistViewModel? selectedArtist,
        AlbumViewModel? selectedAlbum)
    {
        IEnumerable<Song> songsToFilter = allSongs;

        // Priority:
        // 1. If an album is selected, filter by album (and its artist).
        // 2. Else if an artist is selected, filter by artist.
        // 3. Else if a search query is present, filter by query.
        // 4. Else, show all songs (after ordering).

        bool specificAlbumSelected = selectedAlbum?.Title != null && selectedAlbum.Artist != null;
        bool specificArtistSelected = selectedArtist?.Name != null;

        if (specificAlbumSelected)
        {
            // When an album is selected, the searchQuery is often set to the album title.
            // We should primarily filter by the album's identity.
            songsToFilter = songsToFilter.Where(s =>
                (s.Album?.Equals(selectedAlbum!.Title, StringComparison.OrdinalIgnoreCase) ?? false) &&
                (s.Artist?.Equals(selectedAlbum!.Artist, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        else if (specificArtistSelected)
        {
            // When an artist is selected, the searchQuery is often set to the artist name.
            // Filter by the artist's identity.
            songsToFilter = songsToFilter.Where(s =>
                s.Artist?.Equals(selectedArtist!.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        else if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            string query = searchQuery.ToLowerInvariant().Trim();
            songsToFilter = songsToFilter.Where(s =>
                (s.Title?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false) ||
                (s.Artist?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false) ||
                (s.Album?.ToLowerInvariant().Contains(query, StringComparison.InvariantCultureIgnoreCase) ?? false));
        }

        return songsToFilter.OrderBy(s => s.Title, StringComparer.OrdinalIgnoreCase);
    }
}
</file>

<file path="Source\ViewModels\LibraryManagement\TrackNavigationManager.cs">
using Sonorize.Models;
using System;
using System.Collections.ObjectModel; // For ObservableCollection
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows.Input;

namespace Sonorize.ViewModels.LibraryManagement;

public class TrackNavigationManager : ViewModelBase // Inherit for RelayCommand's RaiseCanExecuteChanged if needed
{
    private readonly ObservableCollection<Song> _filteredSongs;
    private Song? _selectedSong;

    public Song? SelectedSong
    {
        get => _selectedSong;
        set
        {
            // This setter is crucial. It's what the LibraryViewModel will call.
            // Or, LibraryViewModel could expose its SelectedSong and FilteredSongs
            // and this manager could observe them. For direct control, LibraryViewModel calls this.
            if (SetProperty(ref _selectedSong, value))
            {
                RaiseCanExecuteChangedForAllCommands();
            }
        }
    }

    public ICommand PreviousTrackCommand { get; }
    public ICommand NextTrackCommand { get; }

    public TrackNavigationManager(ObservableCollection<Song> filteredSongs)
    {
        _filteredSongs = filteredSongs ?? throw new ArgumentNullException(nameof(filteredSongs));
        _filteredSongs.CollectionChanged += (s, e) => RaiseCanExecuteChangedForAllCommands();

        PreviousTrackCommand = new RelayCommand(ExecutePreviousTrack, CanExecutePreviousTrack);
        NextTrackCommand = new RelayCommand(ExecuteNextTrack, CanExecuteNextTrack);
    }

    // This method will be called by LibraryViewModel when its SelectedSong changes
    public void UpdateSelectedSong(Song? newSelectedSong)
    {
        if (_selectedSong != newSelectedSong)
        {
            _selectedSong = newSelectedSong; // Update internal state
            RaiseCanExecuteChangedForAllCommands(); // Update command states
        }
    }


    private void ExecutePreviousTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        if (currentIndex > 0)
        {
            SelectedSong = _filteredSongs[currentIndex - 1]; // This will trigger property changed & command updates
            Debug.WriteLine($"[TrackNavManager] Moved to previous track: {SelectedSong.Title}");
        }
        else
        {
            Debug.WriteLine("[TrackNavManager] Already at the first track.");
        }
    }

    private bool CanExecutePreviousTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return false;
        return _filteredSongs.IndexOf(_selectedSong) > 0;
    }

    private void ExecuteNextTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        if (currentIndex < _filteredSongs.Count - 1 && currentIndex != -1)
        {
            SelectedSong = _filteredSongs[currentIndex + 1]; // This will trigger property changed & command updates
            Debug.WriteLine($"[TrackNavManager] Moved to next track: {SelectedSong.Title}");
        }
        else if (currentIndex != -1)
        {
            Debug.WriteLine("[TrackNavManager] Already at the last track.");
        }
        else
        {
             Debug.WriteLine("[TrackNavManager] Selected song not found in filtered list.");
        }
    }

    private bool CanExecuteNextTrack(object? parameter)
    {
        if (_selectedSong == null || !_filteredSongs.Any()) return false;
        int currentIndex = _filteredSongs.IndexOf(_selectedSong);
        return currentIndex != -1 && currentIndex < _filteredSongs.Count - 1;
    }

    private void RaiseCanExecuteChangedForAllCommands()
    {
        (PreviousTrackCommand as RelayCommand)?.RaiseCanExecuteChanged();
        (NextTrackCommand as RelayCommand)?.RaiseCanExecuteChanged();
    }

    // Optional: Expose an event if LibraryViewModel needs to react to selection changes from this manager
    // public event Action<Song?>? ManagedSelectionChanged;
}
</file>

<file path="Source\Views\MainWindowControls\AdvancedPlaybackPanelControls.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // For Thumb
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Styling;
using Sonorize.Controls;
using Sonorize.Converters;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // For MainWindowViewModel, LoopEditorViewModel

namespace Sonorize.Views.MainWindowControls;

public static class AdvancedPlaybackPanelControls
{
    public static Border Create(ThemeColors theme)
    {
        var panelRoot = new Border
        {
            Background = theme.B_SlightlyLighterBackground,
            Padding = new Thickness(10),
            BorderBrush = theme.B_AccentColor,
            BorderThickness = new Thickness(0, 1, 0, 1),
            MinHeight = 180,
            ClipToBounds = true
        };
        var mainStack = new StackPanel { Spacing = 10 };

        // Speed and Pitch Controls
        var speedPitchGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto,15,Auto,*,Auto"), Margin = new Thickness(0, 0, 0, 5) };
        var speedLabel = new TextBlock { Text = "Tempo:", VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_TextColor, Margin = new Thickness(0, 0, 5, 0) };
        var speedSlider = new Slider { Minimum = 0.5, Maximum = 2.0, SmallChange = 0.05, LargeChange = 0.25, TickFrequency = 0.25, Foreground = theme.B_AccentColor, Background = theme.B_SecondaryTextColor };
        speedSlider.Styles.Add(new Style(s => s.Is<Thumb>()) { Setters = { new Setter(TemplatedControl.BackgroundProperty, theme.B_AccentColor) } });
        speedSlider.Bind(Slider.ValueProperty, new Binding("Playback.PlaybackSpeed", BindingMode.TwoWay));
        var speedDisplay = new TextBlock { VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 0), Foreground = theme.B_TextColor, MinWidth = 35, HorizontalAlignment = HorizontalAlignment.Right };
        speedDisplay.Bind(TextBlock.TextProperty, new Binding("Playback.PlaybackSpeedDisplay"));

        var pitchLabel = new TextBlock { Text = "Pitch:", VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_TextColor, Margin = new Thickness(0, 0, 5, 0) };
        var pitchSlider = new Slider { Minimum = -4, Maximum = 4, SmallChange = 0.1, LargeChange = 0.5, TickFrequency = 0.5, Foreground = theme.B_AccentColor, Background = theme.B_SecondaryTextColor };
        pitchSlider.Styles.Add(new Style(s => s.Is<Thumb>()) { Setters = { new Setter(TemplatedControl.BackgroundProperty, theme.B_AccentColor) } });
        pitchSlider.Bind(Slider.ValueProperty, new Binding("Playback.PlaybackPitch", BindingMode.TwoWay));
        var pitchDisplay = new TextBlock { VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(5, 0), Foreground = theme.B_TextColor, MinWidth = 45, HorizontalAlignment = HorizontalAlignment.Right };
        pitchDisplay.Bind(TextBlock.TextProperty, new Binding("Playback.PlaybackPitchDisplay"));

        Grid.SetColumn(speedLabel, 0); Grid.SetColumn(speedSlider, 1); Grid.SetColumn(speedDisplay, 2);
        Grid.SetColumn(pitchLabel, 4); Grid.SetColumn(pitchSlider, 5); Grid.SetColumn(pitchDisplay, 6);
        speedPitchGrid.Children.Add(speedLabel); speedPitchGrid.Children.Add(speedSlider); speedPitchGrid.Children.Add(speedDisplay);
        speedPitchGrid.Children.Add(pitchLabel); speedPitchGrid.Children.Add(pitchSlider); speedPitchGrid.Children.Add(pitchDisplay);
        mainStack.Children.Add(speedPitchGrid);

        // Waveform Display
        Color accentColorForLoopRegion = (theme.B_AccentColor as ISolidColorBrush)?.Color ?? Colors.Orange;
        var waveformDisplay = new WaveformDisplayControl
        {
            Height = 80,
            MinHeight = 60,
            Background = theme.B_ControlBackgroundColor,
            WaveformBrush = theme.B_AccentColor,
            PositionMarkerBrush = Brushes.OrangeRed,
            LoopRegionBrush = new SolidColorBrush(accentColorForLoopRegion, 0.3)
        };
        waveformDisplay.Bind(WaveformDisplayControl.WaveformPointsProperty, new Binding("Playback.WaveformRenderData"));
        waveformDisplay.Bind(WaveformDisplayControl.CurrentPositionProperty, new Binding("Playback.CurrentPosition"));
        waveformDisplay.Bind(WaveformDisplayControl.DurationProperty, new Binding("Playback.CurrentSongDuration"));
        waveformDisplay.Bind(WaveformDisplayControl.ActiveLoopProperty, new Binding("Playback.PlaybackService.CurrentSong.SavedLoop"));
        waveformDisplay.SeekRequested += (s, time) =>
        {
            if (s is Control { DataContext: MainWindowViewModel mainWindowVM })
            {
                mainWindowVM.LoopEditor.WaveformSeekCommand.Execute(time);
            }
        };

        var waveformLoadingIndicator = new ProgressBar { IsIndeterminate = true, Height = 5, Margin = new Thickness(0, -5, 0, 0), Foreground = theme.B_AccentColor, Background = Brushes.Transparent };
        waveformLoadingIndicator.Bind(Visual.IsVisibleProperty, new Binding("Playback.IsWaveformLoading"));
        var waveformContainer = new Panel();
        waveformContainer.Children.Add(waveformDisplay); waveformContainer.Children.Add(waveformLoadingIndicator);
        mainStack.Children.Add(waveformContainer);

        // Loop Controls
        var loopControlsOuterPanel = new StackPanel { Orientation = Orientation.Vertical, Spacing = 5, Margin = new Thickness(0, 10, 0, 0) };
        var loopDefinitionLabel = new TextBlock { Text = "Define Loop:", FontSize = 12, FontWeight = FontWeight.SemiBold, Foreground = theme.B_TextColor };
        var loopActionsPanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 8, VerticalAlignment = VerticalAlignment.Center };

        var setStartBtn = new Button { Content = "A", FontSize = 12, Padding = new Thickness(10, 5), MinWidth = 40, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        setStartBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.CaptureLoopStartCandidateCommand"));
        var startDisp = new TextBlock { FontSize = 11, Margin = new Thickness(3, 0), VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_SecondaryTextColor, MinWidth = 60 };
        startDisp.Bind(TextBlock.TextProperty, new Binding("LoopEditor.NewLoopStartCandidateDisplay"));

        var setEndBtn = new Button { Content = "B", FontSize = 12, Padding = new Thickness(10, 5), MinWidth = 40, Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        setEndBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.CaptureLoopEndCandidateCommand"));
        var endDisp = new TextBlock { FontSize = 11, Margin = new Thickness(3, 0), VerticalAlignment = VerticalAlignment.Center, Foreground = theme.B_SecondaryTextColor, MinWidth = 60 };
        endDisp.Bind(TextBlock.TextProperty, new Binding("LoopEditor.NewLoopEndCandidateDisplay"));

        var saveLoopBtn = new Button { Content = "Save Loop", FontSize = 11, Padding = new Thickness(10, 5), Background = theme.B_AccentColor, Foreground = theme.B_AccentForeground };
        saveLoopBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.SaveLoopCommand"));
        saveLoopBtn.Bind(Button.IsEnabledProperty, new Binding("LoopEditor.CanSaveLoopRegion"));

        var clearLoopBtn = new Button { Content = "Clear Loop", FontSize = 11, Padding = new Thickness(10, 5), Background = theme.B_ControlBackgroundColor, Foreground = theme.B_TextColor };
        clearLoopBtn.Bind(Button.CommandProperty, new Binding("LoopEditor.ClearLoopCommand"));
        var clearLoopBinding = new Binding("PlaybackService.CurrentSong.SavedLoop") { Converter = NotNullToBooleanConverter.Instance };
        clearLoopBtn.Bind(Button.IsEnabledProperty, clearLoopBinding);

        loopActionsPanel.Children.Add(setStartBtn); loopActionsPanel.Children.Add(startDisp);
        loopActionsPanel.Children.Add(setEndBtn); loopActionsPanel.Children.Add(endDisp);
        loopActionsPanel.Children.Add(saveLoopBtn); loopActionsPanel.Children.Add(clearLoopBtn);

        var loopActiveTogglePanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 8, 0, 0), Spacing = 8, VerticalAlignment = VerticalAlignment.Center };
        var loopActiveCheckBox = new CheckBox { Content = "Activate Loop", Foreground = theme.B_TextColor, VerticalAlignment = VerticalAlignment.Center };
        loopActiveCheckBox.Bind(ToggleButton.IsCheckedProperty, new Binding("LoopEditor.IsCurrentLoopActiveUiBinding", BindingMode.TwoWay));
        var loopActiveCheckBoxIsEnabledBinding = new Binding("PlaybackService.CurrentSong.SavedLoop") { Converter = NotNullToBooleanConverter.Instance };
        loopActiveCheckBox.Bind(Control.IsEnabledProperty, loopActiveCheckBoxIsEnabledBinding); // Corrected: Control.IsEnabledProperty
        loopActiveTogglePanel.Children.Add(loopActiveCheckBox);

        loopControlsOuterPanel.Children.Add(loopDefinitionLabel);
        loopControlsOuterPanel.Children.Add(loopActionsPanel);
        loopControlsOuterPanel.Children.Add(loopActiveTogglePanel);
        mainStack.Children.Add(loopControlsOuterPanel);

        panelRoot.Child = mainStack;
        return panelRoot;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainMenu.cs">
using Avalonia.Controls;
using Avalonia.Data;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // For SongDisplayMode enum

namespace Sonorize.Views.MainWindowControls;

public static class MainMenu
{
    public static Menu Create(ThemeColors theme, Window ownerWindow)
    {
        var menu = new Menu
        {
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor
        };

        // File Menu
        var fileMenuItem = new MenuItem { Header = "_File", Foreground = theme.B_TextColor };
        var addDirectoryMenuItem = new MenuItem { Header = "_Add Music Directory...", Foreground = theme.B_TextColor };
        addDirectoryMenuItem.Bind(MenuItem.CommandProperty, new Binding("AddDirectoryAndRefreshCommand"));
        addDirectoryMenuItem.CommandParameter = ownerWindow;

        var settingsMenuItem = new MenuItem { Header = "_Settings...", Foreground = theme.B_TextColor };
        settingsMenuItem.Bind(MenuItem.CommandProperty, new Binding("OpenSettingsCommand"));
        settingsMenuItem.CommandParameter = ownerWindow;

        var exitMenuItem = new MenuItem { Header = "E_xit", Foreground = theme.B_TextColor };
        exitMenuItem.Bind(MenuItem.CommandProperty, new Binding("ExitCommand"));

        fileMenuItem.Items.Add(addDirectoryMenuItem);
        fileMenuItem.Items.Add(settingsMenuItem);
        fileMenuItem.Items.Add(new Separator());
        fileMenuItem.Items.Add(exitMenuItem);

        // View Menu
        var viewMenuItem = new MenuItem { Header = "_View", Foreground = theme.B_TextColor };

        // Library View SubMenu
        var libraryViewSubMenu = new MenuItem { Header = "Library View", Foreground = theme.B_TextColor };
        var libDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        libDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libDetailed.CommandParameter = ("Library", SongDisplayMode.Detailed);
        var libCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        libCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libCompact.CommandParameter = ("Library", SongDisplayMode.Compact);
        var libGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        libGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        libGrid.CommandParameter = ("Library", SongDisplayMode.Grid);
        libraryViewSubMenu.Items.Add(libDetailed);
        libraryViewSubMenu.Items.Add(libCompact);
        libraryViewSubMenu.Items.Add(libGrid);

        // Artists View SubMenu
        var artistsViewSubMenu = new MenuItem { Header = "Artists View", Foreground = theme.B_TextColor };
        var artDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        artDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artDetailed.CommandParameter = ("Artists", SongDisplayMode.Detailed);
        var artCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        artCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artCompact.CommandParameter = ("Artists", SongDisplayMode.Compact);
        var artGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        artGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        artGrid.CommandParameter = ("Artists", SongDisplayMode.Grid);
        artistsViewSubMenu.Items.Add(artDetailed);
        artistsViewSubMenu.Items.Add(artCompact);
        artistsViewSubMenu.Items.Add(artGrid);

        // Albums View SubMenu
        var albumsViewSubMenu = new MenuItem { Header = "Albums View", Foreground = theme.B_TextColor };
        var albDetailed = new MenuItem { Header = "Detailed", Foreground = theme.B_TextColor };
        albDetailed.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albDetailed.CommandParameter = ("Albums", SongDisplayMode.Detailed);
        var albCompact = new MenuItem { Header = "Compact", Foreground = theme.B_TextColor };
        albCompact.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albCompact.CommandParameter = ("Albums", SongDisplayMode.Compact);
        var albGrid = new MenuItem { Header = "Grid", Foreground = theme.B_TextColor };
        albGrid.Bind(MenuItem.CommandProperty, new Binding("Library.SetDisplayModeCommand"));
        albGrid.CommandParameter = ("Albums", SongDisplayMode.Grid);
        albumsViewSubMenu.Items.Add(albDetailed);
        albumsViewSubMenu.Items.Add(albCompact);
        albumsViewSubMenu.Items.Add(albGrid);

        viewMenuItem.Items.Add(libraryViewSubMenu);
        viewMenuItem.Items.Add(artistsViewSubMenu);
        viewMenuItem.Items.Add(albumsViewSubMenu);

        menu.Items.Add(fileMenuItem);
        menu.Items.Add(viewMenuItem);
        return menu;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainPlaybackControlsPanel.cs">
using System.Diagnostics; // Added for Debug
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Data;
using Avalonia.Data.Converters; // Added required using directive for FuncValueConverter
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging; // Required for BitmapInterpolationMode
using Avalonia.Styling;
using Sonorize.Converters;
using Sonorize.Models;
using Sonorize.ViewModels; // Required for RepeatMode enum

namespace Sonorize.Views.MainWindowControls;

public static class MainPlaybackControlsPanel
{
    public static Grid Create(ThemeColors theme) // Root is a Grid
    {
        // --- Playback Navigation Buttons Panel (Extracted) ---
        var combinedPlaybackButtonControlsPanel = PlaybackNavigationButtonsPanel.Create(theme);

        var toggleAdvPanelButton = new Button
        {
            Content = "+",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor, // Default color
            BorderBrush = theme.B_ControlBackgroundColor, // Default border color
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(3),
            Padding = new Thickness(8, 4),
            MinWidth = 30, // Give it a minimum size to occupy space
            FontWeight = FontWeight.Bold,
            Width = 32, // Fixed width for consistency
            Height = 32, // Fixed height for consistency
            HorizontalContentAlignment = HorizontalAlignment.Center, // Center content horizontally
            VerticalContentAlignment = VerticalAlignment.Center     // Center content vertically
        };
        // Change BorderBrush color based on IsAdvancedPanelVisible
        toggleAdvPanelButton[!Button.BorderBrushProperty] = new Binding("IsAdvancedPanelVisible")
        {
            Converter = new FuncValueConverter<bool, IBrush>(isVisible => isVisible ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        toggleAdvPanelButton[!Button.ForegroundProperty] = new Binding("IsAdvancedPanelVisible")
        {
            Converter = new FuncValueConverter<bool, IBrush>(isVisible => isVisible ? theme.B_AccentColor : theme.B_TextColor)
        };
        toggleAdvPanelButton.Bind(Button.CommandProperty, new Binding("ToggleAdvancedPanelCommand"));
        toggleAdvPanelButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));


        var rightControlsPanel = new StackPanel // Holds toggle button
        {
            Orientation = Orientation.Horizontal,
            Spacing = 5,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Right, // Align to the right within its grid cell
            Margin = new Thickness(0, 0, 10, 0) // Margin from the right edge of the grid cell
            // MinWidth/Width could be added here if needed to reserve space even when invisible
        };
        rightControlsPanel.Children.Add(toggleAdvPanelButton);

        // --- Playback Time Slider Panel (Extracted) ---
        var timeSliderGrid = PlaybackTimeSliderPanel.Create(theme);


        // --- Center Playback Controls Stack (Combined Buttons Panel + Slider) ---
        // This stack panel contains the combined button panel (now includes shuffle/loop, prev/play/next) and the time/slider grid.
        var centerPlaybackControlsStack = new StackPanel
        {
            Orientation = Orientation.Vertical,
            Margin = new Thickness(0, 5, 0, 0),
            Spacing = 8, // Space between the button row and the slider row
            HorizontalAlignment = HorizontalAlignment.Center, // Center this stack panel within its parent grid cell
            VerticalAlignment = VerticalAlignment.Center
        };
        // Add the combined button panel (now includes shuffle/loop, prev/play/next)
        centerPlaybackControlsStack.Children.Add(combinedPlaybackButtonControlsPanel);
        centerPlaybackControlsStack.Children.Add(timeSliderGrid);


        // --- Currently Playing Song Info Panel (Extracted) ---
        var songInfoPanel = SongInfoDisplayPanel.Create(theme);


        // --- Main Grid Layout (Restored Single Column Centering) ---
        // Use a single star (*) column. All children are placed in this column.
        // Their HorizontalAlignment determines their position within the column.
        // The centerPlaybackControlsStack has HorizontalAlignment.Center, ensuring it's centered
        // regardless of the width of the left (songInfoPanel) or right (rightControlsPanel) elements.
        var outerGrid = new Grid // This is the root panel
        {
            Background = theme.B_BackgroundColor,
            Margin = new Thickness(0, 5, 0, 5), // Vertical margin for the whole control
            HorizontalAlignment = HorizontalAlignment.Stretch,
            RowDefinitions = new RowDefinitions("Auto"), // Single row, height is Auto based on content
            ColumnDefinitions = new ColumnDefinitions("*") // Single column spanning the width
        };

        // Place all panels in the single column (column 0).
        // Their HorizontalAlignment will handle horizontal positioning.
        Grid.SetColumn(songInfoPanel, 0);
        Grid.SetColumn(centerPlaybackControlsStack, 0);
        Grid.SetColumn(rightControlsPanel, 0);

        // Add children in any order; their position is determined by grid layout and alignment.
        outerGrid.Children.Add(songInfoPanel);
        outerGrid.Children.Add(centerPlaybackControlsStack);
        outerGrid.Children.Add(rightControlsPanel);

        return outerGrid;
    }
}
</file>

<file path="Source\Views\MainWindowControls\MainTabViewControls.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Styling;
using Sonorize.Models;
using Sonorize.ViewModels;
using System.Diagnostics;

namespace Sonorize.Views.MainWindowControls
{
    public class MainTabViewControls
    {
        private readonly ThemeColors _theme;
        private readonly SharedViewTemplates _sharedViewTemplates; // Changed from SongListTemplates
        private ListBox? _songListBoxInstance;
        private ListBox? _artistsListBoxInstance; // Added
        private ListBox? _albumsListBoxInstance;  // Added

        public MainTabViewControls(ThemeColors theme, SharedViewTemplates sharedViewTemplates) // Changed parameter type
        {
            _theme = theme;
            _sharedViewTemplates = sharedViewTemplates;
        }

        public TabControl CreateMainTabView(out ListBox songListBox, out ListBox artistsListBox, out ListBox albumsListBox) // Added out params
        {
            var tabControl = new TabControl
            {
                Background = _theme.B_BackgroundColor,
                Margin = new Thickness(10, 5, 10, 5),
                BorderThickness = new Thickness(0),
                Padding = new Thickness(0)
            };
            tabControl.Bind(TabControl.SelectedIndexProperty, new Binding("ActiveTabIndex", BindingMode.TwoWay));

            var tabItemStyle = new Style(s => s.Is<TabItem>());
            tabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_BackgroundColor));
            tabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_SecondaryTextColor));
            tabItemStyle.Setters.Add(new Setter(TabItem.PaddingProperty, new Thickness(12, 7)));
            tabItemStyle.Setters.Add(new Setter(TabItem.FontSizeProperty, 13.0));
            tabItemStyle.Setters.Add(new Setter(TabItem.FontWeightProperty, FontWeight.SemiBold));
            tabItemStyle.Setters.Add(new Setter(TabItem.BorderThicknessProperty, new Thickness(0)));
            tabItemStyle.Setters.Add(new Setter(TabItem.BorderBrushProperty, Brushes.Transparent));

            var selectedTabItemStyle = new Style(s => s.Is<TabItem>().Class(":selected"));
            selectedTabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_BackgroundColor));
            selectedTabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_TextColor));

            var pointerOverTabItemStyle = new Style(s => s.Is<TabItem>().Class(":pointerover").Not(x => x.Class(":selected")));
            pointerOverTabItemStyle.Setters.Add(new Setter(TabItem.BackgroundProperty, _theme.B_SlightlyLighterBackground));
            pointerOverTabItemStyle.Setters.Add(new Setter(TabItem.ForegroundProperty, _theme.B_TextColor));

            tabControl.Styles.Add(tabItemStyle);
            tabControl.Styles.Add(selectedTabItemStyle);
            tabControl.Styles.Add(pointerOverTabItemStyle);

            var libraryTab = new TabItem
            {
                Header = "LIBRARY",
                Content = CreateSongListScrollViewer()
            };

            var artistsTab = new TabItem
            {
                Header = "ARTISTS",
                Content = CreateArtistsListScrollViewer()
            };

            var albumsTab = new TabItem
            {
                Header = "ALBUMS",
                Content = CreateAlbumsListScrollViewer()
            };

            tabControl.Items.Add(libraryTab);
            tabControl.Items.Add(artistsTab);
            tabControl.Items.Add(albumsTab);

            songListBox = _songListBoxInstance!;
            artistsListBox = _artistsListBoxInstance!; // Assign out param
            albumsListBox = _albumsListBoxInstance!;   // Assign out param
            return tabControl;
        }

        private ScrollViewer CreateSongListScrollViewer()
        {
            _songListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "SongListBox"
            };

            // Common ListBoxItem styles
            ApplyListBoxItemStyles(_songListBoxInstance);

            _songListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.FilteredSongs"));
            _songListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedSong", BindingMode.TwoWay));

            _songListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedSongTemplate;
            _songListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _songListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private ScrollViewer CreateArtistsListScrollViewer()
        {
            _artistsListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "ArtistsListBox"
            };
            ApplyListBoxItemStyles(_artistsListBoxInstance);

            _artistsListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.Artists"));
            _artistsListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedArtist", BindingMode.TwoWay));

            _artistsListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedArtistTemplate;
            _artistsListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _artistsListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private ScrollViewer CreateAlbumsListScrollViewer()
        {
            _albumsListBoxInstance = new ListBox
            {
                Background = _theme.B_ListBoxBackground,
                BorderThickness = new Thickness(0),
                Margin = new Thickness(10),
                Name = "AlbumsListBox"
            };
            ApplyListBoxItemStyles(_albumsListBoxInstance);

            _albumsListBoxInstance.Bind(ItemsControl.ItemsSourceProperty, new Binding("Library.Albums"));
            _albumsListBoxInstance.Bind(ListBox.SelectedItemProperty, new Binding("Library.SelectedAlbum", BindingMode.TwoWay));

            _albumsListBoxInstance.ItemTemplate = _sharedViewTemplates.DetailedAlbumTemplate;
            _albumsListBoxInstance.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;

            return new ScrollViewer { Content = _albumsListBoxInstance, Padding = new Thickness(0, 0, 0, 5), HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled };
        }

        private void ApplyListBoxItemStyles(ListBox listBox)
        {
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>())
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_ListBoxBackground),
                    new Setter(TextBlock.ForegroundProperty, _theme.B_TextColor),
                    new Setter(ListBoxItem.PaddingProperty, new Thickness(3)) // Default padding, templates can override
                }
            });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":pointerover").Not(xx => xx.Class(":selected")))
            { Setters = { new Setter(TemplatedControl.BackgroundProperty, _theme.B_ControlBackgroundColor) } });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":selected"))
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_AccentColor),
                    new Setter(TextBlock.ForegroundProperty, _theme.B_AccentForeground)
                }
            });
            listBox.Styles.Add(new Style(s => s.Is<ListBoxItem>().Class(":selected").Class(":pointerover"))
            {
                Setters = {
                    new Setter(TemplatedControl.BackgroundProperty, _theme.B_AccentColor), // Keep accent when selected and hovered
                    new Setter(TextBlock.ForegroundProperty, _theme.B_AccentForeground)
                }
            });
        }

        // Renamed and generalized
        public void UpdateListViewMode(SongDisplayMode mode, ListBox listBox, IDataTemplate detailedTemplate, IDataTemplate compactTemplate, IDataTemplate gridTemplate)
        {
            if (listBox == null)
            {
                Debug.WriteLine($"[MainTabViewControls] UpdateListViewMode called but target ListBox is null.");
                return;
            }

            Debug.WriteLine($"[MainTabViewControls] Applying display mode: {mode} to ListBox: {listBox.Name}");
            var scrollViewer = listBox.Parent as ScrollViewer;

            switch (mode)
            {
                case SongDisplayMode.Detailed:
                    listBox.ItemTemplate = detailedTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
                case SongDisplayMode.Compact:
                    listBox.ItemTemplate = compactTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.StackPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
                case SongDisplayMode.Grid:
                    listBox.ItemTemplate = gridTemplate;
                    listBox.ItemsPanel = _sharedViewTemplates.WrapPanelItemsPanelTemplate;
                    if (scrollViewer != null) scrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
                    break;
            }
        }
    }
}
</file>

<file path="Source\Views\MainWindowControls\PlaybackNavigationButtonsPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Data;
using Avalonia.Data.Converters;
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Converters;
using Sonorize.Models;
using Sonorize.ViewModels; // Required for RepeatMode enum
using System.Diagnostics;

namespace Sonorize.Views.MainWindowControls;

public static class PlaybackNavigationButtonsPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        // Previous Button
        var previousButton = new Button
        {
            Content = "<",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            Width = 32,
            Height = 32,
            CornerRadius = new CornerRadius(16),
            Padding = new Thickness(0),
            FontSize = 16,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center
        };
        previousButton.Bind(Button.CommandProperty, new Binding("Library.PreviousTrackCommand"));

        var mainPlayPauseButton = new Button
        {
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_AccentColor,
            BorderThickness = new Thickness(1),
            Width = 38,
            Height = 38,
            CornerRadius = new CornerRadius(19),
            Padding = new Thickness(0),
            FontSize = 18,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center
        };
        mainPlayPauseButton.Bind(Button.CommandProperty, new Binding("Playback.PlayPauseResumeCommand"));
        mainPlayPauseButton.Bind(Button.ContentProperty, new Binding("Playback.IsPlaying") { Converter = BooleanToPlayPauseIconConverter.Instance });

        var nextButton = new Button
        {
            Content = ">",
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            Width = 32,
            Height = 32,
            CornerRadius = new CornerRadius(16),
            Padding = new Thickness(0),
            FontSize = 16,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center
        };
        nextButton.Bind(Button.CommandProperty, new Binding("Library.NextTrackCommand"));

        var shuffleButton = new ToggleButton
        {
            Foreground = theme.B_SecondaryTextColor,
            Background = Brushes.Transparent,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            Padding = new Thickness(5),
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            ContentTemplate = null,
            Width = 32,
            Height = 32
        };
        shuffleButton.Content = new TextBlock
        {
            TextAlignment = TextAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            FontSize = 18,
            FontFamily = new FontFamily("Segoe UI Symbol, Arial"),
            [!TextBlock.TextProperty] = new Binding("Playback.ShuffleEnabled") { Converter = BooleanToShuffleIconConverter.Instance }
        };
        shuffleButton.Bind(ToggleButton.IsCheckedProperty, new Binding("Playback.ShuffleEnabled", BindingMode.TwoWay));
        shuffleButton[!ToggleButton.ForegroundProperty] = new Binding("IsChecked")
        {
            Source = shuffleButton,
            Converter = new FuncValueConverter<bool, IBrush>(isChecked => isChecked ? theme.B_AccentColor : theme.B_SecondaryTextColor)
        };
        shuffleButton[!ToggleButton.BorderBrushProperty] = new Binding("IsChecked")
        {
            Source = shuffleButton,
            Converter = new FuncValueConverter<bool, IBrush>(isChecked => isChecked ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        shuffleButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var repeatModeButton = new ToggleButton
        {
            Foreground = theme.B_SecondaryTextColor,
            Background = Brushes.Transparent,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            Padding = new Thickness(5),
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalContentAlignment = VerticalAlignment.Center,
            HorizontalContentAlignment = HorizontalAlignment.Center,
            ContentTemplate = null,
            Width = 32,
            Height = 32
        };
        repeatModeButton.Content = new TextBlock
        {
            TextAlignment = TextAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Center,
            FontSize = 18,
            FontFamily = new FontFamily("Segoe UI Symbol, Arial"),
            RenderTransformOrigin = new RelativePoint(0.5, 0.5, RelativeUnit.Relative),
            [!TextBlock.TextProperty] = new Binding("Playback.RepeatMode")
            {
                Converter = new FuncValueConverter<RepeatMode, string>(mode => mode switch
                {
                    RepeatMode.None => "―",
                    RepeatMode.PlayOnce => "₁",
                    RepeatMode.RepeatOne => "🔂",
                    RepeatMode.RepeatAll => "🔁",
                    _ => "?"
                })
            },
            [!TextBlock.RenderTransformProperty] = new Binding("Playback.RepeatMode")
            {
                Converter = new FuncValueConverter<RepeatMode, ITransform?>(mode =>
                {
                    return mode switch
                    {
                        RepeatMode.PlayOnce => new TranslateTransform(0, -3),
                        RepeatMode.None => new TranslateTransform(0, -1),
                        _ => null
                    };
                })
            }
        };
        repeatModeButton[!ToggleButton.ForegroundProperty] = new Binding("Playback.RepeatMode")
        {
            Converter = new FuncValueConverter<RepeatMode, IBrush>(mode => mode != RepeatMode.None ? theme.B_AccentColor : theme.B_SecondaryTextColor)
        };
        repeatModeButton[!ToggleButton.BorderBrushProperty] = new Binding("Playback.RepeatMode")
        {
            Converter = new FuncValueConverter<RepeatMode, IBrush>(mode => mode != RepeatMode.None ? theme.B_AccentColor : theme.B_ControlBackgroundColor)
        };
        repeatModeButton.Bind(ToggleButton.IsCheckedProperty, new Binding("Playback.IsRepeatActive"));
        repeatModeButton.Bind(Button.CommandProperty, new Binding("Playback.CycleRepeatModeCommand"));
        repeatModeButton.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var combinedPlaybackButtonControlsPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            Spacing = 10,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(0)
        };

        combinedPlaybackButtonControlsPanel.Children.Add(shuffleButton);
        combinedPlaybackButtonControlsPanel.Children.Add(previousButton);
        combinedPlaybackButtonControlsPanel.Children.Add(mainPlayPauseButton);
        combinedPlaybackButtonControlsPanel.Children.Add(nextButton);
        combinedPlaybackButtonControlsPanel.Children.Add(repeatModeButton);

        return combinedPlaybackButtonControlsPanel;
    }
}
</file>

<file path="Source\Views\MainWindowControls\PlaybackTimeSliderPanel.cs">
using System;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives; // For Thumb, Track
using Avalonia.Controls.Templates;  // For FuncControlTemplate
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Sonorize.Converters;
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.MainWindowControls;

public static class PlaybackTimeSliderPanel
{
    public static Grid Create(ThemeColors theme)
    {
        // TextBlock for Current Time
        var currentTimeTextBlock = new TextBlock
        {
            Foreground = theme.B_SecondaryTextColor,
            FontSize = 11,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(0, 0, 5, 0),
            MinWidth = 40,
            HorizontalAlignment = HorizontalAlignment.Left
        };
        currentTimeTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentTimeDisplay"));
        currentTimeTextBlock.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        // TextBlock for Total Time
        var totalTimeTextBlock = new TextBlock
        {
            Foreground = theme.B_SecondaryTextColor,
            FontSize = 11,
            VerticalAlignment = VerticalAlignment.Center,
            Margin = new Thickness(5, 0, 0, 0),
            MinWidth = 40,
            HorizontalAlignment = HorizontalAlignment.Right
        };
        totalTimeTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.TotalTimeDisplay"));
        totalTimeTextBlock.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        var mainPlaybackSlider = new Slider
        {
            Name = "MainPlaybackSliderInstance",
            Minimum = 0,
            VerticalAlignment = VerticalAlignment.Center,
            Background = theme.B_SecondaryTextColor, // Inactive part of the track
            Foreground = theme.B_AccentColor,        // Active part of the track
            HorizontalAlignment = HorizontalAlignment.Stretch,
            Height = 32,                             // Overall height of the slider control
            MinHeight = 32,                          // Ensure it requests this minimum height
            Padding = new Thickness(0),
            CornerRadius = new CornerRadius(8),      // Rounded ends for the overall slider control
            RenderTransform = new TranslateTransform(0, -3) // Shift slider up by 3 pixels
        };

        // Override the theme resource for track height specifically for this slider
        mainPlaybackSlider.Resources["SliderTrackThemeHeight"] = 6.0;

        // Slider Template - thumb invisible but interactive
        mainPlaybackSlider.Template = new FuncControlTemplate<Slider>((slider, _) =>
        {
            var backgroundPart = new Border
            {
                Background = slider.Background,
                CornerRadius = new CornerRadius(3),
                VerticalAlignment = VerticalAlignment.Center,
                Height = 8
            };

            var filledPart = new Border
            {
                Background = slider.Foreground,
                CornerRadius = new CornerRadius(3),
                VerticalAlignment = VerticalAlignment.Center,
                Height = 8
            };

            var thumb = new Thumb
            {
                Width = 4,
                Height = 6,
                Opacity = 0,
                IsHitTestVisible = true
            };

            var track = new Track
            {
                Name = "PART_Track",
                Orientation = Orientation.Horizontal,
                Thumb = thumb
            };

            track.Bind(Track.MinimumProperty, slider[!Slider.MinimumProperty]);
            track.Bind(Track.MaximumProperty, slider[!Slider.MaximumProperty]);
            track.Bind(Track.ValueProperty, slider[!Slider.ValueProperty]);

            var container = new Grid
            {
                VerticalAlignment = VerticalAlignment.Center,
                Height = 6,
                Children =
                {
                    backgroundPart,
                    new Grid
                    {
                        HorizontalAlignment = HorizontalAlignment.Left,
                        Children = { filledPart }
                    },
                    track
                }
            };

            // Bind filledPart.Width to proportional slider value
            filledPart.Bind(Border.WidthProperty, new MultiBinding
            {
                Converter = new SliderFillWidthConverter(),
                Bindings =
                {
                    slider[!Slider.ValueProperty],
                    slider[!Slider.MaximumProperty],
                    slider[!Slider.BoundsProperty]
                }
            });

            return container;
        });

        // HERE IS THE CRUCIAL CHANGE:
        // Handle PointerPressed on the slider itself (the whole clickable area)
        mainPlaybackSlider.PointerPressed += (sender, e) =>
        {
            var s = (Slider)sender;
            var pos = e.GetPosition(s);
            var bounds = s.Bounds;

            if (bounds.Width > 0)
            {
                // Calculate ratio (clamped 0 to 1)
                double ratio = Math.Clamp(pos.X / bounds.Width, 0, 1);

                // Calculate new slider value based on ratio
                double newValue = s.Minimum + ratio * (s.Maximum - s.Minimum);

                s.Value = newValue;
                e.Handled = true;
            }
        };

        mainPlaybackSlider.Bind(Slider.MaximumProperty, new Binding("Playback.CurrentSongDurationSeconds"));
        mainPlaybackSlider.Bind(Slider.ValueProperty, new Binding("Playback.CurrentPositionSeconds", BindingMode.TwoWay));
        mainPlaybackSlider.Bind(Control.IsEnabledProperty, new Binding("Playback.HasCurrentSong"));

        var timeSliderGrid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto"),
            VerticalAlignment = VerticalAlignment.Center,
            Height = 32,
            MinWidth = 500,
            HorizontalAlignment = HorizontalAlignment.Stretch,
            ClipToBounds = false
        };

        Grid.SetColumn(currentTimeTextBlock, 0);
        Grid.SetColumn(mainPlaybackSlider, 1);
        Grid.SetColumn(totalTimeTextBlock, 2);

        timeSliderGrid.Children.Add(currentTimeTextBlock);
        timeSliderGrid.Children.Add(mainPlaybackSlider);
        timeSliderGrid.Children.Add(totalTimeTextBlock);

        return timeSliderGrid;
    }
}
</file>

<file path="Source\Views\MainWindowControls\SearchBarPanels.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Styling;
using Sonorize.Models; // For ThemeColors
using Sonorize.ViewModels; // Required for Binding

namespace Sonorize.Views.MainWindowControls;

public static class SearchBarPanel
{
    public static Panel Create(ThemeColors theme)
    {
        var searchBox = new TextBox
        {
            Watermark = "Search songs by title, artist, or album...",
            Margin = new Thickness(10, 5, 10, 5),
            Padding = new Thickness(10, 7),
            Background = theme.B_SlightlyLighterBackground,
            Foreground = theme.B_TextColor,
            BorderBrush = theme.B_ControlBackgroundColor,
            BorderThickness = new Thickness(1),
            CornerRadius = new CornerRadius(4),
            FontSize = 14
        };
        // Bind to Library.SearchQuery
        searchBox.Bind(TextBox.TextProperty, new Binding("Library.SearchQuery", BindingMode.TwoWay));

        searchBox.Styles.Add(new Style(s => s.Is<TextBox>().Class(":focus"))
        {
            Setters = { new Setter(TextBox.BorderBrushProperty, theme.B_AccentColor) }
        });

        var panel = new Panel
        {
            Children = { searchBox },
            Margin = new Thickness(0, 5, 0, 0)
        };
        return panel;
    }
}
</file>

<file path="Source\Views\MainWindowControls\SharedViewTemplates.cs">
using System.Linq;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Sonorize.Models; // For Song, ArtistViewModel, AlbumViewModel, ThemeColors
using Sonorize.ViewModels; // For SongDisplayMode (though not directly used here, context is relevant)

namespace Sonorize.Views.MainWindowControls
{
    public class SharedViewTemplates
    {
        private readonly ThemeColors _theme;

        // Song Templates
        public FuncDataTemplate<Song> DetailedSongTemplate { get; private set; }
        public FuncDataTemplate<Song> CompactSongTemplate { get; private set; }
        public FuncDataTemplate<Song> GridSongTemplate { get; private set; }

        // Artist Templates
        public FuncDataTemplate<ArtistViewModel> DetailedArtistTemplate { get; private set; }
        public FuncDataTemplate<ArtistViewModel> CompactArtistTemplate { get; private set; }
        public FuncDataTemplate<ArtistViewModel> GridArtistTemplate { get; private set; }

        // Album Templates
        public FuncDataTemplate<AlbumViewModel> DetailedAlbumTemplate { get; private set; }
        public FuncDataTemplate<AlbumViewModel> CompactAlbumTemplate { get; private set; }
        public FuncDataTemplate<AlbumViewModel> GridAlbumTemplate { get; private set; }


        // Panel Templates (reusable)
        public ITemplate<Panel?> StackPanelItemsPanelTemplate { get; private set; }
        public ITemplate<Panel?> WrapPanelItemsPanelTemplate { get; private set; }

        public SharedViewTemplates(ThemeColors theme)
        {
            _theme = theme;
            InitializeSongTemplates();
            InitializeArtistTemplates();
            InitializeAlbumTemplates();
            InitializePanelTemplates();
        }

        private void InitializeSongTemplates()
        {
            // Detailed Song Template
            DetailedSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) => {
                var image = new Image { Width = 32, Height = 32, Margin = new Thickness(5, 0, 5, 0), Stretch = Stretch.UniformToFill };
                image.Bind(Image.SourceProperty, new Binding(nameof(Song.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var titleBlock = new TextBlock { FontSize = 14, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(0, 0, 0, 1) };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 11, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)));

                var durationBlock = new TextBlock { FontSize = 11, HorizontalAlignment = HorizontalAlignment.Right, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor };
                durationBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.DurationString)));

                var textStack = new StackPanel { Orientation = Orientation.Vertical, VerticalAlignment = VerticalAlignment.Center, Margin = new Thickness(8, 0, 0, 0), Children = { titleBlock, artistBlock } };
                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto"), VerticalAlignment = VerticalAlignment.Center, Children = { image, textStack, durationBlock } };
                Grid.SetColumn(image, 0); Grid.SetColumn(textStack, 1); Grid.SetColumn(durationBlock, 2);
                return new Border { Padding = new Thickness(10, 6, 10, 6), MinHeight = 44, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            // Compact Song Template
            CompactSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) => {
                var titleBlock = new TextBlock { FontSize = 12, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 11, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor, TextTrimming = TextTrimming.CharacterEllipsis, Margin = new Thickness(5, 0, 0, 0) };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)) { StringFormat = " - {0}" });


                var titleArtistPanel = new StackPanel { Orientation = Orientation.Horizontal, VerticalAlignment = VerticalAlignment.Center, Children = { titleBlock, artistBlock } };

                var durationBlock = new TextBlock { FontSize = 11, HorizontalAlignment = HorizontalAlignment.Right, VerticalAlignment = VerticalAlignment.Center, Foreground = _theme.B_SecondaryTextColor, Margin = new Thickness(5, 0, 0, 0) };
                durationBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.DurationString)));

                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("*,Auto"), VerticalAlignment = VerticalAlignment.Center };
                itemGrid.Children.Add(titleArtistPanel); itemGrid.Children.Add(durationBlock);
                Grid.SetColumn(titleArtistPanel, 0); Grid.SetColumn(durationBlock, 1);
                return new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            // Grid Song Template
            GridSongTemplate = new FuncDataTemplate<Song>((dataContext, nameScope) => {
                var image = new Image { Width = 80, Height = 80, Stretch = Stretch.UniformToFill, HorizontalAlignment = HorizontalAlignment.Center };
                image.Bind(Image.SourceProperty, new Binding(nameof(Song.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var titleBlock = new TextBlock { FontSize = 12, FontWeight = FontWeight.SemiBold, TextWrapping = TextWrapping.Wrap, MaxHeight = 30, TextAlignment = TextAlignment.Center, HorizontalAlignment = HorizontalAlignment.Center, Margin = new Thickness(0, 3, 0, 0) };
                titleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Title)));

                var artistBlock = new TextBlock { FontSize = 10, Foreground = _theme.B_SecondaryTextColor, TextWrapping = TextWrapping.Wrap, MaxHeight = 15, TextAlignment = TextAlignment.Center, HorizontalAlignment = HorizontalAlignment.Center, Margin = new Thickness(0, 1, 0, 0) };
                artistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(Song.Artist)));

                var contentStack = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center, Spacing = 2, Children = { image, titleBlock, artistBlock } };
                return new Border { Width = 120, Height = 150, Background = Brushes.Transparent, Padding = new Thickness(5), Child = contentStack, HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Center };
            }, supportsRecycling: true);
        }

        private void InitializeArtistTemplates()
        {
            DetailedArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 32, Height = 32, Margin = new Thickness(5, 0, 10, 0), Stretch = Stretch.UniformToFill };
                image.Bind(Image.SourceProperty, new Binding(nameof(ArtistViewModel.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var artistNameBlock = new TextBlock { FontSize = 14, VerticalAlignment = VerticalAlignment.Center };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));

                var itemGrid = new Grid { ColumnDefinitions = new ColumnDefinitions("Auto,*"), VerticalAlignment = VerticalAlignment.Center };
                itemGrid.Children.Add(image); itemGrid.Children.Add(artistNameBlock);
                Grid.SetColumn(image, 0); Grid.SetColumn(artistNameBlock, 1);
                return new Border { Padding = new Thickness(10, 8), MinHeight = 44, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            CompactArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var artistNameBlock = new TextBlock { FontSize = 12, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));
                return new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = artistNameBlock };
            }, supportsRecycling: true);

            GridArtistTemplate = new FuncDataTemplate<ArtistViewModel>((dataContext, nameScope) =>
            {
                var image = new Image { Width = 80, Height = 80, Stretch = Stretch.UniformToFill, HorizontalAlignment = HorizontalAlignment.Center };
                image.Bind(Image.SourceProperty, new Binding(nameof(ArtistViewModel.Thumbnail)));
                RenderOptions.SetBitmapInterpolationMode(image, BitmapInterpolationMode.HighQuality);

                var artistNameBlock = new TextBlock { FontSize = 12, FontWeight = FontWeight.SemiBold, TextWrapping = TextWrapping.Wrap, MaxHeight = 30, TextAlignment = TextAlignment.Center, HorizontalAlignment = HorizontalAlignment.Center, Margin = new Thickness(0, 3, 0, 0) };
                artistNameBlock.Bind(TextBlock.TextProperty, new Binding(nameof(ArtistViewModel.Name)));

                var contentStack = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center, Spacing = 2, Children = { image, artistNameBlock } };
                return new Border { Width = 120, Height = 130, Background = Brushes.Transparent, Padding = new Thickness(5), Child = contentStack, HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Center };
            }, supportsRecycling: true);
        }

        private void InitializeAlbumTemplates()
        {
            DetailedAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var itemGrid = new Grid
                {
                    ColumnDefinitions = new ColumnDefinitions("Auto,*"),
                    VerticalAlignment = VerticalAlignment.Center
                };

                var imageGrid = new Grid
                {
                    Width = 58,
                    Height = 58,
                    Margin = new Thickness(5, 0, 10, 0),
                    ColumnDefinitions = new ColumnDefinitions("*,*"),
                    RowDefinitions = new RowDefinitions("*,*")
                };

                for (int i = 0; i < 4; i++)
                {
                    var img = new Image { Width = 28, Height = 28, Stretch = Stretch.UniformToFill };
                    // Binding to an indexed property of a List<Bitmap?>.
                    // This relies on AlbumViewModel.SongThumbnailsForGrid property itself raising PropertyChanged if the list instance changes,
                    // or if AlbumViewModel.SongThumbnailsForGrid was an ObservableCollection and its items change.
                    // Given current AlbumViewModel setup, this will show initial state.
                    img.Bind(Image.SourceProperty, new Binding($"SongThumbnailsForGrid[{i}]"));
                    RenderOptions.SetBitmapInterpolationMode(img, BitmapInterpolationMode.HighQuality);
                    Grid.SetRow(img, i / 2);
                    Grid.SetColumn(img, i % 2);
                    imageGrid.Children.Add(img);
                }

                Grid.SetColumn(imageGrid, 0);
                itemGrid.Children.Add(imageGrid);

                var albumTitleBlock = new TextBlock { FontSize = 14, FontWeight = FontWeight.Normal, VerticalAlignment = VerticalAlignment.Center };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));

                var albumArtistBlock = new TextBlock { FontSize = 11, Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)));

                var textStack = new StackPanel { Orientation = Orientation.Vertical, VerticalAlignment = VerticalAlignment.Center, Children = { albumTitleBlock, albumArtistBlock } };

                Grid.SetColumn(textStack, 1);
                itemGrid.Children.Add(textStack);

                return new Border { Padding = new Thickness(10, 6), MinHeight = 68, Background = Brushes.Transparent, Child = itemGrid };
            }, supportsRecycling: true);

            CompactAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var albumTitleBlock = new TextBlock { FontSize = 12, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));

                var albumArtistBlock = new TextBlock { FontSize = 11, Foreground = _theme.B_SecondaryTextColor, VerticalAlignment = VerticalAlignment.Center, TextTrimming = TextTrimming.CharacterEllipsis, Margin = new Thickness(5, 0, 0, 0) };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)) { StringFormat = " - {0}" });

                var panel = new StackPanel { Orientation = Orientation.Horizontal, VerticalAlignment = VerticalAlignment.Center, Children = { albumTitleBlock, albumArtistBlock } };
                return new Border { Padding = new Thickness(10, 4, 10, 4), MinHeight = 30, Background = Brushes.Transparent, Child = panel };
            }, supportsRecycling: true);

            GridAlbumTemplate = new FuncDataTemplate<AlbumViewModel>((dataContext, nameScope) =>
            {
                var contentStack = new StackPanel
                {
                    Orientation = Orientation.Vertical,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Spacing = 3
                };

                // Logic to decide 2x2 or single image based on bound data needs to be cleaner if done in C# template.
                // For simplicity, binding to RepresentativeThumbnail (which AlbumViewModel should prepare).
                // A more complex template might use a ContentControl with a StyleSelector or multiple DataTemplates.

                // Create a placeholder for the image part, could be a Grid or single Image
                var imagePresenter = new Panel { Width = 80, Height = 80, HorizontalAlignment = HorizontalAlignment.Center };


                // Attempting a dynamic switch based on data. This is complex in FuncDataTemplate.
                // A common approach is to have the ViewModel provide a single "display-ready" thumbnail or a type indicator.
                // Here, we'll just bind to RepresentativeThumbnail for grid view.
                // If more complex logic (like showing 2x2) is needed, it should ideally be handled by ViewModel state
                // or a custom control / more sophisticated templating.

                if (dataContext != null && dataContext.SongThumbnailsForGrid != null && dataContext.SongThumbnailsForGrid.Count(t => t != null) > 1)
                {
                    var imageGrid = new Grid
                    {
                        Width = 80, // Keep overall size consistent
                        Height = 80,
                        HorizontalAlignment = HorizontalAlignment.Center,
                        ColumnDefinitions = new ColumnDefinitions("*,*"),
                        RowDefinitions = new RowDefinitions("*,*")
                    };

                    for (int i = 0; i < 4; i++)
                    {
                        var img = new Image { Width = 38, Height = 38, Stretch = Stretch.UniformToFill, Margin = new Thickness(1) }; // Smaller images for grid
                        img.Bind(Image.SourceProperty, new Binding($"SongThumbnailsForGrid[{i}]"));
                        RenderOptions.SetBitmapInterpolationMode(img, BitmapInterpolationMode.HighQuality);
                        Grid.SetRow(img, i / 2);
                        Grid.SetColumn(img, i % 2);
                        imageGrid.Children.Add(img);
                    }
                    imagePresenter.Children.Add(imageGrid);
                }
                else // Show single representative thumbnail
                {
                    var singleImage = new Image
                    {
                        Width = 80,
                        Height = 80,
                        Stretch = Stretch.UniformToFill,
                        HorizontalAlignment = HorizontalAlignment.Center
                    };
                    singleImage.Bind(Image.SourceProperty, new Binding(nameof(AlbumViewModel.RepresentativeThumbnail)));
                    RenderOptions.SetBitmapInterpolationMode(singleImage, BitmapInterpolationMode.HighQuality);
                    imagePresenter.Children.Add(singleImage);
                }
                contentStack.Children.Add(imagePresenter);


                var albumTitleBlock = new TextBlock
                {
                    FontSize = 12,
                    FontWeight = FontWeight.SemiBold,
                    TextWrapping = TextWrapping.Wrap,
                    MaxHeight = 30,
                    TextAlignment = TextAlignment.Center,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    Margin = new Thickness(0, 2, 0, 0)
                };
                albumTitleBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Title)));
                contentStack.Children.Add(albumTitleBlock);

                var albumArtistBlock = new TextBlock
                {
                    FontSize = 10,
                    Foreground = _theme.B_SecondaryTextColor,
                    TextWrapping = TextWrapping.Wrap,
                    MaxHeight = 15,
                    TextAlignment = TextAlignment.Center,
                    HorizontalAlignment = HorizontalAlignment.Center
                };
                albumArtistBlock.Bind(TextBlock.TextProperty, new Binding(nameof(AlbumViewModel.Artist)));
                contentStack.Children.Add(albumArtistBlock);

                return new Border
                {
                    Width = 120,
                    Height = 150,
                    Background = Brushes.Transparent,
                    Padding = new Thickness(5),
                    Child = contentStack,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
            }, supportsRecycling: true);
        }

        private void InitializePanelTemplates()
        {
            StackPanelItemsPanelTemplate = new FuncTemplate<Panel?>(() => new VirtualizingStackPanel { Orientation = Orientation.Vertical });
            WrapPanelItemsPanelTemplate = new FuncTemplate<Panel?>(() => new WrapPanel { Orientation = Orientation.Horizontal, ItemWidth = 130, ItemHeight = 160 }); // Adjusted ItemWidth/Height for grid items
        }
    }
}
</file>

<file path="Source\Views\MainWindowControls\SongInfoDisplayPanel.cs">
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Media.Imaging; // Required for BitmapInterpolationMode
using Sonorize.Models; // For ThemeColors

namespace Sonorize.Views.MainWindowControls;

public static class SongInfoDisplayPanel
{
    public static StackPanel Create(ThemeColors theme)
    {
        var songInfoPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            VerticalAlignment = VerticalAlignment.Center,
            HorizontalAlignment = HorizontalAlignment.Left,
            Margin = new Thickness(10, 0, 0, 0),
            Spacing = 8,
        };
        songInfoPanel.Bind(Visual.IsVisibleProperty, new Binding("Playback.HasCurrentSong"));

        var thumbnailImage = new Image
        {
            Width = 64,
            Height = 64,
            Source = null, // Will be bound
            Stretch = Stretch.UniformToFill,
            VerticalAlignment = VerticalAlignment.Center
        };
        RenderOptions.SetBitmapInterpolationMode(thumbnailImage, BitmapInterpolationMode.HighQuality);
        thumbnailImage.Bind(Image.SourceProperty, new Binding("Playback.CurrentSong.Thumbnail"));

        var textStack = new StackPanel
        {
            Orientation = Orientation.Vertical,
            VerticalAlignment = VerticalAlignment.Center,
            Spacing = 1
        };

        var titleTextBlock = new TextBlock
        {
            Text = "Unknown Title", // Default, will be bound
            FontSize = 14,
            FontWeight = FontWeight.SemiBold,
            Foreground = theme.B_TextColor,
            TextTrimming = TextTrimming.CharacterEllipsis,
            VerticalAlignment = VerticalAlignment.Center,
            MaxWidth = 200
        };
        titleTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentSong.Title"));

        var artistTextBlock = new TextBlock
        {
            Text = "Unknown Artist", // Default, will be bound
            FontSize = 11,
            Foreground = theme.B_SecondaryTextColor,
            TextTrimming = TextTrimming.CharacterEllipsis,
            VerticalAlignment = VerticalAlignment.Center,
            MaxWidth = 200
        };
        artistTextBlock.Bind(TextBlock.TextProperty, new Binding("Playback.CurrentSong.Artist"));

        textStack.Children.Add(titleTextBlock);
        textStack.Children.Add(artistTextBlock);

        songInfoPanel.Children.Add(thumbnailImage);
        songInfoPanel.Children.Add(textStack);

        return songInfoPanel;
    }
}
</file>

